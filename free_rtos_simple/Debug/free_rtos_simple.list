
free_rtos_simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a60  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08005c10  08005c10  00015c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006024  08006024  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006024  08006024  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006024  08006024  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006024  08006024  00016024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006028  08006028  00016028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800602c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00012dd4  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012fb4  20012fb4  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a307  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001765  00000000  00000000  0002a517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b8  00000000  00000000  0002bc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000610  00000000  00000000  0002c338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002208  00000000  00000000  0002c948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000070df  00000000  00000000  0002eb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096edc  00000000  00000000  00035c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ccb0b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a78  00000000  00000000  000ccb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005bf8 	.word	0x08005bf8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08005bf8 	.word	0x08005bf8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8000bd4:	f001 fab2 	bl	800213c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 8000bd8:	4b49      	ldr	r3, [pc, #292]	; (8000d00 <pvPortMalloc+0x138>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d104      	bne.n	8000bea <pvPortMalloc+0x22>
        {
            prvHeapInit();
 8000be0:	f000 f900 	bl	8000de4 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 8000be4:	4b46      	ldr	r3, [pc, #280]	; (8000d00 <pvPortMalloc+0x138>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	601a      	str	r2, [r3, #0]
        }

        if( xWantedSize > 0 )
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d013      	beq.n	8000c18 <pvPortMalloc+0x50>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = heapSTRUCT_SIZE + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	3308      	adds	r3, #8
 8000bfe:	617b      	str	r3, [r7, #20]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d804      	bhi.n	8000c14 <pvPortMalloc+0x4c>
            {
                xWantedSize += xAdditionalRequiredSize;
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	4413      	add	r3, r2
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	e001      	b.n	8000c18 <pvPortMalloc+0x50>
            }
            else
            {
                xWantedSize = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db63      	blt.n	8000ce6 <pvPortMalloc+0x11e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d060      	beq.n	8000ce6 <pvPortMalloc+0x11e>
 8000c24:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <pvPortMalloc+0x13c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d85b      	bhi.n	8000ce6 <pvPortMalloc+0x11e>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8000c2e:	4b36      	ldr	r3, [pc, #216]	; (8000d08 <pvPortMalloc+0x140>)
 8000c30:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8000c32:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <pvPortMalloc+0x140>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000c38:	e004      	b.n	8000c44 <pvPortMalloc+0x7c>
                {
                    pxPreviousBlock = pxBlock;
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d903      	bls.n	8000c56 <pvPortMalloc+0x8e>
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f1      	bne.n	8000c3a <pvPortMalloc+0x72>
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	4a2c      	ldr	r2, [pc, #176]	; (8000d0c <pvPortMalloc+0x144>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d043      	beq.n	8000ce6 <pvPortMalloc+0x11e>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8000c5e:	6a3b      	ldr	r3, [r7, #32]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2208      	movs	r2, #8
 8000c64:	4413      	add	r3, r2
 8000c66:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	2208      	movs	r2, #8
 8000c7a:	0052      	lsls	r2, r2, #1
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d922      	bls.n	8000cc6 <pvPortMalloc+0xfe>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	1ad2      	subs	r2, r2, r3
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <pvPortMalloc+0x140>)
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	e002      	b.n	8000cac <pvPortMalloc+0xe4>
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	61bb      	str	r3, [r7, #24]
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d8f6      	bhi.n	8000ca6 <pvPortMalloc+0xde>
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	601a      	str	r2, [r3, #0]
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <pvPortMalloc+0x13c>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	4a0c      	ldr	r2, [pc, #48]	; (8000d04 <pvPortMalloc+0x13c>)
 8000cd2:	6013      	str	r3, [r2, #0]

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000ce6:	f001 fa37 	bl	8002158 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <pvPortMalloc+0x12c>
        {
            vApplicationMallocFailedHook();
 8000cf0:	f000 f9e2 	bl	80010b8 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
 8000cf4:	69fb      	ldr	r3, [r7, #28]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3728      	adds	r7, #40	; 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20012e0c 	.word	0x20012e0c
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20012dfc 	.word	0x20012dfc
 8000d0c:	20012e04 	.word	0x20012e04

08000d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	61bb      	str	r3, [r7, #24]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d057      	beq.n	8000dd2 <vPortFree+0xc2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 8000d22:	2308      	movs	r3, #8
 8000d24:	425b      	negs	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4413      	add	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	617b      	str	r3, [r7, #20]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <vPortFree+0x3e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d3c:	f383 8811 	msr	BASEPRI, r3
 8000d40:	f3bf 8f6f 	isb	sy
 8000d44:	f3bf 8f4f 	dsb	sy
 8000d48:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000d4a:	bf00      	nop
 8000d4c:	e7fe      	b.n	8000d4c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d00a      	beq.n	8000d6c <vPortFree+0x5c>
        __asm volatile
 8000d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d5a:	f383 8811 	msr	BASEPRI, r3
 8000d5e:	f3bf 8f6f 	isb	sy
 8000d62:	f3bf 8f4f 	dsb	sy
 8000d66:	60bb      	str	r3, [r7, #8]
    }
 8000d68:	bf00      	nop
 8000d6a:	e7fe      	b.n	8000d6a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	0fdb      	lsrs	r3, r3, #31
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d02a      	beq.n	8000dd2 <vPortFree+0xc2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d126      	bne.n	8000dd2 <vPortFree+0xc2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + heapSTRUCT_SIZE, 0, pxLink->xBlockSize - heapSTRUCT_SIZE );
                }
                #endif

                vTaskSuspendAll();
 8000d90:	f001 f9d4 	bl	800213c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <vPortFree+0xcc>)
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	e002      	b.n	8000da6 <vPortFree+0x96>
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d8f6      	bhi.n	8000da0 <vPortFree+0x90>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	601a      	str	r2, [r3, #0]
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <vPortFree+0xd0>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <vPortFree+0xd0>)
 8000dcc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
 8000dce:	f001 f9c3 	bl	8002158 <xTaskResumeAll>
            }
        }
    }
}
 8000dd2:	bf00      	nop
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20012dfc 	.word	0x20012dfc
 8000de0:	20000000 	.word	0x20000000

08000de4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <prvHeapInit+0x44>)
 8000dec:	f023 0307 	bic.w	r3, r3, #7
 8000df0:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <prvHeapInit+0x48>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <prvHeapInit+0x48>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <prvHeapInit+0x4c>)
 8000e00:	4a0c      	ldr	r2, [pc, #48]	; (8000e34 <prvHeapInit+0x50>)
 8000e02:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <prvHeapInit+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <prvHeapInit+0x50>)
 8000e12:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <prvHeapInit+0x4c>)
 8000e18:	601a      	str	r2, [r3, #0]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000203 	.word	0x20000203
 8000e2c:	20012dfc 	.word	0x20012dfc
 8000e30:	20012e04 	.word	0x20012e04
 8000e34:	00012bf8 	.word	0x00012bf8

08000e38 <Init_LEDs>:
#define ORANGE_LED_PIN			(1U<<13)
#define RED_LED_PIN				(1U<<14)
#define BLUE_LED_PIN			(1U<<15)

void Init_LEDs()
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR  |= GPIODEN;
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <Init_LEDs+0x7c>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	4a1c      	ldr	r2, [pc, #112]	; (8000eb4 <Init_LEDs+0x7c>)
 8000e42:	f043 0308 	orr.w	r3, r3, #8
 8000e46:	6313      	str	r3, [r2, #48]	; 0x30

	// pd12
	GPIOD->MODER |=(1U<<24);
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <Init_LEDs+0x80>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1a      	ldr	r2, [pc, #104]	; (8000eb8 <Init_LEDs+0x80>)
 8000e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e52:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<25);
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <Init_LEDs+0x80>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <Init_LEDs+0x80>)
 8000e5a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000e5e:	6013      	str	r3, [r2, #0]

	// pd13
	GPIOD->MODER |=(1U<<26);
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <Init_LEDs+0x80>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <Init_LEDs+0x80>)
 8000e66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e6a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<27);
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <Init_LEDs+0x80>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <Init_LEDs+0x80>)
 8000e72:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000e76:	6013      	str	r3, [r2, #0]

	// pd14
	GPIOD->MODER |=(1U<<28);
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <Init_LEDs+0x80>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <Init_LEDs+0x80>)
 8000e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e82:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<29);
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <Init_LEDs+0x80>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <Init_LEDs+0x80>)
 8000e8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000e8e:	6013      	str	r3, [r2, #0]

	// pd15
	GPIOD->MODER |=(1U<<30);
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <Init_LEDs+0x80>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <Init_LEDs+0x80>)
 8000e96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e9a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<31);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <Init_LEDs+0x80>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <Init_LEDs+0x80>)
 8000ea2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020c00 	.word	0x40020c00

08000ebc <GreenLED_On>:

void GreenLED_On()
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
	GPIOD->ODR |= GREEN_LED_PIN;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <GreenLED_On+0x1c>)
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <GreenLED_On+0x1c>)
 8000ec6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eca:	6153      	str	r3, [r2, #20]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40020c00 	.word	0x40020c00

08000edc <GreenLED_Off>:

void GreenLED_Off()
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~(GREEN_LED_PIN);
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <GreenLED_Off+0x1c>)
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <GreenLED_Off+0x1c>)
 8000ee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000eea:	6153      	str	r3, [r2, #20]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40020c00 	.word	0x40020c00

08000efc <OrangeLED_On>:


void OrangeLED_On()
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
	GPIOD->ODR |= ORANGE_LED_PIN;
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <OrangeLED_On+0x1c>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <OrangeLED_On+0x1c>)
 8000f06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f0a:	6153      	str	r3, [r2, #20]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40020c00 	.word	0x40020c00

08000f1c <OrangeLED_Off>:

void OrangeLED_Off()
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~(ORANGE_LED_PIN);
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <OrangeLED_Off+0x1c>)
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <OrangeLED_Off+0x1c>)
 8000f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f2a:	6153      	str	r3, [r2, #20]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40020c00 	.word	0x40020c00

08000f3c <BlueLED_On>:
{
	GPIOD->ODR &= ~(RED_LED_PIN);
}

void BlueLED_On()
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	GPIOD->ODR |= BLUE_LED_PIN;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <BlueLED_On+0x1c>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <BlueLED_On+0x1c>)
 8000f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f4a:	6153      	str	r3, [r2, #20]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40020c00 	.word	0x40020c00

08000f5c <BlueLED_Off>:

void BlueLED_Off()
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~(BLUE_LED_PIN);
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <BlueLED_Off+0x1c>)
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <BlueLED_Off+0x1c>)
 8000f66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f6a:	6153      	str	r3, [r2, #20]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40020c00 	.word	0x40020c00

08000f7c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f103 0208 	add.w	r2, r3, #8
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f103 0208 	add.w	r2, r3, #8
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f103 0208 	add.w	r2, r3, #8
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b085      	sub	sp, #20
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d103      	bne.n	8000ff6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	e00c      	b.n	8001010 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3308      	adds	r3, #8
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e002      	b.n	8001004 <vListInsert+0x2e>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	429a      	cmp	r2, r3
 800100e:	d2f6      	bcs.n	8000ffe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	601a      	str	r2, [r3, #0]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6892      	ldr	r2, [r2, #8]
 800105e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6852      	ldr	r2, [r2, #4]
 8001068:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	d103      	bne.n	800107c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	1e5a      	subs	r2, r3, #1
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <vApplicationTickHook>:
static void vTaskBlinkGreen(void* pvParameters);
static void vTaskBlinkOrange(void* pvParameters);
static void vTaskBlinkBlue(void* pvParameters);

void vApplicationTickHook()
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <vApplicationIdleHook>:

void vApplicationIdleHook()
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook()
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
	for(;;);
 80010bc:	e7fe      	b.n	80010bc <vApplicationMallocFailedHook+0x4>
	...

080010c0 <main>:
}

int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af02      	add	r7, sp, #8

	BaseType_t xReturned;

	Init_LEDs();
 80010c6:	f7ff feb7 	bl	8000e38 <Init_LEDs>

	xReturned = xTaskCreate( vTaskBlinkGreen, "Led1", configMINIMAL_STACK_SIZE, ( void * ) NULL, tskIDLE_PRIORITY, NULL );
 80010ca:	2300      	movs	r3, #0
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	2300      	movs	r3, #0
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2300      	movs	r3, #0
 80010d4:	2282      	movs	r2, #130	; 0x82
 80010d6:	4915      	ldr	r1, [pc, #84]	; (800112c <main+0x6c>)
 80010d8:	4815      	ldr	r0, [pc, #84]	; (8001130 <main+0x70>)
 80010da:	f000 fe3f 	bl	8001d5c <xTaskCreate>
 80010de:	6078      	str	r0, [r7, #4]
	if (xReturned != pdPASS)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d000      	beq.n	80010e8 <main+0x28>
	{
		while(1);
 80010e6:	e7fe      	b.n	80010e6 <main+0x26>
	}
	xReturned = xTaskCreate( vTaskBlinkOrange, "Led2", configMINIMAL_STACK_SIZE, ( void * ) NULL, tskIDLE_PRIORITY, NULL );
 80010e8:	2300      	movs	r3, #0
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	2300      	movs	r3, #0
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2300      	movs	r3, #0
 80010f2:	2282      	movs	r2, #130	; 0x82
 80010f4:	490f      	ldr	r1, [pc, #60]	; (8001134 <main+0x74>)
 80010f6:	4810      	ldr	r0, [pc, #64]	; (8001138 <main+0x78>)
 80010f8:	f000 fe30 	bl	8001d5c <xTaskCreate>
 80010fc:	6078      	str	r0, [r7, #4]
	if (xReturned != pdPASS)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d000      	beq.n	8001106 <main+0x46>
	{
		while(1);
 8001104:	e7fe      	b.n	8001104 <main+0x44>
	}

	xReturned = xTaskCreate( vTaskBlinkBlue, "Led3", configMINIMAL_STACK_SIZE, ( void * ) NULL, tskIDLE_PRIORITY, NULL );
 8001106:	2300      	movs	r3, #0
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	2300      	movs	r3, #0
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2300      	movs	r3, #0
 8001110:	2282      	movs	r2, #130	; 0x82
 8001112:	490a      	ldr	r1, [pc, #40]	; (800113c <main+0x7c>)
 8001114:	480a      	ldr	r0, [pc, #40]	; (8001140 <main+0x80>)
 8001116:	f000 fe21 	bl	8001d5c <xTaskCreate>
 800111a:	6078      	str	r0, [r7, #4]
	if (xReturned != pdPASS)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d000      	beq.n	8001124 <main+0x64>
	{
		while(1);
 8001122:	e7fe      	b.n	8001122 <main+0x62>
	}

	vTaskStartScheduler();
 8001124:	f000 ffb8 	bl	8002098 <vTaskStartScheduler>

	/* Loop forever */
	for(;;);
 8001128:	e7fe      	b.n	8001128 <main+0x68>
 800112a:	bf00      	nop
 800112c:	08005c10 	.word	0x08005c10
 8001130:	08001145 	.word	0x08001145
 8001134:	08005c18 	.word	0x08005c18
 8001138:	08001169 	.word	0x08001169
 800113c:	08005c20 	.word	0x08005c20
 8001140:	0800118d 	.word	0x0800118d

08001144 <vTaskBlinkGreen>:
}

void vTaskBlinkGreen(void* pvParameters)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	const TickType_t xDelay = 750 / portTICK_PERIOD_MS;
 800114c:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001150:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		GreenLED_On();
 8001152:	f7ff feb3 	bl	8000ebc <GreenLED_On>
		vTaskDelay(xDelay);
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f000 ff6a 	bl	8002030 <vTaskDelay>
		GreenLED_Off();
 800115c:	f7ff febe 	bl	8000edc <GreenLED_Off>
		vTaskDelay(xDelay);
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f000 ff65 	bl	8002030 <vTaskDelay>
		GreenLED_On();
 8001166:	e7f4      	b.n	8001152 <vTaskBlinkGreen+0xe>

08001168 <vTaskBlinkOrange>:
	}
}

void vTaskBlinkOrange(void* pvParameters)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	const TickType_t xDelay = 1000 / portTICK_PERIOD_MS;
 8001170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001174:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		OrangeLED_On();
 8001176:	f7ff fec1 	bl	8000efc <OrangeLED_On>
		vTaskDelay(xDelay);
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f000 ff58 	bl	8002030 <vTaskDelay>
		OrangeLED_Off();
 8001180:	f7ff fecc 	bl	8000f1c <OrangeLED_Off>
		vTaskDelay(xDelay);
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f000 ff53 	bl	8002030 <vTaskDelay>
		OrangeLED_On();
 800118a:	e7f4      	b.n	8001176 <vTaskBlinkOrange+0xe>

0800118c <vTaskBlinkBlue>:
	}
}

void vTaskBlinkBlue(void* pvParameters)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	const TickType_t xDelay = 500 / portTICK_PERIOD_MS;
 8001194:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001198:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		BlueLED_On();
 800119a:	f7ff fecf 	bl	8000f3c <BlueLED_On>
		vTaskDelay(xDelay);
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f000 ff46 	bl	8002030 <vTaskDelay>
		BlueLED_Off();
 80011a4:	f7ff feda 	bl	8000f5c <BlueLED_Off>
		vTaskDelay(xDelay);
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f000 ff41 	bl	8002030 <vTaskDelay>
		BlueLED_On();
 80011ae:	e7f4      	b.n	800119a <vTaskBlinkBlue+0xe>

080011b0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3b04      	subs	r3, #4
 80011c0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3b04      	subs	r3, #4
 80011ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	f023 0201 	bic.w	r2, r3, #1
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3b04      	subs	r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80011e0:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <pxPortInitialiseStack+0x64>)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	3b14      	subs	r3, #20
 80011ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3b04      	subs	r3, #4
 80011f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f06f 0202 	mvn.w	r2, #2
 80011fe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	3b20      	subs	r3, #32
 8001204:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	08001219 	.word	0x08001219

08001218 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <prvTaskExitError+0x54>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122a:	d00a      	beq.n	8001242 <prvTaskExitError+0x2a>
        __asm volatile
 800122c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001230:	f383 8811 	msr	BASEPRI, r3
 8001234:	f3bf 8f6f 	isb	sy
 8001238:	f3bf 8f4f 	dsb	sy
 800123c:	60fb      	str	r3, [r7, #12]
    }
 800123e:	bf00      	nop
 8001240:	e7fe      	b.n	8001240 <prvTaskExitError+0x28>
        __asm volatile
 8001242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001246:	f383 8811 	msr	BASEPRI, r3
 800124a:	f3bf 8f6f 	isb	sy
 800124e:	f3bf 8f4f 	dsb	sy
 8001252:	60bb      	str	r3, [r7, #8]
    }
 8001254:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001256:	bf00      	nop
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0fc      	beq.n	8001258 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	20000008 	.word	0x20000008

08001270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <pxCurrentTCBConst2>)
 8001272:	6819      	ldr	r1, [r3, #0]
 8001274:	6808      	ldr	r0, [r1, #0]
 8001276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800127a:	f380 8809 	msr	PSP, r0
 800127e:	f3bf 8f6f 	isb	sy
 8001282:	f04f 0000 	mov.w	r0, #0
 8001286:	f380 8811 	msr	BASEPRI, r0
 800128a:	4770      	bx	lr
 800128c:	f3af 8000 	nop.w

08001290 <pxCurrentTCBConst2>:
 8001290:	20012e1c 	.word	0x20012e1c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop

08001298 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <prvPortStartFirstTask+0x24>)
 800129a:	6800      	ldr	r0, [r0, #0]
 800129c:	6800      	ldr	r0, [r0, #0]
 800129e:	f380 8808 	msr	MSP, r0
 80012a2:	f04f 0000 	mov.w	r0, #0
 80012a6:	f380 8814 	msr	CONTROL, r0
 80012aa:	b662      	cpsie	i
 80012ac:	b661      	cpsie	f
 80012ae:	f3bf 8f4f 	dsb	sy
 80012b2:	f3bf 8f6f 	isb	sy
 80012b6:	df00      	svc	0
 80012b8:	bf00      	nop
 80012ba:	0000      	.short	0x0000
 80012bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop

080012c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80012ca:	4b4e      	ldr	r3, [pc, #312]	; (8001404 <xPortStartScheduler+0x140>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a4e      	ldr	r2, [pc, #312]	; (8001408 <xPortStartScheduler+0x144>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d10a      	bne.n	80012ea <xPortStartScheduler+0x26>
        __asm volatile
 80012d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012d8:	f383 8811 	msr	BASEPRI, r3
 80012dc:	f3bf 8f6f 	isb	sy
 80012e0:	f3bf 8f4f 	dsb	sy
 80012e4:	61bb      	str	r3, [r7, #24]
    }
 80012e6:	bf00      	nop
 80012e8:	e7fe      	b.n	80012e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80012ea:	4b46      	ldr	r3, [pc, #280]	; (8001404 <xPortStartScheduler+0x140>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a47      	ldr	r2, [pc, #284]	; (800140c <xPortStartScheduler+0x148>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d10a      	bne.n	800130a <xPortStartScheduler+0x46>
        __asm volatile
 80012f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012f8:	f383 8811 	msr	BASEPRI, r3
 80012fc:	f3bf 8f6f 	isb	sy
 8001300:	f3bf 8f4f 	dsb	sy
 8001304:	617b      	str	r3, [r7, #20]
    }
 8001306:	bf00      	nop
 8001308:	e7fe      	b.n	8001308 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800130a:	4b41      	ldr	r3, [pc, #260]	; (8001410 <xPortStartScheduler+0x14c>)
 800130c:	61fb      	str	r3, [r7, #28]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	60bb      	str	r3, [r7, #8]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	22ff      	movs	r2, #255	; 0xff
 800131a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b39      	ldr	r3, [pc, #228]	; (8001414 <xPortStartScheduler+0x150>)
 8001330:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001332:	4b39      	ldr	r3, [pc, #228]	; (8001418 <xPortStartScheduler+0x154>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001338:	e009      	b.n	800134e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <xPortStartScheduler+0x154>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3b01      	subs	r3, #1
 8001340:	4a35      	ldr	r2, [pc, #212]	; (8001418 <xPortStartScheduler+0x154>)
 8001342:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001356:	2b80      	cmp	r3, #128	; 0x80
 8001358:	d0ef      	beq.n	800133a <xPortStartScheduler+0x76>
        #ifdef __NVIC_PRIO_BITS
        {
            /* Check the CMSIS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800135a:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <xPortStartScheduler+0x154>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f1c3 0307 	rsb	r3, r3, #7
 8001362:	2b04      	cmp	r3, #4
 8001364:	d00a      	beq.n	800137c <xPortStartScheduler+0xb8>
        __asm volatile
 8001366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800136a:	f383 8811 	msr	BASEPRI, r3
 800136e:	f3bf 8f6f 	isb	sy
 8001372:	f3bf 8f4f 	dsb	sy
 8001376:	613b      	str	r3, [r7, #16]
    }
 8001378:	bf00      	nop
 800137a:	e7fe      	b.n	800137a <xPortStartScheduler+0xb6>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <xPortStartScheduler+0x154>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f1c3 0307 	rsb	r3, r3, #7
 8001384:	2b04      	cmp	r3, #4
 8001386:	d00a      	beq.n	800139e <xPortStartScheduler+0xda>
        __asm volatile
 8001388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800138c:	f383 8811 	msr	BASEPRI, r3
 8001390:	f3bf 8f6f 	isb	sy
 8001394:	f3bf 8f4f 	dsb	sy
 8001398:	60fb      	str	r3, [r7, #12]
    }
 800139a:	bf00      	nop
 800139c:	e7fe      	b.n	800139c <xPortStartScheduler+0xd8>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <xPortStartScheduler+0x154>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <xPortStartScheduler+0x154>)
 80013a6:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <xPortStartScheduler+0x154>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80013b0:	4a19      	ldr	r2, [pc, #100]	; (8001418 <xPortStartScheduler+0x154>)
 80013b2:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <xPortStartScheduler+0x158>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a16      	ldr	r2, [pc, #88]	; (800141c <xPortStartScheduler+0x158>)
 80013c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <xPortStartScheduler+0x158>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a13      	ldr	r2, [pc, #76]	; (800141c <xPortStartScheduler+0x158>)
 80013ce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80013d2:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80013d4:	f000 f8da 	bl	800158c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <xPortStartScheduler+0x15c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80013de:	f000 f8f9 	bl	80015d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <xPortStartScheduler+0x160>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <xPortStartScheduler+0x160>)
 80013e8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80013ec:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80013ee:	f7ff ff53 	bl	8001298 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80013f2:	f001 f8db 	bl	80025ac <vTaskSwitchContext>
    prvTaskExitError();
 80013f6:	f7ff ff0f 	bl	8001218 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	e000ed00 	.word	0xe000ed00
 8001408:	410fc271 	.word	0x410fc271
 800140c:	410fc270 	.word	0x410fc270
 8001410:	e000e400 	.word	0xe000e400
 8001414:	20012e10 	.word	0x20012e10
 8001418:	20012e14 	.word	0x20012e14
 800141c:	e000ed20 	.word	0xe000ed20
 8001420:	20000008 	.word	0x20000008
 8001424:	e000ef34 	.word	0xe000ef34

08001428 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
        __asm volatile
 800142e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001432:	f383 8811 	msr	BASEPRI, r3
 8001436:	f3bf 8f6f 	isb	sy
 800143a:	f3bf 8f4f 	dsb	sy
 800143e:	607b      	str	r3, [r7, #4]
    }
 8001440:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <vPortEnterCritical+0x58>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <vPortEnterCritical+0x58>)
 800144a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <vPortEnterCritical+0x58>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d10f      	bne.n	8001474 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <vPortEnterCritical+0x5c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00a      	beq.n	8001474 <vPortEnterCritical+0x4c>
        __asm volatile
 800145e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001462:	f383 8811 	msr	BASEPRI, r3
 8001466:	f3bf 8f6f 	isb	sy
 800146a:	f3bf 8f4f 	dsb	sy
 800146e:	603b      	str	r3, [r7, #0]
    }
 8001470:	bf00      	nop
 8001472:	e7fe      	b.n	8001472 <vPortEnterCritical+0x4a>
    }
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	20000008 	.word	0x20000008
 8001484:	e000ed04 	.word	0xe000ed04

08001488 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <vPortExitCritical+0x50>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10a      	bne.n	80014ac <vPortExitCritical+0x24>
        __asm volatile
 8001496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800149a:	f383 8811 	msr	BASEPRI, r3
 800149e:	f3bf 8f6f 	isb	sy
 80014a2:	f3bf 8f4f 	dsb	sy
 80014a6:	607b      	str	r3, [r7, #4]
    }
 80014a8:	bf00      	nop
 80014aa:	e7fe      	b.n	80014aa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <vPortExitCritical+0x50>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <vPortExitCritical+0x50>)
 80014b4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <vPortExitCritical+0x50>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d105      	bne.n	80014ca <vPortExitCritical+0x42>
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80014c8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000008 	.word	0x20000008
 80014dc:	00000000 	.word	0x00000000

080014e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80014e0:	f3ef 8009 	mrs	r0, PSP
 80014e4:	f3bf 8f6f 	isb	sy
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <pxCurrentTCBConst>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	f01e 0f10 	tst.w	lr, #16
 80014f0:	bf08      	it	eq
 80014f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80014f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014fa:	6010      	str	r0, [r2, #0]
 80014fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001500:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001504:	f380 8811 	msr	BASEPRI, r0
 8001508:	f3bf 8f4f 	dsb	sy
 800150c:	f3bf 8f6f 	isb	sy
 8001510:	f001 f84c 	bl	80025ac <vTaskSwitchContext>
 8001514:	f04f 0000 	mov.w	r0, #0
 8001518:	f380 8811 	msr	BASEPRI, r0
 800151c:	bc09      	pop	{r0, r3}
 800151e:	6819      	ldr	r1, [r3, #0]
 8001520:	6808      	ldr	r0, [r1, #0]
 8001522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001526:	f01e 0f10 	tst.w	lr, #16
 800152a:	bf08      	it	eq
 800152c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001530:	f380 8809 	msr	PSP, r0
 8001534:	f3bf 8f6f 	isb	sy
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	f3af 8000 	nop.w

08001540 <pxCurrentTCBConst>:
 8001540:	20012e1c 	.word	0x20012e1c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop

08001548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
        __asm volatile
 800154e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001552:	f383 8811 	msr	BASEPRI, r3
 8001556:	f3bf 8f6f 	isb	sy
 800155a:	f3bf 8f4f 	dsb	sy
 800155e:	607b      	str	r3, [r7, #4]
    }
 8001560:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001562:	f000 ff05 	bl	8002370 <xTaskIncrementTick>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <SysTick_Handler+0x40>)
 800156e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	2300      	movs	r3, #0
 8001576:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f383 8811 	msr	BASEPRI, r3
    }
 800157e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	e000ed04 	.word	0xe000ed04

0800158c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <vPortSetupTimerInterrupt+0x34>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <vPortSetupTimerInterrupt+0x38>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <vPortSetupTimerInterrupt+0x3c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <vPortSetupTimerInterrupt+0x40>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	099b      	lsrs	r3, r3, #6
 80015a8:	4a09      	ldr	r2, [pc, #36]	; (80015d0 <vPortSetupTimerInterrupt+0x44>)
 80015aa:	3b01      	subs	r3, #1
 80015ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <vPortSetupTimerInterrupt+0x34>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010
 80015c4:	e000e018 	.word	0xe000e018
 80015c8:	20000004 	.word	0x20000004
 80015cc:	10624dd3 	.word	0x10624dd3
 80015d0:	e000e014 	.word	0xe000e014

080015d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80015d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80015e4 <vPortEnableVFP+0x10>
 80015d8:	6801      	ldr	r1, [r0, #0]
 80015da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80015de:	6001      	str	r1, [r0, #0]
 80015e0:	4770      	bx	lr
 80015e2:	0000      	.short	0x0000
 80015e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop

080015ec <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80015f6:	2301      	movs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10a      	bne.n	800161a <xQueueGenericReset+0x2e>
        __asm volatile
 8001604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001608:	f383 8811 	msr	BASEPRI, r3
 800160c:	f3bf 8f6f 	isb	sy
 8001610:	f3bf 8f4f 	dsb	sy
 8001614:	60fb      	str	r3, [r7, #12]
    }
 8001616:	bf00      	nop
 8001618:	e7fe      	b.n	8001618 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d05d      	beq.n	80016dc <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001624:	2b00      	cmp	r3, #0
 8001626:	d059      	beq.n	80016dc <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001630:	2100      	movs	r1, #0
 8001632:	fba3 2302 	umull	r2, r3, r3, r2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d000      	beq.n	800163c <xQueueGenericReset+0x50>
 800163a:	2101      	movs	r1, #1
 800163c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800163e:	2b00      	cmp	r3, #0
 8001640:	d14c      	bne.n	80016dc <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001642:	f7ff fef1 	bl	8001428 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164e:	6939      	ldr	r1, [r7, #16]
 8001650:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001652:	fb01 f303 	mul.w	r3, r1, r3
 8001656:	441a      	add	r2, r3
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2200      	movs	r2, #0
 8001660:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001672:	3b01      	subs	r3, #1
 8001674:	6939      	ldr	r1, [r7, #16]
 8001676:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	441a      	add	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	22ff      	movs	r2, #255	; 0xff
 8001686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	22ff      	movs	r2, #255	; 0xff
 800168e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d114      	bne.n	80016c2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d01a      	beq.n	80016d6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	3310      	adds	r3, #16
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 f847 	bl	8002738 <xTaskRemoveFromEventList>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d012      	beq.n	80016d6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <xQueueGenericReset+0x11c>)
 80016b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	f3bf 8f4f 	dsb	sy
 80016bc:	f3bf 8f6f 	isb	sy
 80016c0:	e009      	b.n	80016d6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	3310      	adds	r3, #16
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fc58 	bl	8000f7c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	3324      	adds	r3, #36	; 0x24
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fc53 	bl	8000f7c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80016d6:	f7ff fed7 	bl	8001488 <vPortExitCritical>
 80016da:	e001      	b.n	80016e0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10a      	bne.n	80016fc <xQueueGenericReset+0x110>
        __asm volatile
 80016e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ea:	f383 8811 	msr	BASEPRI, r3
 80016ee:	f3bf 8f6f 	isb	sy
 80016f2:	f3bf 8f4f 	dsb	sy
 80016f6:	60bb      	str	r3, [r7, #8]
    }
 80016f8:	bf00      	nop
 80016fa:	e7fe      	b.n	80016fa <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80016fc:	697b      	ldr	r3, [r7, #20]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000ed04 	.word	0xe000ed04

0800170c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af02      	add	r7, sp, #8
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	4613      	mov	r3, r2
 8001718:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d02e      	beq.n	8001782 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001724:	2100      	movs	r1, #0
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	fba3 2302 	umull	r2, r3, r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d000      	beq.n	8001734 <xQueueGenericCreate+0x28>
 8001732:	2101      	movs	r1, #1
 8001734:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001736:	2b00      	cmp	r3, #0
 8001738:	d123      	bne.n	8001782 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001742:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001746:	d81c      	bhi.n	8001782 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	fb02 f303 	mul.w	r3, r2, r3
 8001750:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	3350      	adds	r3, #80	; 0x50
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fa36 	bl	8000bc8 <pvPortMalloc>
 800175c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01c      	beq.n	800179e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3350      	adds	r3, #80	; 0x50
 800176c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800176e:	79fa      	ldrb	r2, [r7, #7]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	4613      	mov	r3, r2
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 f814 	bl	80017a8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001780:	e00d      	b.n	800179e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10a      	bne.n	800179e <xQueueGenericCreate+0x92>
        __asm volatile
 8001788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800178c:	f383 8811 	msr	BASEPRI, r3
 8001790:	f3bf 8f6f 	isb	sy
 8001794:	f3bf 8f4f 	dsb	sy
 8001798:	613b      	str	r3, [r7, #16]
    }
 800179a:	bf00      	nop
 800179c:	e7fe      	b.n	800179c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800179e:	69fb      	ldr	r3, [r7, #28]
    }
 80017a0:	4618      	mov	r0, r3
 80017a2:	3720      	adds	r7, #32
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d103      	bne.n	80017c4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e002      	b.n	80017ca <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80017d6:	2101      	movs	r1, #1
 80017d8:	69b8      	ldr	r0, [r7, #24]
 80017da:	f7ff ff07 	bl	80015ec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10a      	bne.n	8001820 <xQueueReceive+0x30>
        __asm volatile
 800180a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180e:	f383 8811 	msr	BASEPRI, r3
 8001812:	f3bf 8f6f 	isb	sy
 8001816:	f3bf 8f4f 	dsb	sy
 800181a:	623b      	str	r3, [r7, #32]
    }
 800181c:	bf00      	nop
 800181e:	e7fe      	b.n	800181e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d103      	bne.n	800182e <xQueueReceive+0x3e>
 8001826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <xQueueReceive+0x42>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <xQueueReceive+0x44>
 8001832:	2300      	movs	r3, #0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10a      	bne.n	800184e <xQueueReceive+0x5e>
        __asm volatile
 8001838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800183c:	f383 8811 	msr	BASEPRI, r3
 8001840:	f3bf 8f6f 	isb	sy
 8001844:	f3bf 8f4f 	dsb	sy
 8001848:	61fb      	str	r3, [r7, #28]
    }
 800184a:	bf00      	nop
 800184c:	e7fe      	b.n	800184c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800184e:	f001 f985 	bl	8002b5c <xTaskGetSchedulerState>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <xQueueReceive+0x6e>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <xQueueReceive+0x72>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <xQueueReceive+0x74>
 8001862:	2300      	movs	r3, #0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10a      	bne.n	800187e <xQueueReceive+0x8e>
        __asm volatile
 8001868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800186c:	f383 8811 	msr	BASEPRI, r3
 8001870:	f3bf 8f6f 	isb	sy
 8001874:	f3bf 8f4f 	dsb	sy
 8001878:	61bb      	str	r3, [r7, #24]
    }
 800187a:	bf00      	nop
 800187c:	e7fe      	b.n	800187c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800187e:	f7ff fdd3 	bl	8001428 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001886:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	2b00      	cmp	r3, #0
 800188c:	d01f      	beq.n	80018ce <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800188e:	68b9      	ldr	r1, [r7, #8]
 8001890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001892:	f000 f88d 	bl	80019b0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	1e5a      	subs	r2, r3, #1
 800189a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800189e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00f      	beq.n	80018c6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a8:	3310      	adds	r3, #16
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 ff44 	bl	8002738 <xTaskRemoveFromEventList>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80018b6:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <xQueueReceive+0x1bc>)
 80018b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	f3bf 8f4f 	dsb	sy
 80018c2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80018c6:	f7ff fddf 	bl	8001488 <vPortExitCritical>
                return pdPASS;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e069      	b.n	80019a2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d103      	bne.n	80018dc <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80018d4:	f7ff fdd8 	bl	8001488 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80018d8:	2300      	movs	r3, #0
 80018da:	e062      	b.n	80019a2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80018dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fffc 	bl	80028e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80018ec:	2301      	movs	r3, #1
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80018f0:	f7ff fdca 	bl	8001488 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80018f4:	f000 fc22 	bl	800213c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80018f8:	f7ff fd96 	bl	8001428 <vPortEnterCritical>
 80018fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001902:	b25b      	sxtb	r3, r3
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d103      	bne.n	8001912 <xQueueReceive+0x122>
 800190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001918:	b25b      	sxtb	r3, r3
 800191a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191e:	d103      	bne.n	8001928 <xQueueReceive+0x138>
 8001920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001928:	f7ff fdae 	bl	8001488 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800192c:	1d3a      	adds	r2, r7, #4
 800192e:	f107 0310 	add.w	r3, r7, #16
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f000 ffeb 	bl	8002910 <xTaskCheckForTimeOut>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d123      	bne.n	8001988 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001942:	f000 f8ad 	bl	8001aa0 <prvIsQueueEmpty>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d017      	beq.n	800197c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800194c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194e:	3324      	adds	r3, #36	; 0x24
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fe85 	bl	8002664 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800195a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800195c:	f000 f84e 	bl	80019fc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001960:	f000 fbfa 	bl	8002158 <xTaskResumeAll>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d189      	bne.n	800187e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <xQueueReceive+0x1bc>)
 800196c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	f3bf 8f4f 	dsb	sy
 8001976:	f3bf 8f6f 	isb	sy
 800197a:	e780      	b.n	800187e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800197c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800197e:	f000 f83d 	bl	80019fc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001982:	f000 fbe9 	bl	8002158 <xTaskResumeAll>
 8001986:	e77a      	b.n	800187e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800198a:	f000 f837 	bl	80019fc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800198e:	f000 fbe3 	bl	8002158 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001994:	f000 f884 	bl	8001aa0 <prvIsQueueEmpty>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	f43f af6f 	beq.w	800187e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80019a0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3730      	adds	r7, #48	; 0x30
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	e000ed04 	.word	0xe000ed04

080019b0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d018      	beq.n	80019f4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	441a      	add	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d303      	bcc.n	80019e4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68d9      	ldr	r1, [r3, #12]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	461a      	mov	r2, r3
 80019ee:	6838      	ldr	r0, [r7, #0]
 80019f0:	f001 fc2a 	bl	8003248 <memcpy>
    }
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001a04:	f7ff fd10 	bl	8001428 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a0e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a10:	e011      	b.n	8001a36 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d012      	beq.n	8001a40 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3324      	adds	r3, #36	; 0x24
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 fe8a 	bl	8002738 <xTaskRemoveFromEventList>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001a2a:	f000 ffd7 	bl	80029dc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	dce9      	bgt.n	8001a12 <prvUnlockQueue+0x16>
 8001a3e:	e000      	b.n	8001a42 <prvUnlockQueue+0x46>
                    break;
 8001a40:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	22ff      	movs	r2, #255	; 0xff
 8001a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001a4a:	f7ff fd1d 	bl	8001488 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001a4e:	f7ff fceb 	bl	8001428 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a58:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a5a:	e011      	b.n	8001a80 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d012      	beq.n	8001a8a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3310      	adds	r3, #16
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fe65 	bl	8002738 <xTaskRemoveFromEventList>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001a74:	f000 ffb2 	bl	80029dc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001a78:	7bbb      	ldrb	r3, [r7, #14]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	dce9      	bgt.n	8001a5c <prvUnlockQueue+0x60>
 8001a88:	e000      	b.n	8001a8c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001a8a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	22ff      	movs	r2, #255	; 0xff
 8001a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001a94:	f7ff fcf8 	bl	8001488 <vPortExitCritical>
}
 8001a98:	bf00      	nop
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001aa8:	f7ff fcbe 	bl	8001428 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	e001      	b.n	8001abe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001abe:	f7ff fce3 	bl	8001488 <vPortExitCritical>

    return xReturn;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8001ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae4:	f383 8811 	msr	BASEPRI, r3
 8001ae8:	f3bf 8f6f 	isb	sy
 8001aec:	f3bf 8f4f 	dsb	sy
 8001af0:	60fb      	str	r3, [r7, #12]
    }
 8001af2:	bf00      	nop
 8001af4:	e7fe      	b.n	8001af4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d024      	beq.n	8001b46 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e01e      	b.n	8001b40 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001b02:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <vQueueAddToRegistry+0x98>)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d105      	bne.n	8001b1e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <vQueueAddToRegistry+0x98>)
 8001b18:	4413      	add	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
                    break;
 8001b1c:	e013      	b.n	8001b46 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10a      	bne.n	8001b3a <vQueueAddToRegistry+0x6e>
 8001b24:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <vQueueAddToRegistry+0x98>)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d104      	bne.n	8001b3a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <vQueueAddToRegistry+0x98>)
 8001b36:	4413      	add	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d9dd      	bls.n	8001b02 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001b58:	bf00      	nop
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	20012f64 	.word	0x20012f64

08001b68 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001b78:	f7ff fc56 	bl	8001428 <vPortEnterCritical>
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b82:	b25b      	sxtb	r3, r3
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d103      	bne.n	8001b92 <vQueueWaitForMessageRestricted+0x2a>
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b98:	b25b      	sxtb	r3, r3
 8001b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9e:	d103      	bne.n	8001ba8 <vQueueWaitForMessageRestricted+0x40>
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ba8:	f7ff fc6e 	bl	8001488 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d106      	bne.n	8001bc2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	3324      	adds	r3, #36	; 0x24
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	68b9      	ldr	r1, [r7, #8]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 fd75 	bl	80026ac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f7ff ff1a 	bl	80019fc <prvUnlockQueue>
    }
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
	return 1;
 8001bd4:	2301      	movs	r3, #1
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_kill>:

int _kill(int pid, int sig)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bea:	f001 fb03 	bl	80031f4 <__errno>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2216      	movs	r2, #22
 8001bf2:	601a      	str	r2, [r3, #0]
	return -1;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_exit>:

void _exit (int status)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ffe7 	bl	8001be0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c12:	e7fe      	b.n	8001c12 <_exit+0x12>

08001c14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e00a      	b.n	8001c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c26:	f3af 8000 	nop.w
 8001c2a:	4601      	mov	r1, r0
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	60ba      	str	r2, [r7, #8]
 8001c32:	b2ca      	uxtb	r2, r1
 8001c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbf0      	blt.n	8001c26 <_read+0x12>
	}

return len;
 8001c44:	687b      	ldr	r3, [r7, #4]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e009      	b.n	8001c74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3301      	adds	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	dbf1      	blt.n	8001c60 <_write+0x12>
	}
	return len;
 8001c7c:	687b      	ldr	r3, [r7, #4]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <_close>:

int _close(int file)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cae:	605a      	str	r2, [r3, #4]
	return 0;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <_isatty>:

int _isatty(int file)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
	return 0;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf8:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <_sbrk+0x5c>)
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <_sbrk+0x60>)
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <_sbrk+0x64>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <_sbrk+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d207      	bcs.n	8001d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d20:	f001 fa68 	bl	80031f4 <__errno>
 8001d24:	4603      	mov	r3, r0
 8001d26:	220c      	movs	r2, #12
 8001d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	e009      	b.n	8001d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <_sbrk+0x64>)
 8001d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20020000 	.word	0x20020000
 8001d50:	00000400 	.word	0x00000400
 8001d54:	20012e18 	.word	0x20012e18
 8001d58:	20012fb8 	.word	0x20012fb8

08001d5c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08c      	sub	sp, #48	; 0x30
 8001d60:	af04      	add	r7, sp, #16
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe ff29 	bl	8000bc8 <pvPortMalloc>
 8001d76:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d013      	beq.n	8001da6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001d7e:	2058      	movs	r0, #88	; 0x58
 8001d80:	f7fe ff22 	bl	8000bc8 <pvPortMalloc>
 8001d84:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001d8c:	2258      	movs	r2, #88	; 0x58
 8001d8e:	2100      	movs	r1, #0
 8001d90:	69f8      	ldr	r0, [r7, #28]
 8001d92:	f001 fa67 	bl	8003264 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d9c:	e005      	b.n	8001daa <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001d9e:	6978      	ldr	r0, [r7, #20]
 8001da0:	f7fe ffb6 	bl	8000d10 <vPortFree>
 8001da4:	e001      	b.n	8001daa <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001db0:	88fa      	ldrh	r2, [r7, #6]
 8001db2:	2300      	movs	r3, #0
 8001db4:	9303      	str	r3, [sp, #12]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	9302      	str	r3, [sp, #8]
 8001dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f80e 	bl	8001de8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001dcc:	69f8      	ldr	r0, [r7, #28]
 8001dce:	f000 f899 	bl	8001f04 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	e002      	b.n	8001dde <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ddc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001dde:	69bb      	ldr	r3, [r7, #24]
    }
 8001de0:	4618      	mov	r0, r3
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	461a      	mov	r2, r3
 8001e00:	21a5      	movs	r1, #165	; 0xa5
 8001e02:	f001 fa2f 	bl	8003264 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e10:	3b01      	subs	r3, #1
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f023 0307 	bic.w	r3, r3, #7
 8001e1e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00a      	beq.n	8001e40 <prvInitialiseNewTask+0x58>
        __asm volatile
 8001e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e2e:	f383 8811 	msr	BASEPRI, r3
 8001e32:	f3bf 8f6f 	isb	sy
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	617b      	str	r3, [r7, #20]
    }
 8001e3c:	bf00      	nop
 8001e3e:	e7fe      	b.n	8001e3e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d01e      	beq.n	8001e84 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	e012      	b.n	8001e72 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	4413      	add	r3, r2
 8001e52:	7819      	ldrb	r1, [r3, #0]
 8001e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	4413      	add	r3, r2
 8001e5a:	3334      	adds	r3, #52	; 0x34
 8001e5c:	460a      	mov	r2, r1
 8001e5e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	4413      	add	r3, r2
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	2b09      	cmp	r3, #9
 8001e76:	d9e9      	bls.n	8001e4c <prvInitialiseNewTask+0x64>
 8001e78:	e000      	b.n	8001e7c <prvInitialiseNewTask+0x94>
            {
                break;
 8001e7a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d90a      	bls.n	8001ea0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8001e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e8e:	f383 8811 	msr	BASEPRI, r3
 8001e92:	f3bf 8f6f 	isb	sy
 8001e96:	f3bf 8f4f 	dsb	sy
 8001e9a:	613b      	str	r3, [r7, #16]
    }
 8001e9c:	bf00      	nop
 8001e9e:	e7fe      	b.n	8001e9e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d901      	bls.n	8001eaa <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eb4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb8:	3304      	adds	r3, #4
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f87e 	bl	8000fbc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec2:	3318      	adds	r3, #24
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff f879 	bl	8000fbc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ece:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed2:	f1c3 0205 	rsb	r2, r3, #5
 8001ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	68f9      	ldr	r1, [r7, #12]
 8001ee4:	69b8      	ldr	r0, [r7, #24]
 8001ee6:	f7ff f963 	bl	80011b0 <pxPortInitialiseStack>
 8001eea:	4602      	mov	r2, r0
 8001eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eee:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001efa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001efc:	bf00      	nop
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001f0c:	f7ff fa8c 	bl	8001428 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001f10:	4b40      	ldr	r3, [pc, #256]	; (8002014 <prvAddNewTaskToReadyList+0x110>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	4a3f      	ldr	r2, [pc, #252]	; (8002014 <prvAddNewTaskToReadyList+0x110>)
 8001f18:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001f1a:	4b3f      	ldr	r3, [pc, #252]	; (8002018 <prvAddNewTaskToReadyList+0x114>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001f22:	4a3d      	ldr	r2, [pc, #244]	; (8002018 <prvAddNewTaskToReadyList+0x114>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001f28:	4b3a      	ldr	r3, [pc, #232]	; (8002014 <prvAddNewTaskToReadyList+0x110>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d110      	bne.n	8001f52 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001f30:	f000 fd7a 	bl	8002a28 <prvInitialiseTaskLists>
 8001f34:	e00d      	b.n	8001f52 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001f36:	4b39      	ldr	r3, [pc, #228]	; (800201c <prvAddNewTaskToReadyList+0x118>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f3e:	4b36      	ldr	r3, [pc, #216]	; (8002018 <prvAddNewTaskToReadyList+0x114>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d802      	bhi.n	8001f52 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001f4c:	4a32      	ldr	r2, [pc, #200]	; (8002018 <prvAddNewTaskToReadyList+0x114>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001f52:	4b33      	ldr	r3, [pc, #204]	; (8002020 <prvAddNewTaskToReadyList+0x11c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	4a31      	ldr	r2, [pc, #196]	; (8002020 <prvAddNewTaskToReadyList+0x11c>)
 8001f5a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001f5c:	4b30      	ldr	r3, [pc, #192]	; (8002020 <prvAddNewTaskToReadyList+0x11c>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	2201      	movs	r2, #1
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <prvAddNewTaskToReadyList+0x120>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	4a2c      	ldr	r2, [pc, #176]	; (8002024 <prvAddNewTaskToReadyList+0x120>)
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f7a:	492b      	ldr	r1, [pc, #172]	; (8002028 <prvAddNewTaskToReadyList+0x124>)
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	3304      	adds	r3, #4
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	3204      	adds	r2, #4
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	1d1a      	adds	r2, r3, #4
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <prvAddNewTaskToReadyList+0x124>)
 8001fba:	441a      	add	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	615a      	str	r2, [r3, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc4:	4918      	ldr	r1, [pc, #96]	; (8002028 <prvAddNewTaskToReadyList+0x124>)
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	1c59      	adds	r1, r3, #1
 8001fd4:	4814      	ldr	r0, [pc, #80]	; (8002028 <prvAddNewTaskToReadyList+0x124>)
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4403      	add	r3, r0
 8001fe0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001fe2:	f7ff fa51 	bl	8001488 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <prvAddNewTaskToReadyList+0x118>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00e      	beq.n	800200c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <prvAddNewTaskToReadyList+0x114>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d207      	bcs.n	800200c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <prvAddNewTaskToReadyList+0x128>)
 8001ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	f3bf 8f4f 	dsb	sy
 8002008:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20012ef4 	.word	0x20012ef4
 8002018:	20012e1c 	.word	0x20012e1c
 800201c:	20012f00 	.word	0x20012f00
 8002020:	20012f10 	.word	0x20012f10
 8002024:	20012efc 	.word	0x20012efc
 8002028:	20012e20 	.word	0x20012e20
 800202c:	e000ed04 	.word	0xe000ed04

08002030 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d017      	beq.n	8002072 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <vTaskDelay+0x60>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <vTaskDelay+0x30>
        __asm volatile
 800204a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204e:	f383 8811 	msr	BASEPRI, r3
 8002052:	f3bf 8f6f 	isb	sy
 8002056:	f3bf 8f4f 	dsb	sy
 800205a:	60bb      	str	r3, [r7, #8]
    }
 800205c:	bf00      	nop
 800205e:	e7fe      	b.n	800205e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002060:	f000 f86c 	bl	800213c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002064:	2100      	movs	r1, #0
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fd96 	bl	8002b98 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800206c:	f000 f874 	bl	8002158 <xTaskResumeAll>
 8002070:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d107      	bne.n	8002088 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <vTaskDelay+0x64>)
 800207a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	f3bf 8f4f 	dsb	sy
 8002084:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20012f1c 	.word	0x20012f1c
 8002094:	e000ed04 	.word	0xe000ed04

08002098 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <vTaskStartScheduler+0x88>)
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	2300      	movs	r3, #0
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2300      	movs	r3, #0
 80020a8:	2282      	movs	r2, #130	; 0x82
 80020aa:	491e      	ldr	r1, [pc, #120]	; (8002124 <vTaskStartScheduler+0x8c>)
 80020ac:	481e      	ldr	r0, [pc, #120]	; (8002128 <vTaskStartScheduler+0x90>)
 80020ae:	f7ff fe55 	bl	8001d5c <xTaskCreate>
 80020b2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d102      	bne.n	80020c0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80020ba:	f000 fded 	bl	8002c98 <xTimerCreateTimerTask>
 80020be:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d116      	bne.n	80020f4 <vTaskStartScheduler+0x5c>
        __asm volatile
 80020c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ca:	f383 8811 	msr	BASEPRI, r3
 80020ce:	f3bf 8f6f 	isb	sy
 80020d2:	f3bf 8f4f 	dsb	sy
 80020d6:	60bb      	str	r3, [r7, #8]
    }
 80020d8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <vTaskStartScheduler+0x94>)
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295
 80020e0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <vTaskStartScheduler+0x98>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <vTaskStartScheduler+0x9c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80020ee:	f7ff f8e9 	bl	80012c4 <xPortStartScheduler>
 80020f2:	e00e      	b.n	8002112 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fa:	d10a      	bne.n	8002112 <vTaskStartScheduler+0x7a>
        __asm volatile
 80020fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002100:	f383 8811 	msr	BASEPRI, r3
 8002104:	f3bf 8f6f 	isb	sy
 8002108:	f3bf 8f4f 	dsb	sy
 800210c:	607b      	str	r3, [r7, #4]
    }
 800210e:	bf00      	nop
 8002110:	e7fe      	b.n	8002110 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <vTaskStartScheduler+0xa0>)
 8002114:	681b      	ldr	r3, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20012f18 	.word	0x20012f18
 8002124:	08005c28 	.word	0x08005c28
 8002128:	080029f5 	.word	0x080029f5
 800212c:	20012f14 	.word	0x20012f14
 8002130:	20012f00 	.word	0x20012f00
 8002134:	20012ef8 	.word	0x20012ef8
 8002138:	2000000c 	.word	0x2000000c

0800213c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <vTaskSuspendAll+0x18>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	4a03      	ldr	r2, [pc, #12]	; (8002154 <vTaskSuspendAll+0x18>)
 8002148:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	20012f1c 	.word	0x20012f1c

08002158 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002166:	4b71      	ldr	r3, [pc, #452]	; (800232c <xTaskResumeAll+0x1d4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10a      	bne.n	8002184 <xTaskResumeAll+0x2c>
        __asm volatile
 800216e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002172:	f383 8811 	msr	BASEPRI, r3
 8002176:	f3bf 8f6f 	isb	sy
 800217a:	f3bf 8f4f 	dsb	sy
 800217e:	607b      	str	r3, [r7, #4]
    }
 8002180:	bf00      	nop
 8002182:	e7fe      	b.n	8002182 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002184:	f7ff f950 	bl	8001428 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002188:	4b68      	ldr	r3, [pc, #416]	; (800232c <xTaskResumeAll+0x1d4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3b01      	subs	r3, #1
 800218e:	4a67      	ldr	r2, [pc, #412]	; (800232c <xTaskResumeAll+0x1d4>)
 8002190:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002192:	4b66      	ldr	r3, [pc, #408]	; (800232c <xTaskResumeAll+0x1d4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 80c0 	bne.w	800231c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800219c:	4b64      	ldr	r3, [pc, #400]	; (8002330 <xTaskResumeAll+0x1d8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80bb 	beq.w	800231c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80021a6:	e08a      	b.n	80022be <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021a8:	4b62      	ldr	r3, [pc, #392]	; (8002334 <xTaskResumeAll+0x1dc>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	6a12      	ldr	r2, [r2, #32]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	69d2      	ldr	r2, [r2, #28]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3318      	adds	r3, #24
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d103      	bne.n	80021de <xTaskResumeAll+0x86>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	6a1a      	ldr	r2, [r3, #32]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	1e5a      	subs	r2, r3, #1
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	69fa      	ldr	r2, [r7, #28]
 80021fa:	68d2      	ldr	r2, [r2, #12]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	6892      	ldr	r2, [r2, #8]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	3304      	adds	r3, #4
 8002210:	429a      	cmp	r2, r3
 8002212:	d103      	bne.n	800221c <xTaskResumeAll+0xc4>
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2200      	movs	r2, #0
 8002220:	615a      	str	r2, [r3, #20]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	1e5a      	subs	r2, r3, #1
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	2201      	movs	r2, #1
 8002232:	409a      	lsls	r2, r3
 8002234:	4b40      	ldr	r3, [pc, #256]	; (8002338 <xTaskResumeAll+0x1e0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4313      	orrs	r3, r2
 800223a:	4a3f      	ldr	r2, [pc, #252]	; (8002338 <xTaskResumeAll+0x1e0>)
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002242:	493e      	ldr	r1, [pc, #248]	; (800233c <xTaskResumeAll+0x1e4>)
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	3304      	adds	r3, #4
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	3204      	adds	r2, #4
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	1d1a      	adds	r2, r3, #4
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4a2e      	ldr	r2, [pc, #184]	; (800233c <xTaskResumeAll+0x1e4>)
 8002282:	441a      	add	r2, r3
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	615a      	str	r2, [r3, #20]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800228c:	492b      	ldr	r1, [pc, #172]	; (800233c <xTaskResumeAll+0x1e4>)
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	1c59      	adds	r1, r3, #1
 800229c:	4827      	ldr	r0, [pc, #156]	; (800233c <xTaskResumeAll+0x1e4>)
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4403      	add	r3, r0
 80022a8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ae:	4b24      	ldr	r3, [pc, #144]	; (8002340 <xTaskResumeAll+0x1e8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d302      	bcc.n	80022be <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <xTaskResumeAll+0x1ec>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <xTaskResumeAll+0x1dc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f47f af70 	bne.w	80021a8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80022ce:	f000 fc29 	bl	8002b24 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <xTaskResumeAll+0x1f0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d010      	beq.n	8002300 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80022de:	f000 f847 	bl	8002370 <xTaskIncrementTick>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80022e8:	4b16      	ldr	r3, [pc, #88]	; (8002344 <xTaskResumeAll+0x1ec>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f1      	bne.n	80022de <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <xTaskResumeAll+0x1f0>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002300:	4b10      	ldr	r3, [pc, #64]	; (8002344 <xTaskResumeAll+0x1ec>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d009      	beq.n	800231c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002308:	2301      	movs	r3, #1
 800230a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <xTaskResumeAll+0x1f4>)
 800230e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800231c:	f7ff f8b4 	bl	8001488 <vPortExitCritical>

    return xAlreadyYielded;
 8002320:	69bb      	ldr	r3, [r7, #24]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3720      	adds	r7, #32
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20012f1c 	.word	0x20012f1c
 8002330:	20012ef4 	.word	0x20012ef4
 8002334:	20012eb4 	.word	0x20012eb4
 8002338:	20012efc 	.word	0x20012efc
 800233c:	20012e20 	.word	0x20012e20
 8002340:	20012e1c 	.word	0x20012e1c
 8002344:	20012f08 	.word	0x20012f08
 8002348:	20012f04 	.word	0x20012f04
 800234c:	e000ed04 	.word	0xe000ed04

08002350 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <xTaskGetTickCount+0x1c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800235c:	687b      	ldr	r3, [r7, #4]
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20012ef8 	.word	0x20012ef8

08002370 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800237a:	4b81      	ldr	r3, [pc, #516]	; (8002580 <xTaskIncrementTick+0x210>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 80f2 	bne.w	8002568 <xTaskIncrementTick+0x1f8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002384:	4b7f      	ldr	r3, [pc, #508]	; (8002584 <xTaskIncrementTick+0x214>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3301      	adds	r3, #1
 800238a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800238c:	4a7d      	ldr	r2, [pc, #500]	; (8002584 <xTaskIncrementTick+0x214>)
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d120      	bne.n	80023da <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002398:	4b7b      	ldr	r3, [pc, #492]	; (8002588 <xTaskIncrementTick+0x218>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <xTaskIncrementTick+0x48>
        __asm volatile
 80023a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a6:	f383 8811 	msr	BASEPRI, r3
 80023aa:	f3bf 8f6f 	isb	sy
 80023ae:	f3bf 8f4f 	dsb	sy
 80023b2:	607b      	str	r3, [r7, #4]
    }
 80023b4:	bf00      	nop
 80023b6:	e7fe      	b.n	80023b6 <xTaskIncrementTick+0x46>
 80023b8:	4b73      	ldr	r3, [pc, #460]	; (8002588 <xTaskIncrementTick+0x218>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	4b73      	ldr	r3, [pc, #460]	; (800258c <xTaskIncrementTick+0x21c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a71      	ldr	r2, [pc, #452]	; (8002588 <xTaskIncrementTick+0x218>)
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4a71      	ldr	r2, [pc, #452]	; (800258c <xTaskIncrementTick+0x21c>)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b70      	ldr	r3, [pc, #448]	; (8002590 <xTaskIncrementTick+0x220>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	4a6f      	ldr	r2, [pc, #444]	; (8002590 <xTaskIncrementTick+0x220>)
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	f000 fba5 	bl	8002b24 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80023da:	4b6e      	ldr	r3, [pc, #440]	; (8002594 <xTaskIncrementTick+0x224>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6a3a      	ldr	r2, [r7, #32]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f0c0 80a6 	bcc.w	8002532 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023e6:	4b68      	ldr	r3, [pc, #416]	; (8002588 <xTaskIncrementTick+0x218>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d104      	bne.n	80023fa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <xTaskIncrementTick+0x224>)
 80023f2:	f04f 32ff 	mov.w	r2, #4294967295
 80023f6:	601a      	str	r2, [r3, #0]
                    break;
 80023f8:	e09b      	b.n	8002532 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023fa:	4b63      	ldr	r3, [pc, #396]	; (8002588 <xTaskIncrementTick+0x218>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800240a:	6a3a      	ldr	r2, [r7, #32]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	429a      	cmp	r2, r3
 8002410:	d203      	bcs.n	800241a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002412:	4a60      	ldr	r2, [pc, #384]	; (8002594 <xTaskIncrementTick+0x224>)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002418:	e08b      	b.n	8002532 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	68d2      	ldr	r2, [r2, #12]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	6892      	ldr	r2, [r2, #8]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	3304      	adds	r3, #4
 800243c:	429a      	cmp	r2, r3
 800243e:	d103      	bne.n	8002448 <xTaskIncrementTick+0xd8>
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	2200      	movs	r2, #0
 800244c:	615a      	str	r2, [r3, #20]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	1e5a      	subs	r2, r3, #1
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01e      	beq.n	800249e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	6a12      	ldr	r2, [r2, #32]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	69d2      	ldr	r2, [r2, #28]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	3318      	adds	r3, #24
 8002482:	429a      	cmp	r2, r3
 8002484:	d103      	bne.n	800248e <xTaskIncrementTick+0x11e>
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	6a1a      	ldr	r2, [r3, #32]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2200      	movs	r2, #0
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	1e5a      	subs	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	2201      	movs	r2, #1
 80024a4:	409a      	lsls	r2, r3
 80024a6:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <xTaskIncrementTick+0x228>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	4a3a      	ldr	r2, [pc, #232]	; (8002598 <xTaskIncrementTick+0x228>)
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b4:	4939      	ldr	r1, [pc, #228]	; (800259c <xTaskIncrementTick+0x22c>)
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	3304      	adds	r3, #4
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	60da      	str	r2, [r3, #12]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	3204      	adds	r2, #4
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	1d1a      	adds	r2, r3, #4
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4a2a      	ldr	r2, [pc, #168]	; (800259c <xTaskIncrementTick+0x22c>)
 80024f4:	441a      	add	r2, r3
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	615a      	str	r2, [r3, #20]
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fe:	4927      	ldr	r1, [pc, #156]	; (800259c <xTaskIncrementTick+0x22c>)
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	1c59      	adds	r1, r3, #1
 800250e:	4823      	ldr	r0, [pc, #140]	; (800259c <xTaskIncrementTick+0x22c>)
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4403      	add	r3, r0
 800251a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002520:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <xTaskIncrementTick+0x230>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	429a      	cmp	r2, r3
 8002528:	f67f af5d 	bls.w	80023e6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800252c:	2301      	movs	r3, #1
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002530:	e759      	b.n	80023e6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <xTaskIncrementTick+0x230>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002538:	4918      	ldr	r1, [pc, #96]	; (800259c <xTaskIncrementTick+0x22c>)
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d901      	bls.n	800254e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800254a:	2301      	movs	r3, #1
 800254c:	627b      	str	r3, [r7, #36]	; 0x24

        #if ( configUSE_TICK_HOOK == 1 )
        {
            /* Guard against the tick hook being called when the pended tick
             * count is being unwound (when the scheduler is being unlocked). */
            if( xPendedTicks == ( TickType_t ) 0 )
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <xTaskIncrementTick+0x234>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <xTaskIncrementTick+0x1ea>
            {
                vApplicationTickHook();
 8002556:	f7fe fda1 	bl	800109c <vApplicationTickHook>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <xTaskIncrementTick+0x238>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <xTaskIncrementTick+0x206>
            {
                xSwitchRequired = pdTRUE;
 8002562:	2301      	movs	r3, #1
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
 8002566:	e006      	b.n	8002576 <xTaskIncrementTick+0x206>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <xTaskIncrementTick+0x234>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <xTaskIncrementTick+0x234>)
 8002570:	6013      	str	r3, [r2, #0]

        /* The tick hook gets called at regular intervals, even if the
         * scheduler is locked. */
        #if ( configUSE_TICK_HOOK == 1 )
        {
            vApplicationTickHook();
 8002572:	f7fe fd93 	bl	800109c <vApplicationTickHook>
        }
        #endif
    }

    return xSwitchRequired;
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002578:	4618      	mov	r0, r3
 800257a:	3728      	adds	r7, #40	; 0x28
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20012f1c 	.word	0x20012f1c
 8002584:	20012ef8 	.word	0x20012ef8
 8002588:	20012eac 	.word	0x20012eac
 800258c:	20012eb0 	.word	0x20012eb0
 8002590:	20012f0c 	.word	0x20012f0c
 8002594:	20012f14 	.word	0x20012f14
 8002598:	20012efc 	.word	0x20012efc
 800259c:	20012e20 	.word	0x20012e20
 80025a0:	20012e1c 	.word	0x20012e1c
 80025a4:	20012f04 	.word	0x20012f04
 80025a8:	20012f08 	.word	0x20012f08

080025ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80025b2:	4b27      	ldr	r3, [pc, #156]	; (8002650 <vTaskSwitchContext+0xa4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80025ba:	4b26      	ldr	r3, [pc, #152]	; (8002654 <vTaskSwitchContext+0xa8>)
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80025c0:	e03f      	b.n	8002642 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80025c2:	4b24      	ldr	r3, [pc, #144]	; (8002654 <vTaskSwitchContext+0xa8>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025c8:	4b23      	ldr	r3, [pc, #140]	; (8002658 <vTaskSwitchContext+0xac>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	fab3 f383 	clz	r3, r3
 80025d4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80025d6:	7afb      	ldrb	r3, [r7, #11]
 80025d8:	f1c3 031f 	rsb	r3, r3, #31
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	491f      	ldr	r1, [pc, #124]	; (800265c <vTaskSwitchContext+0xb0>)
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10a      	bne.n	8002608 <vTaskSwitchContext+0x5c>
        __asm volatile
 80025f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	607b      	str	r3, [r7, #4]
    }
 8002604:	bf00      	nop
 8002606:	e7fe      	b.n	8002606 <vTaskSwitchContext+0x5a>
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4a12      	ldr	r2, [pc, #72]	; (800265c <vTaskSwitchContext+0xb0>)
 8002614:	4413      	add	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	3308      	adds	r3, #8
 800262a:	429a      	cmp	r2, r3
 800262c:	d104      	bne.n	8002638 <vTaskSwitchContext+0x8c>
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	4a08      	ldr	r2, [pc, #32]	; (8002660 <vTaskSwitchContext+0xb4>)
 8002640:	6013      	str	r3, [r2, #0]
}
 8002642:	bf00      	nop
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20012f1c 	.word	0x20012f1c
 8002654:	20012f08 	.word	0x20012f08
 8002658:	20012efc 	.word	0x20012efc
 800265c:	20012e20 	.word	0x20012e20
 8002660:	20012e1c 	.word	0x20012e1c

08002664 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	60fb      	str	r3, [r7, #12]
    }
 8002686:	bf00      	nop
 8002688:	e7fe      	b.n	8002688 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <vTaskPlaceOnEventList+0x44>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3318      	adds	r3, #24
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe fc9f 	bl	8000fd6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002698:	2101      	movs	r1, #1
 800269a:	6838      	ldr	r0, [r7, #0]
 800269c:	f000 fa7c 	bl	8002b98 <prvAddCurrentTaskToDelayedList>
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20012e1c 	.word	0x20012e1c

080026ac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10a      	bne.n	80026d4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80026be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	613b      	str	r3, [r7, #16]
    }
 80026d0:	bf00      	nop
 80026d2:	e7fe      	b.n	80026d2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	4b16      	ldr	r3, [pc, #88]	; (8002734 <vTaskPlaceOnEventListRestricted+0x88>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	61da      	str	r2, [r3, #28]
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <vTaskPlaceOnEventListRestricted+0x88>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	6892      	ldr	r2, [r2, #8]
 80026ea:	621a      	str	r2, [r3, #32]
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <vTaskPlaceOnEventListRestricted+0x88>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	3218      	adds	r2, #24
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <vTaskPlaceOnEventListRestricted+0x88>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f103 0218 	add.w	r2, r3, #24
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <vTaskPlaceOnEventListRestricted+0x88>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
 8002720:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	68b8      	ldr	r0, [r7, #8]
 8002726:	f000 fa37 	bl	8002b98 <prvAddCurrentTaskToDelayedList>
    }
 800272a:	bf00      	nop
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20012e1c 	.word	0x20012e1c

08002738 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002738:	b480      	push	{r7}
 800273a:	b08b      	sub	sp, #44	; 0x2c
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	60fb      	str	r3, [r7, #12]
    }
 8002760:	bf00      	nop
 8002762:	e7fe      	b.n	8002762 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	6a3a      	ldr	r2, [r7, #32]
 8002770:	6a12      	ldr	r2, [r2, #32]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	6a3a      	ldr	r2, [r7, #32]
 800277a:	69d2      	ldr	r2, [r2, #28]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	3318      	adds	r3, #24
 8002786:	429a      	cmp	r2, r3
 8002788:	d103      	bne.n	8002792 <xTaskRemoveFromEventList+0x5a>
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	6a1a      	ldr	r2, [r3, #32]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	2200      	movs	r2, #0
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	1e5a      	subs	r2, r3, #1
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027a2:	4b4a      	ldr	r3, [pc, #296]	; (80028cc <xTaskRemoveFromEventList+0x194>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d15e      	bne.n	8002868 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	6a3a      	ldr	r2, [r7, #32]
 80027b6:	68d2      	ldr	r2, [r2, #12]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	6a3a      	ldr	r2, [r7, #32]
 80027c0:	6892      	ldr	r2, [r2, #8]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	3304      	adds	r3, #4
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d103      	bne.n	80027d8 <xTaskRemoveFromEventList+0xa0>
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	2200      	movs	r2, #0
 80027dc:	615a      	str	r2, [r3, #20]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	1e5a      	subs	r2, r3, #1
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2201      	movs	r2, #1
 80027ee:	409a      	lsls	r2, r3
 80027f0:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <xTaskRemoveFromEventList+0x198>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	4a36      	ldr	r2, [pc, #216]	; (80028d0 <xTaskRemoveFromEventList+0x198>)
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fe:	4935      	ldr	r1, [pc, #212]	; (80028d4 <xTaskRemoveFromEventList+0x19c>)
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	3304      	adds	r3, #4
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	6a3a      	ldr	r2, [r7, #32]
 8002824:	3204      	adds	r2, #4
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	1d1a      	adds	r2, r3, #4
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4a25      	ldr	r2, [pc, #148]	; (80028d4 <xTaskRemoveFromEventList+0x19c>)
 800283e:	441a      	add	r2, r3
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	615a      	str	r2, [r3, #20]
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002848:	4922      	ldr	r1, [pc, #136]	; (80028d4 <xTaskRemoveFromEventList+0x19c>)
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	1c59      	adds	r1, r3, #1
 8002858:	481e      	ldr	r0, [pc, #120]	; (80028d4 <xTaskRemoveFromEventList+0x19c>)
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4403      	add	r3, r0
 8002864:	6019      	str	r1, [r3, #0]
 8002866:	e01b      	b.n	80028a0 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <xTaskRemoveFromEventList+0x1a0>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	61da      	str	r2, [r3, #28]
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	621a      	str	r2, [r3, #32]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	6a3a      	ldr	r2, [r7, #32]
 8002882:	3218      	adds	r2, #24
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	f103 0218 	add.w	r2, r3, #24
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <xTaskRemoveFromEventList+0x1a0>)
 8002894:	629a      	str	r2, [r3, #40]	; 0x28
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <xTaskRemoveFromEventList+0x1a0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <xTaskRemoveFromEventList+0x1a0>)
 800289e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a4:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <xTaskRemoveFromEventList+0x1a4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d905      	bls.n	80028ba <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80028ae:	2301      	movs	r3, #1
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <xTaskRemoveFromEventList+0x1a8>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	e001      	b.n	80028be <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	372c      	adds	r7, #44	; 0x2c
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	20012f1c 	.word	0x20012f1c
 80028d0:	20012efc 	.word	0x20012efc
 80028d4:	20012e20 	.word	0x20012e20
 80028d8:	20012eb4 	.word	0x20012eb4
 80028dc:	20012e1c 	.word	0x20012e1c
 80028e0:	20012f08 	.word	0x20012f08

080028e4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <vTaskInternalSetTimeOutState+0x24>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <vTaskInternalSetTimeOutState+0x28>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	605a      	str	r2, [r3, #4]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	20012f0c 	.word	0x20012f0c
 800290c:	20012ef8 	.word	0x20012ef8

08002910 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002924:	f383 8811 	msr	BASEPRI, r3
 8002928:	f3bf 8f6f 	isb	sy
 800292c:	f3bf 8f4f 	dsb	sy
 8002930:	613b      	str	r3, [r7, #16]
    }
 8002932:	bf00      	nop
 8002934:	e7fe      	b.n	8002934 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	60fb      	str	r3, [r7, #12]
    }
 800294e:	bf00      	nop
 8002950:	e7fe      	b.n	8002950 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002952:	f7fe fd69 	bl	8001428 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002956:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <xTaskCheckForTimeOut+0xc4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d102      	bne.n	8002976 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	e026      	b.n	80029c4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <xTaskCheckForTimeOut+0xc8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d00a      	beq.n	8002998 <xTaskCheckForTimeOut+0x88>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	429a      	cmp	r2, r3
 800298a:	d305      	bcc.n	8002998 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800298c:	2301      	movs	r3, #1
 800298e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e015      	b.n	80029c4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d20b      	bcs.n	80029ba <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	1ad2      	subs	r2, r2, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ff98 	bl	80028e4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]
 80029b8:	e004      	b.n	80029c4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80029c0:	2301      	movs	r3, #1
 80029c2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80029c4:	f7fe fd60 	bl	8001488 <vPortExitCritical>

    return xReturn;
 80029c8:	69fb      	ldr	r3, [r7, #28]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3720      	adds	r7, #32
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20012ef8 	.word	0x20012ef8
 80029d8:	20012f0c 	.word	0x20012f0c

080029dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <vTaskMissedYield+0x14>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	20012f08 	.word	0x20012f08

080029f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80029fc:	f000 f854 	bl	8002aa8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <prvIdleTask+0x2c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d907      	bls.n	8002a18 <prvIdleTask+0x24>
            {
                taskYIELD();
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <prvIdleTask+0x30>)
 8002a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8002a18:	f7fe fb47 	bl	80010aa <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8002a1c:	e7ee      	b.n	80029fc <prvIdleTask+0x8>
 8002a1e:	bf00      	nop
 8002a20:	20012e20 	.word	0x20012e20
 8002a24:	e000ed04 	.word	0xe000ed04

08002a28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	e00c      	b.n	8002a4e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <prvInitialiseTaskLists+0x60>)
 8002a40:	4413      	add	r3, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fa9a 	bl	8000f7c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d9ef      	bls.n	8002a34 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a54:	480d      	ldr	r0, [pc, #52]	; (8002a8c <prvInitialiseTaskLists+0x64>)
 8002a56:	f7fe fa91 	bl	8000f7c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a5a:	480d      	ldr	r0, [pc, #52]	; (8002a90 <prvInitialiseTaskLists+0x68>)
 8002a5c:	f7fe fa8e 	bl	8000f7c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a60:	480c      	ldr	r0, [pc, #48]	; (8002a94 <prvInitialiseTaskLists+0x6c>)
 8002a62:	f7fe fa8b 	bl	8000f7c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002a66:	480c      	ldr	r0, [pc, #48]	; (8002a98 <prvInitialiseTaskLists+0x70>)
 8002a68:	f7fe fa88 	bl	8000f7c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002a6c:	480b      	ldr	r0, [pc, #44]	; (8002a9c <prvInitialiseTaskLists+0x74>)
 8002a6e:	f7fe fa85 	bl	8000f7c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <prvInitialiseTaskLists+0x78>)
 8002a74:	4a05      	ldr	r2, [pc, #20]	; (8002a8c <prvInitialiseTaskLists+0x64>)
 8002a76:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <prvInitialiseTaskLists+0x7c>)
 8002a7a:	4a05      	ldr	r2, [pc, #20]	; (8002a90 <prvInitialiseTaskLists+0x68>)
 8002a7c:	601a      	str	r2, [r3, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20012e20 	.word	0x20012e20
 8002a8c:	20012e84 	.word	0x20012e84
 8002a90:	20012e98 	.word	0x20012e98
 8002a94:	20012eb4 	.word	0x20012eb4
 8002a98:	20012ec8 	.word	0x20012ec8
 8002a9c:	20012ee0 	.word	0x20012ee0
 8002aa0:	20012eac 	.word	0x20012eac
 8002aa4:	20012eb0 	.word	0x20012eb0

08002aa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002aae:	e019      	b.n	8002ae4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002ab0:	f7fe fcba 	bl	8001428 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ab4:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <prvCheckTasksWaitingTermination+0x50>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe fac1 	bl	8001048 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <prvCheckTasksWaitingTermination+0x54>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	4a0b      	ldr	r2, [pc, #44]	; (8002afc <prvCheckTasksWaitingTermination+0x54>)
 8002ace:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <prvCheckTasksWaitingTermination+0x58>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <prvCheckTasksWaitingTermination+0x58>)
 8002ad8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002ada:	f7fe fcd5 	bl	8001488 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f810 	bl	8002b04 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <prvCheckTasksWaitingTermination+0x58>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e1      	bne.n	8002ab0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20012ec8 	.word	0x20012ec8
 8002afc:	20012ef4 	.word	0x20012ef4
 8002b00:	20012edc 	.word	0x20012edc

08002b04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe f8fd 	bl	8000d10 <vPortFree>
            vPortFree( pxTCB );
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe f8fa 	bl	8000d10 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <prvResetNextTaskUnblockTime+0x30>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d104      	bne.n	8002b3c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <prvResetNextTaskUnblockTime+0x34>)
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002b3a:	e005      	b.n	8002b48 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <prvResetNextTaskUnblockTime+0x30>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <prvResetNextTaskUnblockTime+0x34>)
 8002b46:	6013      	str	r3, [r2, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20012eac 	.word	0x20012eac
 8002b58:	20012f14 	.word	0x20012f14

08002b5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <xTaskGetSchedulerState+0x34>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	e008      	b.n	8002b82 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <xTaskGetSchedulerState+0x38>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	607b      	str	r3, [r7, #4]
 8002b7c:	e001      	b.n	8002b82 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002b82:	687b      	ldr	r3, [r7, #4]
    }
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	20012f00 	.word	0x20012f00
 8002b94:	20012f1c 	.word	0x20012f1c

08002b98 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002ba2:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <prvAddCurrentTaskToDelayedList+0xe4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ba8:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3304      	adds	r3, #4
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fa4a 	bl	8001048 <uxListRemove>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10b      	bne.n	8002bd2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002bba:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <prvAddCurrentTaskToDelayedList+0xec>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	4a2d      	ldr	r2, [pc, #180]	; (8002c84 <prvAddCurrentTaskToDelayedList+0xec>)
 8002bd0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d124      	bne.n	8002c24 <prvAddCurrentTaskToDelayedList+0x8c>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d021      	beq.n	8002c24 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002be0:	4b29      	ldr	r3, [pc, #164]	; (8002c88 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	6892      	ldr	r2, [r2, #8]
 8002bf6:	60da      	str	r2, [r3, #12]
 8002bf8:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	3204      	adds	r2, #4
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	1d1a      	adds	r2, r3, #4
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	609a      	str	r2, [r3, #8]
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002c14:	615a      	str	r2, [r3, #20]
 8002c16:	4b1c      	ldr	r3, [pc, #112]	; (8002c88 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	4a1a      	ldr	r2, [pc, #104]	; (8002c88 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002c22:	e026      	b.n	8002c72 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002c2c:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d209      	bcs.n	8002c50 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c3c:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <prvAddCurrentTaskToDelayedList+0xf4>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3304      	adds	r3, #4
 8002c46:	4619      	mov	r1, r3
 8002c48:	4610      	mov	r0, r2
 8002c4a:	f7fe f9c4 	bl	8000fd6 <vListInsert>
}
 8002c4e:	e010      	b.n	8002c72 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	f7fe f9ba 	bl	8000fd6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002c62:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d202      	bcs.n	8002c72 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002c6c:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6013      	str	r3, [r2, #0]
}
 8002c72:	bf00      	nop
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20012ef8 	.word	0x20012ef8
 8002c80:	20012e1c 	.word	0x20012e1c
 8002c84:	20012efc 	.word	0x20012efc
 8002c88:	20012ee0 	.word	0x20012ee0
 8002c8c:	20012eb0 	.word	0x20012eb0
 8002c90:	20012eac 	.word	0x20012eac
 8002c94:	20012f14 	.word	0x20012f14

08002c98 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002ca2:	f000 fa47 	bl	8003134 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <xTimerCreateTimerTask+0x54>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00b      	beq.n	8002cc6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <xTimerCreateTimerTask+0x58>)
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cbc:	490d      	ldr	r1, [pc, #52]	; (8002cf4 <xTimerCreateTimerTask+0x5c>)
 8002cbe:	480e      	ldr	r0, [pc, #56]	; (8002cf8 <xTimerCreateTimerTask+0x60>)
 8002cc0:	f7ff f84c 	bl	8001d5c <xTaskCreate>
 8002cc4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	603b      	str	r3, [r7, #0]
    }
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002ce2:	687b      	ldr	r3, [r7, #4]
    }
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20012f50 	.word	0x20012f50
 8002cf0:	20012f54 	.word	0x20012f54
 8002cf4:	08005c30 	.word	0x08005c30
 8002cf8:	08002da1 	.word	0x08002da1

08002cfc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002d08:	e008      	b.n	8002d1c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	4413      	add	r3, r2
 8002d12:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	18d1      	adds	r1, r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f8dd 	bl	8002ee8 <prvInsertTimerInActiveList>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1ea      	bne.n	8002d0a <prvReloadTimer+0xe>
        }
    }
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d4a:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <prvProcessExpiredTimer+0x5c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3304      	adds	r3, #4
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe f975 	bl	8001048 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7ff ffc3 	bl	8002cfc <prvReloadTimer>
 8002d76:	e008      	b.n	8002d8a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	4798      	blx	r3
    }
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20012f48 	.word	0x20012f48

08002da0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002da8:	f107 0308 	add.w	r3, r7, #8
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 f857 	bl	8002e60 <prvGetNextExpireTime>
 8002db2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4619      	mov	r1, r3
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f803 	bl	8002dc4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002dbe:	f000 f8d5 	bl	8002f6c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002dc2:	e7f1      	b.n	8002da8 <prvTimerTask+0x8>

08002dc4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002dce:	f7ff f9b5 	bl	800213c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002dd2:	f107 0308 	add.w	r3, r7, #8
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f866 	bl	8002ea8 <prvSampleTimeNow>
 8002ddc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d130      	bne.n	8002e46 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10a      	bne.n	8002e00 <prvProcessTimerOrBlockTask+0x3c>
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d806      	bhi.n	8002e00 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002df2:	f7ff f9b1 	bl	8002158 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002df6:	68f9      	ldr	r1, [r7, #12]
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ffa1 	bl	8002d40 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002dfe:	e024      	b.n	8002e4a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <prvProcessTimerOrBlockTask+0x90>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <prvProcessTimerOrBlockTask+0x50>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <prvProcessTimerOrBlockTask+0x52>
 8002e14:	2300      	movs	r3, #0
 8002e16:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <prvProcessTimerOrBlockTask+0x94>)
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	4619      	mov	r1, r3
 8002e26:	f7fe fe9f 	bl	8001b68 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002e2a:	f7ff f995 	bl	8002158 <xTaskResumeAll>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <prvProcessTimerOrBlockTask+0x98>)
 8002e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	f3bf 8f6f 	isb	sy
    }
 8002e44:	e001      	b.n	8002e4a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002e46:	f7ff f987 	bl	8002158 <xTaskResumeAll>
    }
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20012f4c 	.word	0x20012f4c
 8002e58:	20012f50 	.word	0x20012f50
 8002e5c:	e000ed04 	.word	0xe000ed04

08002e60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002e68:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <prvGetNextExpireTime+0x44>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <prvGetNextExpireTime+0x16>
 8002e72:	2201      	movs	r2, #1
 8002e74:	e000      	b.n	8002e78 <prvGetNextExpireTime+0x18>
 8002e76:	2200      	movs	r2, #0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d105      	bne.n	8002e90 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e84:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <prvGetNextExpireTime+0x44>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	e001      	b.n	8002e94 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002e94:	68fb      	ldr	r3, [r7, #12]
    }
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20012f48 	.word	0x20012f48

08002ea8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002eb0:	f7ff fa4e 	bl	8002350 <xTaskGetTickCount>
 8002eb4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <prvSampleTimeNow+0x3c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d205      	bcs.n	8002ecc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002ec0:	f000 f912 	bl	80030e8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	e002      	b.n	8002ed2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002ed2:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <prvSampleTimeNow+0x3c>)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
    }
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20012f58 	.word	0x20012f58

08002ee8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d812      	bhi.n	8002f34 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	1ad2      	subs	r2, r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d302      	bcc.n	8002f22 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	e01b      	b.n	8002f5a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <prvInsertTimerInActiveList+0x7c>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	f7fe f852 	bl	8000fd6 <vListInsert>
 8002f32:	e012      	b.n	8002f5a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d206      	bcs.n	8002f4a <prvInsertTimerInActiveList+0x62>
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d302      	bcc.n	8002f4a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002f44:	2301      	movs	r3, #1
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	e007      	b.n	8002f5a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <prvInsertTimerInActiveList+0x80>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	3304      	adds	r3, #4
 8002f52:	4619      	mov	r1, r3
 8002f54:	4610      	mov	r0, r2
 8002f56:	f7fe f83e 	bl	8000fd6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002f5a:	697b      	ldr	r3, [r7, #20]
    }
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20012f4c 	.word	0x20012f4c
 8002f68:	20012f48 	.word	0x20012f48

08002f6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002f72:	e0a6      	b.n	80030c2 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f2c0 80a2 	blt.w	80030c0 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d004      	beq.n	8002f92 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fe f85b 	bl	8001048 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff87 	bl	8002ea8 <prvSampleTimeNow>
 8002f9a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	f200 808e 	bhi.w	80030c2 <prvProcessReceivedCommands+0x156>
 8002fa6:	a201      	add	r2, pc, #4	; (adr r2, 8002fac <prvProcessReceivedCommands+0x40>)
 8002fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fac:	08002fd1 	.word	0x08002fd1
 8002fb0:	08002fd1 	.word	0x08002fd1
 8002fb4:	08003039 	.word	0x08003039
 8002fb8:	0800304d 	.word	0x0800304d
 8002fbc:	08003097 	.word	0x08003097
 8002fc0:	08002fd1 	.word	0x08002fd1
 8002fc4:	08002fd1 	.word	0x08002fd1
 8002fc8:	08003039 	.word	0x08003039
 8002fcc:	0800304d 	.word	0x0800304d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	18d1      	adds	r1, r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	69f8      	ldr	r0, [r7, #28]
 8002ff0:	f7ff ff7a 	bl	8002ee8 <prvInsertTimerInActiveList>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d063      	beq.n	80030c2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d009      	beq.n	800301c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	4413      	add	r3, r2
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4619      	mov	r1, r3
 8003014:	69f8      	ldr	r0, [r7, #28]
 8003016:	f7ff fe71 	bl	8002cfc <prvReloadTimer>
 800301a:	e008      	b.n	800302e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	b2da      	uxtb	r2, r3
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	69f8      	ldr	r0, [r7, #28]
 8003034:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003036:	e044      	b.n	80030c2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	b2da      	uxtb	r2, r3
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800304a:	e03a      	b.n	80030c2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	b2da      	uxtb	r2, r3
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	617b      	str	r3, [r7, #20]
    }
 800307e:	bf00      	nop
 8003080:	e7fe      	b.n	8003080 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	18d1      	adds	r1, r2, r3
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	69f8      	ldr	r0, [r7, #28]
 8003090:	f7ff ff2a 	bl	8002ee8 <prvInsertTimerInActiveList>
                        break;
 8003094:	e015      	b.n	80030c2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d103      	bne.n	80030ac <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80030a4:	69f8      	ldr	r0, [r7, #28]
 80030a6:	f7fd fe33 	bl	8000d10 <vPortFree>
 80030aa:	e00a      	b.n	80030c2 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80030be:	e000      	b.n	80030c2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80030c0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <prvProcessReceivedCommands+0x178>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f107 0108 	add.w	r1, r7, #8
 80030ca:	2200      	movs	r2, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe fb8f 	bl	80017f0 <xQueueReceive>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f47f af4d 	bne.w	8002f74 <prvProcessReceivedCommands+0x8>
        }
    }
 80030da:	bf00      	nop
 80030dc:	bf00      	nop
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20012f50 	.word	0x20012f50

080030e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80030ee:	e009      	b.n	8003104 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030f0:	4b0e      	ldr	r3, [pc, #56]	; (800312c <prvSwitchTimerLists+0x44>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80030fa:	f04f 31ff 	mov.w	r1, #4294967295
 80030fe:	6838      	ldr	r0, [r7, #0]
 8003100:	f7ff fe1e 	bl	8002d40 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <prvSwitchTimerLists+0x44>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800310e:	4b07      	ldr	r3, [pc, #28]	; (800312c <prvSwitchTimerLists+0x44>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <prvSwitchTimerLists+0x48>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a04      	ldr	r2, [pc, #16]	; (800312c <prvSwitchTimerLists+0x44>)
 800311a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <prvSwitchTimerLists+0x48>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6013      	str	r3, [r2, #0]
    }
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20012f48 	.word	0x20012f48
 8003130:	20012f4c 	.word	0x20012f4c

08003134 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003138:	f7fe f976 	bl	8001428 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800313c:	4b12      	ldr	r3, [pc, #72]	; (8003188 <prvCheckForValidListAndQueue+0x54>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d11d      	bne.n	8003180 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003144:	4811      	ldr	r0, [pc, #68]	; (800318c <prvCheckForValidListAndQueue+0x58>)
 8003146:	f7fd ff19 	bl	8000f7c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800314a:	4811      	ldr	r0, [pc, #68]	; (8003190 <prvCheckForValidListAndQueue+0x5c>)
 800314c:	f7fd ff16 	bl	8000f7c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003150:	4b10      	ldr	r3, [pc, #64]	; (8003194 <prvCheckForValidListAndQueue+0x60>)
 8003152:	4a0e      	ldr	r2, [pc, #56]	; (800318c <prvCheckForValidListAndQueue+0x58>)
 8003154:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <prvCheckForValidListAndQueue+0x64>)
 8003158:	4a0d      	ldr	r2, [pc, #52]	; (8003190 <prvCheckForValidListAndQueue+0x5c>)
 800315a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800315c:	2200      	movs	r2, #0
 800315e:	210c      	movs	r1, #12
 8003160:	200a      	movs	r0, #10
 8003162:	f7fe fad3 	bl	800170c <xQueueGenericCreate>
 8003166:	4603      	mov	r3, r0
 8003168:	4a07      	ldr	r2, [pc, #28]	; (8003188 <prvCheckForValidListAndQueue+0x54>)
 800316a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <prvCheckForValidListAndQueue+0x54>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <prvCheckForValidListAndQueue+0x54>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4908      	ldr	r1, [pc, #32]	; (800319c <prvCheckForValidListAndQueue+0x68>)
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fca6 	bl	8001acc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003180:	f7fe f982 	bl	8001488 <vPortExitCritical>
    }
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20012f50 	.word	0x20012f50
 800318c:	20012f20 	.word	0x20012f20
 8003190:	20012f34 	.word	0x20012f34
 8003194:	20012f48 	.word	0x20012f48
 8003198:	20012f4c 	.word	0x20012f4c
 800319c:	08005c38 	.word	0x08005c38

080031a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031a0:	480d      	ldr	r0, [pc, #52]	; (80031d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031a2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80031a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031a8:	480c      	ldr	r0, [pc, #48]	; (80031dc <LoopForever+0x6>)
  ldr r1, =_edata
 80031aa:	490d      	ldr	r1, [pc, #52]	; (80031e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031ac:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <LoopForever+0xe>)
  movs r3, #0
 80031ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b0:	e002      	b.n	80031b8 <LoopCopyDataInit>

080031b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031b6:	3304      	adds	r3, #4

080031b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031bc:	d3f9      	bcc.n	80031b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031be:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031c0:	4c0a      	ldr	r4, [pc, #40]	; (80031ec <LoopForever+0x16>)
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c4:	e001      	b.n	80031ca <LoopFillZerobss>

080031c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c8:	3204      	adds	r2, #4

080031ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031cc:	d3fb      	bcc.n	80031c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031ce:	f000 f817 	bl	8003200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031d2:	f7fd ff75 	bl	80010c0 <main>

080031d6 <LoopForever>:

LoopForever:
    b LoopForever
 80031d6:	e7fe      	b.n	80031d6 <LoopForever>
  ldr   r0, =_estack
 80031d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80031e4:	0800602c 	.word	0x0800602c
  ldr r2, =_sbss
 80031e8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80031ec:	20012fb4 	.word	0x20012fb4

080031f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031f0:	e7fe      	b.n	80031f0 <ADC_IRQHandler>
	...

080031f4 <__errno>:
 80031f4:	4b01      	ldr	r3, [pc, #4]	; (80031fc <__errno+0x8>)
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000010 	.word	0x20000010

08003200 <__libc_init_array>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	4d0d      	ldr	r5, [pc, #52]	; (8003238 <__libc_init_array+0x38>)
 8003204:	4c0d      	ldr	r4, [pc, #52]	; (800323c <__libc_init_array+0x3c>)
 8003206:	1b64      	subs	r4, r4, r5
 8003208:	10a4      	asrs	r4, r4, #2
 800320a:	2600      	movs	r6, #0
 800320c:	42a6      	cmp	r6, r4
 800320e:	d109      	bne.n	8003224 <__libc_init_array+0x24>
 8003210:	4d0b      	ldr	r5, [pc, #44]	; (8003240 <__libc_init_array+0x40>)
 8003212:	4c0c      	ldr	r4, [pc, #48]	; (8003244 <__libc_init_array+0x44>)
 8003214:	f002 fcf0 	bl	8005bf8 <_init>
 8003218:	1b64      	subs	r4, r4, r5
 800321a:	10a4      	asrs	r4, r4, #2
 800321c:	2600      	movs	r6, #0
 800321e:	42a6      	cmp	r6, r4
 8003220:	d105      	bne.n	800322e <__libc_init_array+0x2e>
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	f855 3b04 	ldr.w	r3, [r5], #4
 8003228:	4798      	blx	r3
 800322a:	3601      	adds	r6, #1
 800322c:	e7ee      	b.n	800320c <__libc_init_array+0xc>
 800322e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003232:	4798      	blx	r3
 8003234:	3601      	adds	r6, #1
 8003236:	e7f2      	b.n	800321e <__libc_init_array+0x1e>
 8003238:	08006024 	.word	0x08006024
 800323c:	08006024 	.word	0x08006024
 8003240:	08006024 	.word	0x08006024
 8003244:	08006028 	.word	0x08006028

08003248 <memcpy>:
 8003248:	440a      	add	r2, r1
 800324a:	4291      	cmp	r1, r2
 800324c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003250:	d100      	bne.n	8003254 <memcpy+0xc>
 8003252:	4770      	bx	lr
 8003254:	b510      	push	{r4, lr}
 8003256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800325a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800325e:	4291      	cmp	r1, r2
 8003260:	d1f9      	bne.n	8003256 <memcpy+0xe>
 8003262:	bd10      	pop	{r4, pc}

08003264 <memset>:
 8003264:	4402      	add	r2, r0
 8003266:	4603      	mov	r3, r0
 8003268:	4293      	cmp	r3, r2
 800326a:	d100      	bne.n	800326e <memset+0xa>
 800326c:	4770      	bx	lr
 800326e:	f803 1b01 	strb.w	r1, [r3], #1
 8003272:	e7f9      	b.n	8003268 <memset+0x4>

08003274 <__cvt>:
 8003274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003278:	ec55 4b10 	vmov	r4, r5, d0
 800327c:	2d00      	cmp	r5, #0
 800327e:	460e      	mov	r6, r1
 8003280:	4619      	mov	r1, r3
 8003282:	462b      	mov	r3, r5
 8003284:	bfbb      	ittet	lt
 8003286:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800328a:	461d      	movlt	r5, r3
 800328c:	2300      	movge	r3, #0
 800328e:	232d      	movlt	r3, #45	; 0x2d
 8003290:	700b      	strb	r3, [r1, #0]
 8003292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003294:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003298:	4691      	mov	r9, r2
 800329a:	f023 0820 	bic.w	r8, r3, #32
 800329e:	bfbc      	itt	lt
 80032a0:	4622      	movlt	r2, r4
 80032a2:	4614      	movlt	r4, r2
 80032a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032a8:	d005      	beq.n	80032b6 <__cvt+0x42>
 80032aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80032ae:	d100      	bne.n	80032b2 <__cvt+0x3e>
 80032b0:	3601      	adds	r6, #1
 80032b2:	2102      	movs	r1, #2
 80032b4:	e000      	b.n	80032b8 <__cvt+0x44>
 80032b6:	2103      	movs	r1, #3
 80032b8:	ab03      	add	r3, sp, #12
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	ab02      	add	r3, sp, #8
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	ec45 4b10 	vmov	d0, r4, r5
 80032c4:	4653      	mov	r3, sl
 80032c6:	4632      	mov	r2, r6
 80032c8:	f000 fcca 	bl	8003c60 <_dtoa_r>
 80032cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80032d0:	4607      	mov	r7, r0
 80032d2:	d102      	bne.n	80032da <__cvt+0x66>
 80032d4:	f019 0f01 	tst.w	r9, #1
 80032d8:	d022      	beq.n	8003320 <__cvt+0xac>
 80032da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032de:	eb07 0906 	add.w	r9, r7, r6
 80032e2:	d110      	bne.n	8003306 <__cvt+0x92>
 80032e4:	783b      	ldrb	r3, [r7, #0]
 80032e6:	2b30      	cmp	r3, #48	; 0x30
 80032e8:	d10a      	bne.n	8003300 <__cvt+0x8c>
 80032ea:	2200      	movs	r2, #0
 80032ec:	2300      	movs	r3, #0
 80032ee:	4620      	mov	r0, r4
 80032f0:	4629      	mov	r1, r5
 80032f2:	f7fd fbf9 	bl	8000ae8 <__aeabi_dcmpeq>
 80032f6:	b918      	cbnz	r0, 8003300 <__cvt+0x8c>
 80032f8:	f1c6 0601 	rsb	r6, r6, #1
 80032fc:	f8ca 6000 	str.w	r6, [sl]
 8003300:	f8da 3000 	ldr.w	r3, [sl]
 8003304:	4499      	add	r9, r3
 8003306:	2200      	movs	r2, #0
 8003308:	2300      	movs	r3, #0
 800330a:	4620      	mov	r0, r4
 800330c:	4629      	mov	r1, r5
 800330e:	f7fd fbeb 	bl	8000ae8 <__aeabi_dcmpeq>
 8003312:	b108      	cbz	r0, 8003318 <__cvt+0xa4>
 8003314:	f8cd 900c 	str.w	r9, [sp, #12]
 8003318:	2230      	movs	r2, #48	; 0x30
 800331a:	9b03      	ldr	r3, [sp, #12]
 800331c:	454b      	cmp	r3, r9
 800331e:	d307      	bcc.n	8003330 <__cvt+0xbc>
 8003320:	9b03      	ldr	r3, [sp, #12]
 8003322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003324:	1bdb      	subs	r3, r3, r7
 8003326:	4638      	mov	r0, r7
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	b004      	add	sp, #16
 800332c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003330:	1c59      	adds	r1, r3, #1
 8003332:	9103      	str	r1, [sp, #12]
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e7f0      	b.n	800331a <__cvt+0xa6>

08003338 <__exponent>:
 8003338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800333a:	4603      	mov	r3, r0
 800333c:	2900      	cmp	r1, #0
 800333e:	bfb8      	it	lt
 8003340:	4249      	neglt	r1, r1
 8003342:	f803 2b02 	strb.w	r2, [r3], #2
 8003346:	bfb4      	ite	lt
 8003348:	222d      	movlt	r2, #45	; 0x2d
 800334a:	222b      	movge	r2, #43	; 0x2b
 800334c:	2909      	cmp	r1, #9
 800334e:	7042      	strb	r2, [r0, #1]
 8003350:	dd2a      	ble.n	80033a8 <__exponent+0x70>
 8003352:	f10d 0407 	add.w	r4, sp, #7
 8003356:	46a4      	mov	ip, r4
 8003358:	270a      	movs	r7, #10
 800335a:	46a6      	mov	lr, r4
 800335c:	460a      	mov	r2, r1
 800335e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003362:	fb07 1516 	mls	r5, r7, r6, r1
 8003366:	3530      	adds	r5, #48	; 0x30
 8003368:	2a63      	cmp	r2, #99	; 0x63
 800336a:	f104 34ff 	add.w	r4, r4, #4294967295
 800336e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003372:	4631      	mov	r1, r6
 8003374:	dcf1      	bgt.n	800335a <__exponent+0x22>
 8003376:	3130      	adds	r1, #48	; 0x30
 8003378:	f1ae 0502 	sub.w	r5, lr, #2
 800337c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003380:	1c44      	adds	r4, r0, #1
 8003382:	4629      	mov	r1, r5
 8003384:	4561      	cmp	r1, ip
 8003386:	d30a      	bcc.n	800339e <__exponent+0x66>
 8003388:	f10d 0209 	add.w	r2, sp, #9
 800338c:	eba2 020e 	sub.w	r2, r2, lr
 8003390:	4565      	cmp	r5, ip
 8003392:	bf88      	it	hi
 8003394:	2200      	movhi	r2, #0
 8003396:	4413      	add	r3, r2
 8003398:	1a18      	subs	r0, r3, r0
 800339a:	b003      	add	sp, #12
 800339c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800339e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80033a6:	e7ed      	b.n	8003384 <__exponent+0x4c>
 80033a8:	2330      	movs	r3, #48	; 0x30
 80033aa:	3130      	adds	r1, #48	; 0x30
 80033ac:	7083      	strb	r3, [r0, #2]
 80033ae:	70c1      	strb	r1, [r0, #3]
 80033b0:	1d03      	adds	r3, r0, #4
 80033b2:	e7f1      	b.n	8003398 <__exponent+0x60>

080033b4 <_printf_float>:
 80033b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b8:	ed2d 8b02 	vpush	{d8}
 80033bc:	b08d      	sub	sp, #52	; 0x34
 80033be:	460c      	mov	r4, r1
 80033c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80033c4:	4616      	mov	r6, r2
 80033c6:	461f      	mov	r7, r3
 80033c8:	4605      	mov	r5, r0
 80033ca:	f001 fa35 	bl	8004838 <_localeconv_r>
 80033ce:	f8d0 a000 	ldr.w	sl, [r0]
 80033d2:	4650      	mov	r0, sl
 80033d4:	f7fc ff0c 	bl	80001f0 <strlen>
 80033d8:	2300      	movs	r3, #0
 80033da:	930a      	str	r3, [sp, #40]	; 0x28
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	9305      	str	r3, [sp, #20]
 80033e0:	f8d8 3000 	ldr.w	r3, [r8]
 80033e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80033e8:	3307      	adds	r3, #7
 80033ea:	f023 0307 	bic.w	r3, r3, #7
 80033ee:	f103 0208 	add.w	r2, r3, #8
 80033f2:	f8c8 2000 	str.w	r2, [r8]
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80033fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003402:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003406:	9307      	str	r3, [sp, #28]
 8003408:	f8cd 8018 	str.w	r8, [sp, #24]
 800340c:	ee08 0a10 	vmov	s16, r0
 8003410:	4b9f      	ldr	r3, [pc, #636]	; (8003690 <_printf_float+0x2dc>)
 8003412:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003416:	f04f 32ff 	mov.w	r2, #4294967295
 800341a:	f7fd fb97 	bl	8000b4c <__aeabi_dcmpun>
 800341e:	bb88      	cbnz	r0, 8003484 <_printf_float+0xd0>
 8003420:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003424:	4b9a      	ldr	r3, [pc, #616]	; (8003690 <_printf_float+0x2dc>)
 8003426:	f04f 32ff 	mov.w	r2, #4294967295
 800342a:	f7fd fb71 	bl	8000b10 <__aeabi_dcmple>
 800342e:	bb48      	cbnz	r0, 8003484 <_printf_float+0xd0>
 8003430:	2200      	movs	r2, #0
 8003432:	2300      	movs	r3, #0
 8003434:	4640      	mov	r0, r8
 8003436:	4649      	mov	r1, r9
 8003438:	f7fd fb60 	bl	8000afc <__aeabi_dcmplt>
 800343c:	b110      	cbz	r0, 8003444 <_printf_float+0x90>
 800343e:	232d      	movs	r3, #45	; 0x2d
 8003440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003444:	4b93      	ldr	r3, [pc, #588]	; (8003694 <_printf_float+0x2e0>)
 8003446:	4894      	ldr	r0, [pc, #592]	; (8003698 <_printf_float+0x2e4>)
 8003448:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800344c:	bf94      	ite	ls
 800344e:	4698      	movls	r8, r3
 8003450:	4680      	movhi	r8, r0
 8003452:	2303      	movs	r3, #3
 8003454:	6123      	str	r3, [r4, #16]
 8003456:	9b05      	ldr	r3, [sp, #20]
 8003458:	f023 0204 	bic.w	r2, r3, #4
 800345c:	6022      	str	r2, [r4, #0]
 800345e:	f04f 0900 	mov.w	r9, #0
 8003462:	9700      	str	r7, [sp, #0]
 8003464:	4633      	mov	r3, r6
 8003466:	aa0b      	add	r2, sp, #44	; 0x2c
 8003468:	4621      	mov	r1, r4
 800346a:	4628      	mov	r0, r5
 800346c:	f000 f9d8 	bl	8003820 <_printf_common>
 8003470:	3001      	adds	r0, #1
 8003472:	f040 8090 	bne.w	8003596 <_printf_float+0x1e2>
 8003476:	f04f 30ff 	mov.w	r0, #4294967295
 800347a:	b00d      	add	sp, #52	; 0x34
 800347c:	ecbd 8b02 	vpop	{d8}
 8003480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003484:	4642      	mov	r2, r8
 8003486:	464b      	mov	r3, r9
 8003488:	4640      	mov	r0, r8
 800348a:	4649      	mov	r1, r9
 800348c:	f7fd fb5e 	bl	8000b4c <__aeabi_dcmpun>
 8003490:	b140      	cbz	r0, 80034a4 <_printf_float+0xf0>
 8003492:	464b      	mov	r3, r9
 8003494:	2b00      	cmp	r3, #0
 8003496:	bfbc      	itt	lt
 8003498:	232d      	movlt	r3, #45	; 0x2d
 800349a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800349e:	487f      	ldr	r0, [pc, #508]	; (800369c <_printf_float+0x2e8>)
 80034a0:	4b7f      	ldr	r3, [pc, #508]	; (80036a0 <_printf_float+0x2ec>)
 80034a2:	e7d1      	b.n	8003448 <_printf_float+0x94>
 80034a4:	6863      	ldr	r3, [r4, #4]
 80034a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80034aa:	9206      	str	r2, [sp, #24]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	d13f      	bne.n	8003530 <_printf_float+0x17c>
 80034b0:	2306      	movs	r3, #6
 80034b2:	6063      	str	r3, [r4, #4]
 80034b4:	9b05      	ldr	r3, [sp, #20]
 80034b6:	6861      	ldr	r1, [r4, #4]
 80034b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80034bc:	2300      	movs	r3, #0
 80034be:	9303      	str	r3, [sp, #12]
 80034c0:	ab0a      	add	r3, sp, #40	; 0x28
 80034c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80034c6:	ab09      	add	r3, sp, #36	; 0x24
 80034c8:	ec49 8b10 	vmov	d0, r8, r9
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	6022      	str	r2, [r4, #0]
 80034d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80034d4:	4628      	mov	r0, r5
 80034d6:	f7ff fecd 	bl	8003274 <__cvt>
 80034da:	9b06      	ldr	r3, [sp, #24]
 80034dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80034de:	2b47      	cmp	r3, #71	; 0x47
 80034e0:	4680      	mov	r8, r0
 80034e2:	d108      	bne.n	80034f6 <_printf_float+0x142>
 80034e4:	1cc8      	adds	r0, r1, #3
 80034e6:	db02      	blt.n	80034ee <_printf_float+0x13a>
 80034e8:	6863      	ldr	r3, [r4, #4]
 80034ea:	4299      	cmp	r1, r3
 80034ec:	dd41      	ble.n	8003572 <_printf_float+0x1be>
 80034ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80034f2:	fa5f fb8b 	uxtb.w	fp, fp
 80034f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80034fa:	d820      	bhi.n	800353e <_printf_float+0x18a>
 80034fc:	3901      	subs	r1, #1
 80034fe:	465a      	mov	r2, fp
 8003500:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003504:	9109      	str	r1, [sp, #36]	; 0x24
 8003506:	f7ff ff17 	bl	8003338 <__exponent>
 800350a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800350c:	1813      	adds	r3, r2, r0
 800350e:	2a01      	cmp	r2, #1
 8003510:	4681      	mov	r9, r0
 8003512:	6123      	str	r3, [r4, #16]
 8003514:	dc02      	bgt.n	800351c <_printf_float+0x168>
 8003516:	6822      	ldr	r2, [r4, #0]
 8003518:	07d2      	lsls	r2, r2, #31
 800351a:	d501      	bpl.n	8003520 <_printf_float+0x16c>
 800351c:	3301      	adds	r3, #1
 800351e:	6123      	str	r3, [r4, #16]
 8003520:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003524:	2b00      	cmp	r3, #0
 8003526:	d09c      	beq.n	8003462 <_printf_float+0xae>
 8003528:	232d      	movs	r3, #45	; 0x2d
 800352a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800352e:	e798      	b.n	8003462 <_printf_float+0xae>
 8003530:	9a06      	ldr	r2, [sp, #24]
 8003532:	2a47      	cmp	r2, #71	; 0x47
 8003534:	d1be      	bne.n	80034b4 <_printf_float+0x100>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1bc      	bne.n	80034b4 <_printf_float+0x100>
 800353a:	2301      	movs	r3, #1
 800353c:	e7b9      	b.n	80034b2 <_printf_float+0xfe>
 800353e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003542:	d118      	bne.n	8003576 <_printf_float+0x1c2>
 8003544:	2900      	cmp	r1, #0
 8003546:	6863      	ldr	r3, [r4, #4]
 8003548:	dd0b      	ble.n	8003562 <_printf_float+0x1ae>
 800354a:	6121      	str	r1, [r4, #16]
 800354c:	b913      	cbnz	r3, 8003554 <_printf_float+0x1a0>
 800354e:	6822      	ldr	r2, [r4, #0]
 8003550:	07d0      	lsls	r0, r2, #31
 8003552:	d502      	bpl.n	800355a <_printf_float+0x1a6>
 8003554:	3301      	adds	r3, #1
 8003556:	440b      	add	r3, r1
 8003558:	6123      	str	r3, [r4, #16]
 800355a:	65a1      	str	r1, [r4, #88]	; 0x58
 800355c:	f04f 0900 	mov.w	r9, #0
 8003560:	e7de      	b.n	8003520 <_printf_float+0x16c>
 8003562:	b913      	cbnz	r3, 800356a <_printf_float+0x1b6>
 8003564:	6822      	ldr	r2, [r4, #0]
 8003566:	07d2      	lsls	r2, r2, #31
 8003568:	d501      	bpl.n	800356e <_printf_float+0x1ba>
 800356a:	3302      	adds	r3, #2
 800356c:	e7f4      	b.n	8003558 <_printf_float+0x1a4>
 800356e:	2301      	movs	r3, #1
 8003570:	e7f2      	b.n	8003558 <_printf_float+0x1a4>
 8003572:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003578:	4299      	cmp	r1, r3
 800357a:	db05      	blt.n	8003588 <_printf_float+0x1d4>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	6121      	str	r1, [r4, #16]
 8003580:	07d8      	lsls	r0, r3, #31
 8003582:	d5ea      	bpl.n	800355a <_printf_float+0x1a6>
 8003584:	1c4b      	adds	r3, r1, #1
 8003586:	e7e7      	b.n	8003558 <_printf_float+0x1a4>
 8003588:	2900      	cmp	r1, #0
 800358a:	bfd4      	ite	le
 800358c:	f1c1 0202 	rsble	r2, r1, #2
 8003590:	2201      	movgt	r2, #1
 8003592:	4413      	add	r3, r2
 8003594:	e7e0      	b.n	8003558 <_printf_float+0x1a4>
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	055a      	lsls	r2, r3, #21
 800359a:	d407      	bmi.n	80035ac <_printf_float+0x1f8>
 800359c:	6923      	ldr	r3, [r4, #16]
 800359e:	4642      	mov	r2, r8
 80035a0:	4631      	mov	r1, r6
 80035a2:	4628      	mov	r0, r5
 80035a4:	47b8      	blx	r7
 80035a6:	3001      	adds	r0, #1
 80035a8:	d12c      	bne.n	8003604 <_printf_float+0x250>
 80035aa:	e764      	b.n	8003476 <_printf_float+0xc2>
 80035ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80035b0:	f240 80e0 	bls.w	8003774 <_printf_float+0x3c0>
 80035b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035b8:	2200      	movs	r2, #0
 80035ba:	2300      	movs	r3, #0
 80035bc:	f7fd fa94 	bl	8000ae8 <__aeabi_dcmpeq>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d034      	beq.n	800362e <_printf_float+0x27a>
 80035c4:	4a37      	ldr	r2, [pc, #220]	; (80036a4 <_printf_float+0x2f0>)
 80035c6:	2301      	movs	r3, #1
 80035c8:	4631      	mov	r1, r6
 80035ca:	4628      	mov	r0, r5
 80035cc:	47b8      	blx	r7
 80035ce:	3001      	adds	r0, #1
 80035d0:	f43f af51 	beq.w	8003476 <_printf_float+0xc2>
 80035d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035d8:	429a      	cmp	r2, r3
 80035da:	db02      	blt.n	80035e2 <_printf_float+0x22e>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	07d8      	lsls	r0, r3, #31
 80035e0:	d510      	bpl.n	8003604 <_printf_float+0x250>
 80035e2:	ee18 3a10 	vmov	r3, s16
 80035e6:	4652      	mov	r2, sl
 80035e8:	4631      	mov	r1, r6
 80035ea:	4628      	mov	r0, r5
 80035ec:	47b8      	blx	r7
 80035ee:	3001      	adds	r0, #1
 80035f0:	f43f af41 	beq.w	8003476 <_printf_float+0xc2>
 80035f4:	f04f 0800 	mov.w	r8, #0
 80035f8:	f104 091a 	add.w	r9, r4, #26
 80035fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035fe:	3b01      	subs	r3, #1
 8003600:	4543      	cmp	r3, r8
 8003602:	dc09      	bgt.n	8003618 <_printf_float+0x264>
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	079b      	lsls	r3, r3, #30
 8003608:	f100 8105 	bmi.w	8003816 <_printf_float+0x462>
 800360c:	68e0      	ldr	r0, [r4, #12]
 800360e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003610:	4298      	cmp	r0, r3
 8003612:	bfb8      	it	lt
 8003614:	4618      	movlt	r0, r3
 8003616:	e730      	b.n	800347a <_printf_float+0xc6>
 8003618:	2301      	movs	r3, #1
 800361a:	464a      	mov	r2, r9
 800361c:	4631      	mov	r1, r6
 800361e:	4628      	mov	r0, r5
 8003620:	47b8      	blx	r7
 8003622:	3001      	adds	r0, #1
 8003624:	f43f af27 	beq.w	8003476 <_printf_float+0xc2>
 8003628:	f108 0801 	add.w	r8, r8, #1
 800362c:	e7e6      	b.n	80035fc <_printf_float+0x248>
 800362e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003630:	2b00      	cmp	r3, #0
 8003632:	dc39      	bgt.n	80036a8 <_printf_float+0x2f4>
 8003634:	4a1b      	ldr	r2, [pc, #108]	; (80036a4 <_printf_float+0x2f0>)
 8003636:	2301      	movs	r3, #1
 8003638:	4631      	mov	r1, r6
 800363a:	4628      	mov	r0, r5
 800363c:	47b8      	blx	r7
 800363e:	3001      	adds	r0, #1
 8003640:	f43f af19 	beq.w	8003476 <_printf_float+0xc2>
 8003644:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003648:	4313      	orrs	r3, r2
 800364a:	d102      	bne.n	8003652 <_printf_float+0x29e>
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	07d9      	lsls	r1, r3, #31
 8003650:	d5d8      	bpl.n	8003604 <_printf_float+0x250>
 8003652:	ee18 3a10 	vmov	r3, s16
 8003656:	4652      	mov	r2, sl
 8003658:	4631      	mov	r1, r6
 800365a:	4628      	mov	r0, r5
 800365c:	47b8      	blx	r7
 800365e:	3001      	adds	r0, #1
 8003660:	f43f af09 	beq.w	8003476 <_printf_float+0xc2>
 8003664:	f04f 0900 	mov.w	r9, #0
 8003668:	f104 0a1a 	add.w	sl, r4, #26
 800366c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800366e:	425b      	negs	r3, r3
 8003670:	454b      	cmp	r3, r9
 8003672:	dc01      	bgt.n	8003678 <_printf_float+0x2c4>
 8003674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003676:	e792      	b.n	800359e <_printf_float+0x1ea>
 8003678:	2301      	movs	r3, #1
 800367a:	4652      	mov	r2, sl
 800367c:	4631      	mov	r1, r6
 800367e:	4628      	mov	r0, r5
 8003680:	47b8      	blx	r7
 8003682:	3001      	adds	r0, #1
 8003684:	f43f aef7 	beq.w	8003476 <_printf_float+0xc2>
 8003688:	f109 0901 	add.w	r9, r9, #1
 800368c:	e7ee      	b.n	800366c <_printf_float+0x2b8>
 800368e:	bf00      	nop
 8003690:	7fefffff 	.word	0x7fefffff
 8003694:	08005c44 	.word	0x08005c44
 8003698:	08005c48 	.word	0x08005c48
 800369c:	08005c50 	.word	0x08005c50
 80036a0:	08005c4c 	.word	0x08005c4c
 80036a4:	08005c54 	.word	0x08005c54
 80036a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036ac:	429a      	cmp	r2, r3
 80036ae:	bfa8      	it	ge
 80036b0:	461a      	movge	r2, r3
 80036b2:	2a00      	cmp	r2, #0
 80036b4:	4691      	mov	r9, r2
 80036b6:	dc37      	bgt.n	8003728 <_printf_float+0x374>
 80036b8:	f04f 0b00 	mov.w	fp, #0
 80036bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036c0:	f104 021a 	add.w	r2, r4, #26
 80036c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036c6:	9305      	str	r3, [sp, #20]
 80036c8:	eba3 0309 	sub.w	r3, r3, r9
 80036cc:	455b      	cmp	r3, fp
 80036ce:	dc33      	bgt.n	8003738 <_printf_float+0x384>
 80036d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036d4:	429a      	cmp	r2, r3
 80036d6:	db3b      	blt.n	8003750 <_printf_float+0x39c>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	07da      	lsls	r2, r3, #31
 80036dc:	d438      	bmi.n	8003750 <_printf_float+0x39c>
 80036de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036e0:	9b05      	ldr	r3, [sp, #20]
 80036e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	eba2 0901 	sub.w	r9, r2, r1
 80036ea:	4599      	cmp	r9, r3
 80036ec:	bfa8      	it	ge
 80036ee:	4699      	movge	r9, r3
 80036f0:	f1b9 0f00 	cmp.w	r9, #0
 80036f4:	dc35      	bgt.n	8003762 <_printf_float+0x3ae>
 80036f6:	f04f 0800 	mov.w	r8, #0
 80036fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036fe:	f104 0a1a 	add.w	sl, r4, #26
 8003702:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	eba3 0309 	sub.w	r3, r3, r9
 800370c:	4543      	cmp	r3, r8
 800370e:	f77f af79 	ble.w	8003604 <_printf_float+0x250>
 8003712:	2301      	movs	r3, #1
 8003714:	4652      	mov	r2, sl
 8003716:	4631      	mov	r1, r6
 8003718:	4628      	mov	r0, r5
 800371a:	47b8      	blx	r7
 800371c:	3001      	adds	r0, #1
 800371e:	f43f aeaa 	beq.w	8003476 <_printf_float+0xc2>
 8003722:	f108 0801 	add.w	r8, r8, #1
 8003726:	e7ec      	b.n	8003702 <_printf_float+0x34e>
 8003728:	4613      	mov	r3, r2
 800372a:	4631      	mov	r1, r6
 800372c:	4642      	mov	r2, r8
 800372e:	4628      	mov	r0, r5
 8003730:	47b8      	blx	r7
 8003732:	3001      	adds	r0, #1
 8003734:	d1c0      	bne.n	80036b8 <_printf_float+0x304>
 8003736:	e69e      	b.n	8003476 <_printf_float+0xc2>
 8003738:	2301      	movs	r3, #1
 800373a:	4631      	mov	r1, r6
 800373c:	4628      	mov	r0, r5
 800373e:	9205      	str	r2, [sp, #20]
 8003740:	47b8      	blx	r7
 8003742:	3001      	adds	r0, #1
 8003744:	f43f ae97 	beq.w	8003476 <_printf_float+0xc2>
 8003748:	9a05      	ldr	r2, [sp, #20]
 800374a:	f10b 0b01 	add.w	fp, fp, #1
 800374e:	e7b9      	b.n	80036c4 <_printf_float+0x310>
 8003750:	ee18 3a10 	vmov	r3, s16
 8003754:	4652      	mov	r2, sl
 8003756:	4631      	mov	r1, r6
 8003758:	4628      	mov	r0, r5
 800375a:	47b8      	blx	r7
 800375c:	3001      	adds	r0, #1
 800375e:	d1be      	bne.n	80036de <_printf_float+0x32a>
 8003760:	e689      	b.n	8003476 <_printf_float+0xc2>
 8003762:	9a05      	ldr	r2, [sp, #20]
 8003764:	464b      	mov	r3, r9
 8003766:	4442      	add	r2, r8
 8003768:	4631      	mov	r1, r6
 800376a:	4628      	mov	r0, r5
 800376c:	47b8      	blx	r7
 800376e:	3001      	adds	r0, #1
 8003770:	d1c1      	bne.n	80036f6 <_printf_float+0x342>
 8003772:	e680      	b.n	8003476 <_printf_float+0xc2>
 8003774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003776:	2a01      	cmp	r2, #1
 8003778:	dc01      	bgt.n	800377e <_printf_float+0x3ca>
 800377a:	07db      	lsls	r3, r3, #31
 800377c:	d538      	bpl.n	80037f0 <_printf_float+0x43c>
 800377e:	2301      	movs	r3, #1
 8003780:	4642      	mov	r2, r8
 8003782:	4631      	mov	r1, r6
 8003784:	4628      	mov	r0, r5
 8003786:	47b8      	blx	r7
 8003788:	3001      	adds	r0, #1
 800378a:	f43f ae74 	beq.w	8003476 <_printf_float+0xc2>
 800378e:	ee18 3a10 	vmov	r3, s16
 8003792:	4652      	mov	r2, sl
 8003794:	4631      	mov	r1, r6
 8003796:	4628      	mov	r0, r5
 8003798:	47b8      	blx	r7
 800379a:	3001      	adds	r0, #1
 800379c:	f43f ae6b 	beq.w	8003476 <_printf_float+0xc2>
 80037a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037a4:	2200      	movs	r2, #0
 80037a6:	2300      	movs	r3, #0
 80037a8:	f7fd f99e 	bl	8000ae8 <__aeabi_dcmpeq>
 80037ac:	b9d8      	cbnz	r0, 80037e6 <_printf_float+0x432>
 80037ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037b0:	f108 0201 	add.w	r2, r8, #1
 80037b4:	3b01      	subs	r3, #1
 80037b6:	4631      	mov	r1, r6
 80037b8:	4628      	mov	r0, r5
 80037ba:	47b8      	blx	r7
 80037bc:	3001      	adds	r0, #1
 80037be:	d10e      	bne.n	80037de <_printf_float+0x42a>
 80037c0:	e659      	b.n	8003476 <_printf_float+0xc2>
 80037c2:	2301      	movs	r3, #1
 80037c4:	4652      	mov	r2, sl
 80037c6:	4631      	mov	r1, r6
 80037c8:	4628      	mov	r0, r5
 80037ca:	47b8      	blx	r7
 80037cc:	3001      	adds	r0, #1
 80037ce:	f43f ae52 	beq.w	8003476 <_printf_float+0xc2>
 80037d2:	f108 0801 	add.w	r8, r8, #1
 80037d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	4543      	cmp	r3, r8
 80037dc:	dcf1      	bgt.n	80037c2 <_printf_float+0x40e>
 80037de:	464b      	mov	r3, r9
 80037e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80037e4:	e6dc      	b.n	80035a0 <_printf_float+0x1ec>
 80037e6:	f04f 0800 	mov.w	r8, #0
 80037ea:	f104 0a1a 	add.w	sl, r4, #26
 80037ee:	e7f2      	b.n	80037d6 <_printf_float+0x422>
 80037f0:	2301      	movs	r3, #1
 80037f2:	4642      	mov	r2, r8
 80037f4:	e7df      	b.n	80037b6 <_printf_float+0x402>
 80037f6:	2301      	movs	r3, #1
 80037f8:	464a      	mov	r2, r9
 80037fa:	4631      	mov	r1, r6
 80037fc:	4628      	mov	r0, r5
 80037fe:	47b8      	blx	r7
 8003800:	3001      	adds	r0, #1
 8003802:	f43f ae38 	beq.w	8003476 <_printf_float+0xc2>
 8003806:	f108 0801 	add.w	r8, r8, #1
 800380a:	68e3      	ldr	r3, [r4, #12]
 800380c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800380e:	1a5b      	subs	r3, r3, r1
 8003810:	4543      	cmp	r3, r8
 8003812:	dcf0      	bgt.n	80037f6 <_printf_float+0x442>
 8003814:	e6fa      	b.n	800360c <_printf_float+0x258>
 8003816:	f04f 0800 	mov.w	r8, #0
 800381a:	f104 0919 	add.w	r9, r4, #25
 800381e:	e7f4      	b.n	800380a <_printf_float+0x456>

08003820 <_printf_common>:
 8003820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003824:	4616      	mov	r6, r2
 8003826:	4699      	mov	r9, r3
 8003828:	688a      	ldr	r2, [r1, #8]
 800382a:	690b      	ldr	r3, [r1, #16]
 800382c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003830:	4293      	cmp	r3, r2
 8003832:	bfb8      	it	lt
 8003834:	4613      	movlt	r3, r2
 8003836:	6033      	str	r3, [r6, #0]
 8003838:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800383c:	4607      	mov	r7, r0
 800383e:	460c      	mov	r4, r1
 8003840:	b10a      	cbz	r2, 8003846 <_printf_common+0x26>
 8003842:	3301      	adds	r3, #1
 8003844:	6033      	str	r3, [r6, #0]
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	0699      	lsls	r1, r3, #26
 800384a:	bf42      	ittt	mi
 800384c:	6833      	ldrmi	r3, [r6, #0]
 800384e:	3302      	addmi	r3, #2
 8003850:	6033      	strmi	r3, [r6, #0]
 8003852:	6825      	ldr	r5, [r4, #0]
 8003854:	f015 0506 	ands.w	r5, r5, #6
 8003858:	d106      	bne.n	8003868 <_printf_common+0x48>
 800385a:	f104 0a19 	add.w	sl, r4, #25
 800385e:	68e3      	ldr	r3, [r4, #12]
 8003860:	6832      	ldr	r2, [r6, #0]
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	42ab      	cmp	r3, r5
 8003866:	dc26      	bgt.n	80038b6 <_printf_common+0x96>
 8003868:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800386c:	1e13      	subs	r3, r2, #0
 800386e:	6822      	ldr	r2, [r4, #0]
 8003870:	bf18      	it	ne
 8003872:	2301      	movne	r3, #1
 8003874:	0692      	lsls	r2, r2, #26
 8003876:	d42b      	bmi.n	80038d0 <_printf_common+0xb0>
 8003878:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800387c:	4649      	mov	r1, r9
 800387e:	4638      	mov	r0, r7
 8003880:	47c0      	blx	r8
 8003882:	3001      	adds	r0, #1
 8003884:	d01e      	beq.n	80038c4 <_printf_common+0xa4>
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	68e5      	ldr	r5, [r4, #12]
 800388a:	6832      	ldr	r2, [r6, #0]
 800388c:	f003 0306 	and.w	r3, r3, #6
 8003890:	2b04      	cmp	r3, #4
 8003892:	bf08      	it	eq
 8003894:	1aad      	subeq	r5, r5, r2
 8003896:	68a3      	ldr	r3, [r4, #8]
 8003898:	6922      	ldr	r2, [r4, #16]
 800389a:	bf0c      	ite	eq
 800389c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038a0:	2500      	movne	r5, #0
 80038a2:	4293      	cmp	r3, r2
 80038a4:	bfc4      	itt	gt
 80038a6:	1a9b      	subgt	r3, r3, r2
 80038a8:	18ed      	addgt	r5, r5, r3
 80038aa:	2600      	movs	r6, #0
 80038ac:	341a      	adds	r4, #26
 80038ae:	42b5      	cmp	r5, r6
 80038b0:	d11a      	bne.n	80038e8 <_printf_common+0xc8>
 80038b2:	2000      	movs	r0, #0
 80038b4:	e008      	b.n	80038c8 <_printf_common+0xa8>
 80038b6:	2301      	movs	r3, #1
 80038b8:	4652      	mov	r2, sl
 80038ba:	4649      	mov	r1, r9
 80038bc:	4638      	mov	r0, r7
 80038be:	47c0      	blx	r8
 80038c0:	3001      	adds	r0, #1
 80038c2:	d103      	bne.n	80038cc <_printf_common+0xac>
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038cc:	3501      	adds	r5, #1
 80038ce:	e7c6      	b.n	800385e <_printf_common+0x3e>
 80038d0:	18e1      	adds	r1, r4, r3
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	2030      	movs	r0, #48	; 0x30
 80038d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038da:	4422      	add	r2, r4
 80038dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038e4:	3302      	adds	r3, #2
 80038e6:	e7c7      	b.n	8003878 <_printf_common+0x58>
 80038e8:	2301      	movs	r3, #1
 80038ea:	4622      	mov	r2, r4
 80038ec:	4649      	mov	r1, r9
 80038ee:	4638      	mov	r0, r7
 80038f0:	47c0      	blx	r8
 80038f2:	3001      	adds	r0, #1
 80038f4:	d0e6      	beq.n	80038c4 <_printf_common+0xa4>
 80038f6:	3601      	adds	r6, #1
 80038f8:	e7d9      	b.n	80038ae <_printf_common+0x8e>
	...

080038fc <_printf_i>:
 80038fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003900:	460c      	mov	r4, r1
 8003902:	4691      	mov	r9, r2
 8003904:	7e27      	ldrb	r7, [r4, #24]
 8003906:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003908:	2f78      	cmp	r7, #120	; 0x78
 800390a:	4680      	mov	r8, r0
 800390c:	469a      	mov	sl, r3
 800390e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003912:	d807      	bhi.n	8003924 <_printf_i+0x28>
 8003914:	2f62      	cmp	r7, #98	; 0x62
 8003916:	d80a      	bhi.n	800392e <_printf_i+0x32>
 8003918:	2f00      	cmp	r7, #0
 800391a:	f000 80d8 	beq.w	8003ace <_printf_i+0x1d2>
 800391e:	2f58      	cmp	r7, #88	; 0x58
 8003920:	f000 80a3 	beq.w	8003a6a <_printf_i+0x16e>
 8003924:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003928:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800392c:	e03a      	b.n	80039a4 <_printf_i+0xa8>
 800392e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003932:	2b15      	cmp	r3, #21
 8003934:	d8f6      	bhi.n	8003924 <_printf_i+0x28>
 8003936:	a001      	add	r0, pc, #4	; (adr r0, 800393c <_printf_i+0x40>)
 8003938:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800393c:	08003995 	.word	0x08003995
 8003940:	080039a9 	.word	0x080039a9
 8003944:	08003925 	.word	0x08003925
 8003948:	08003925 	.word	0x08003925
 800394c:	08003925 	.word	0x08003925
 8003950:	08003925 	.word	0x08003925
 8003954:	080039a9 	.word	0x080039a9
 8003958:	08003925 	.word	0x08003925
 800395c:	08003925 	.word	0x08003925
 8003960:	08003925 	.word	0x08003925
 8003964:	08003925 	.word	0x08003925
 8003968:	08003ab5 	.word	0x08003ab5
 800396c:	080039d9 	.word	0x080039d9
 8003970:	08003a97 	.word	0x08003a97
 8003974:	08003925 	.word	0x08003925
 8003978:	08003925 	.word	0x08003925
 800397c:	08003ad7 	.word	0x08003ad7
 8003980:	08003925 	.word	0x08003925
 8003984:	080039d9 	.word	0x080039d9
 8003988:	08003925 	.word	0x08003925
 800398c:	08003925 	.word	0x08003925
 8003990:	08003a9f 	.word	0x08003a9f
 8003994:	680b      	ldr	r3, [r1, #0]
 8003996:	1d1a      	adds	r2, r3, #4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	600a      	str	r2, [r1, #0]
 800399c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0a3      	b.n	8003af0 <_printf_i+0x1f4>
 80039a8:	6825      	ldr	r5, [r4, #0]
 80039aa:	6808      	ldr	r0, [r1, #0]
 80039ac:	062e      	lsls	r6, r5, #24
 80039ae:	f100 0304 	add.w	r3, r0, #4
 80039b2:	d50a      	bpl.n	80039ca <_printf_i+0xce>
 80039b4:	6805      	ldr	r5, [r0, #0]
 80039b6:	600b      	str	r3, [r1, #0]
 80039b8:	2d00      	cmp	r5, #0
 80039ba:	da03      	bge.n	80039c4 <_printf_i+0xc8>
 80039bc:	232d      	movs	r3, #45	; 0x2d
 80039be:	426d      	negs	r5, r5
 80039c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039c4:	485e      	ldr	r0, [pc, #376]	; (8003b40 <_printf_i+0x244>)
 80039c6:	230a      	movs	r3, #10
 80039c8:	e019      	b.n	80039fe <_printf_i+0x102>
 80039ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039ce:	6805      	ldr	r5, [r0, #0]
 80039d0:	600b      	str	r3, [r1, #0]
 80039d2:	bf18      	it	ne
 80039d4:	b22d      	sxthne	r5, r5
 80039d6:	e7ef      	b.n	80039b8 <_printf_i+0xbc>
 80039d8:	680b      	ldr	r3, [r1, #0]
 80039da:	6825      	ldr	r5, [r4, #0]
 80039dc:	1d18      	adds	r0, r3, #4
 80039de:	6008      	str	r0, [r1, #0]
 80039e0:	0628      	lsls	r0, r5, #24
 80039e2:	d501      	bpl.n	80039e8 <_printf_i+0xec>
 80039e4:	681d      	ldr	r5, [r3, #0]
 80039e6:	e002      	b.n	80039ee <_printf_i+0xf2>
 80039e8:	0669      	lsls	r1, r5, #25
 80039ea:	d5fb      	bpl.n	80039e4 <_printf_i+0xe8>
 80039ec:	881d      	ldrh	r5, [r3, #0]
 80039ee:	4854      	ldr	r0, [pc, #336]	; (8003b40 <_printf_i+0x244>)
 80039f0:	2f6f      	cmp	r7, #111	; 0x6f
 80039f2:	bf0c      	ite	eq
 80039f4:	2308      	moveq	r3, #8
 80039f6:	230a      	movne	r3, #10
 80039f8:	2100      	movs	r1, #0
 80039fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039fe:	6866      	ldr	r6, [r4, #4]
 8003a00:	60a6      	str	r6, [r4, #8]
 8003a02:	2e00      	cmp	r6, #0
 8003a04:	bfa2      	ittt	ge
 8003a06:	6821      	ldrge	r1, [r4, #0]
 8003a08:	f021 0104 	bicge.w	r1, r1, #4
 8003a0c:	6021      	strge	r1, [r4, #0]
 8003a0e:	b90d      	cbnz	r5, 8003a14 <_printf_i+0x118>
 8003a10:	2e00      	cmp	r6, #0
 8003a12:	d04d      	beq.n	8003ab0 <_printf_i+0x1b4>
 8003a14:	4616      	mov	r6, r2
 8003a16:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a1a:	fb03 5711 	mls	r7, r3, r1, r5
 8003a1e:	5dc7      	ldrb	r7, [r0, r7]
 8003a20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a24:	462f      	mov	r7, r5
 8003a26:	42bb      	cmp	r3, r7
 8003a28:	460d      	mov	r5, r1
 8003a2a:	d9f4      	bls.n	8003a16 <_printf_i+0x11a>
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d10b      	bne.n	8003a48 <_printf_i+0x14c>
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	07df      	lsls	r7, r3, #31
 8003a34:	d508      	bpl.n	8003a48 <_printf_i+0x14c>
 8003a36:	6923      	ldr	r3, [r4, #16]
 8003a38:	6861      	ldr	r1, [r4, #4]
 8003a3a:	4299      	cmp	r1, r3
 8003a3c:	bfde      	ittt	le
 8003a3e:	2330      	movle	r3, #48	; 0x30
 8003a40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a48:	1b92      	subs	r2, r2, r6
 8003a4a:	6122      	str	r2, [r4, #16]
 8003a4c:	f8cd a000 	str.w	sl, [sp]
 8003a50:	464b      	mov	r3, r9
 8003a52:	aa03      	add	r2, sp, #12
 8003a54:	4621      	mov	r1, r4
 8003a56:	4640      	mov	r0, r8
 8003a58:	f7ff fee2 	bl	8003820 <_printf_common>
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d14c      	bne.n	8003afa <_printf_i+0x1fe>
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295
 8003a64:	b004      	add	sp, #16
 8003a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a6a:	4835      	ldr	r0, [pc, #212]	; (8003b40 <_printf_i+0x244>)
 8003a6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	680e      	ldr	r6, [r1, #0]
 8003a74:	061f      	lsls	r7, r3, #24
 8003a76:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a7a:	600e      	str	r6, [r1, #0]
 8003a7c:	d514      	bpl.n	8003aa8 <_printf_i+0x1ac>
 8003a7e:	07d9      	lsls	r1, r3, #31
 8003a80:	bf44      	itt	mi
 8003a82:	f043 0320 	orrmi.w	r3, r3, #32
 8003a86:	6023      	strmi	r3, [r4, #0]
 8003a88:	b91d      	cbnz	r5, 8003a92 <_printf_i+0x196>
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	f023 0320 	bic.w	r3, r3, #32
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	2310      	movs	r3, #16
 8003a94:	e7b0      	b.n	80039f8 <_printf_i+0xfc>
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	f043 0320 	orr.w	r3, r3, #32
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	2378      	movs	r3, #120	; 0x78
 8003aa0:	4828      	ldr	r0, [pc, #160]	; (8003b44 <_printf_i+0x248>)
 8003aa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aa6:	e7e3      	b.n	8003a70 <_printf_i+0x174>
 8003aa8:	065e      	lsls	r6, r3, #25
 8003aaa:	bf48      	it	mi
 8003aac:	b2ad      	uxthmi	r5, r5
 8003aae:	e7e6      	b.n	8003a7e <_printf_i+0x182>
 8003ab0:	4616      	mov	r6, r2
 8003ab2:	e7bb      	b.n	8003a2c <_printf_i+0x130>
 8003ab4:	680b      	ldr	r3, [r1, #0]
 8003ab6:	6826      	ldr	r6, [r4, #0]
 8003ab8:	6960      	ldr	r0, [r4, #20]
 8003aba:	1d1d      	adds	r5, r3, #4
 8003abc:	600d      	str	r5, [r1, #0]
 8003abe:	0635      	lsls	r5, r6, #24
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	d501      	bpl.n	8003ac8 <_printf_i+0x1cc>
 8003ac4:	6018      	str	r0, [r3, #0]
 8003ac6:	e002      	b.n	8003ace <_printf_i+0x1d2>
 8003ac8:	0671      	lsls	r1, r6, #25
 8003aca:	d5fb      	bpl.n	8003ac4 <_printf_i+0x1c8>
 8003acc:	8018      	strh	r0, [r3, #0]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	6123      	str	r3, [r4, #16]
 8003ad2:	4616      	mov	r6, r2
 8003ad4:	e7ba      	b.n	8003a4c <_printf_i+0x150>
 8003ad6:	680b      	ldr	r3, [r1, #0]
 8003ad8:	1d1a      	adds	r2, r3, #4
 8003ada:	600a      	str	r2, [r1, #0]
 8003adc:	681e      	ldr	r6, [r3, #0]
 8003ade:	6862      	ldr	r2, [r4, #4]
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f7fc fb8c 	bl	8000200 <memchr>
 8003ae8:	b108      	cbz	r0, 8003aee <_printf_i+0x1f2>
 8003aea:	1b80      	subs	r0, r0, r6
 8003aec:	6060      	str	r0, [r4, #4]
 8003aee:	6863      	ldr	r3, [r4, #4]
 8003af0:	6123      	str	r3, [r4, #16]
 8003af2:	2300      	movs	r3, #0
 8003af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af8:	e7a8      	b.n	8003a4c <_printf_i+0x150>
 8003afa:	6923      	ldr	r3, [r4, #16]
 8003afc:	4632      	mov	r2, r6
 8003afe:	4649      	mov	r1, r9
 8003b00:	4640      	mov	r0, r8
 8003b02:	47d0      	blx	sl
 8003b04:	3001      	adds	r0, #1
 8003b06:	d0ab      	beq.n	8003a60 <_printf_i+0x164>
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	079b      	lsls	r3, r3, #30
 8003b0c:	d413      	bmi.n	8003b36 <_printf_i+0x23a>
 8003b0e:	68e0      	ldr	r0, [r4, #12]
 8003b10:	9b03      	ldr	r3, [sp, #12]
 8003b12:	4298      	cmp	r0, r3
 8003b14:	bfb8      	it	lt
 8003b16:	4618      	movlt	r0, r3
 8003b18:	e7a4      	b.n	8003a64 <_printf_i+0x168>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	4632      	mov	r2, r6
 8003b1e:	4649      	mov	r1, r9
 8003b20:	4640      	mov	r0, r8
 8003b22:	47d0      	blx	sl
 8003b24:	3001      	adds	r0, #1
 8003b26:	d09b      	beq.n	8003a60 <_printf_i+0x164>
 8003b28:	3501      	adds	r5, #1
 8003b2a:	68e3      	ldr	r3, [r4, #12]
 8003b2c:	9903      	ldr	r1, [sp, #12]
 8003b2e:	1a5b      	subs	r3, r3, r1
 8003b30:	42ab      	cmp	r3, r5
 8003b32:	dcf2      	bgt.n	8003b1a <_printf_i+0x21e>
 8003b34:	e7eb      	b.n	8003b0e <_printf_i+0x212>
 8003b36:	2500      	movs	r5, #0
 8003b38:	f104 0619 	add.w	r6, r4, #25
 8003b3c:	e7f5      	b.n	8003b2a <_printf_i+0x22e>
 8003b3e:	bf00      	nop
 8003b40:	08005c56 	.word	0x08005c56
 8003b44:	08005c67 	.word	0x08005c67

08003b48 <quorem>:
 8003b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4c:	6903      	ldr	r3, [r0, #16]
 8003b4e:	690c      	ldr	r4, [r1, #16]
 8003b50:	42a3      	cmp	r3, r4
 8003b52:	4607      	mov	r7, r0
 8003b54:	f2c0 8081 	blt.w	8003c5a <quorem+0x112>
 8003b58:	3c01      	subs	r4, #1
 8003b5a:	f101 0814 	add.w	r8, r1, #20
 8003b5e:	f100 0514 	add.w	r5, r0, #20
 8003b62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003b6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b70:	3301      	adds	r3, #1
 8003b72:	429a      	cmp	r2, r3
 8003b74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003b78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003b7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b80:	d331      	bcc.n	8003be6 <quorem+0x9e>
 8003b82:	f04f 0e00 	mov.w	lr, #0
 8003b86:	4640      	mov	r0, r8
 8003b88:	46ac      	mov	ip, r5
 8003b8a:	46f2      	mov	sl, lr
 8003b8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8003b90:	b293      	uxth	r3, r2
 8003b92:	fb06 e303 	mla	r3, r6, r3, lr
 8003b96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	ebaa 0303 	sub.w	r3, sl, r3
 8003ba0:	0c12      	lsrs	r2, r2, #16
 8003ba2:	f8dc a000 	ldr.w	sl, [ip]
 8003ba6:	fb06 e202 	mla	r2, r6, r2, lr
 8003baa:	fa13 f38a 	uxtah	r3, r3, sl
 8003bae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003bb2:	fa1f fa82 	uxth.w	sl, r2
 8003bb6:	f8dc 2000 	ldr.w	r2, [ip]
 8003bba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003bbe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bc8:	4581      	cmp	r9, r0
 8003bca:	f84c 3b04 	str.w	r3, [ip], #4
 8003bce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003bd2:	d2db      	bcs.n	8003b8c <quorem+0x44>
 8003bd4:	f855 300b 	ldr.w	r3, [r5, fp]
 8003bd8:	b92b      	cbnz	r3, 8003be6 <quorem+0x9e>
 8003bda:	9b01      	ldr	r3, [sp, #4]
 8003bdc:	3b04      	subs	r3, #4
 8003bde:	429d      	cmp	r5, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	d32e      	bcc.n	8003c42 <quorem+0xfa>
 8003be4:	613c      	str	r4, [r7, #16]
 8003be6:	4638      	mov	r0, r7
 8003be8:	f001 f8b0 	bl	8004d4c <__mcmp>
 8003bec:	2800      	cmp	r0, #0
 8003bee:	db24      	blt.n	8003c3a <quorem+0xf2>
 8003bf0:	3601      	adds	r6, #1
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	f04f 0c00 	mov.w	ip, #0
 8003bf8:	f858 2b04 	ldr.w	r2, [r8], #4
 8003bfc:	f8d0 e000 	ldr.w	lr, [r0]
 8003c00:	b293      	uxth	r3, r2
 8003c02:	ebac 0303 	sub.w	r3, ip, r3
 8003c06:	0c12      	lsrs	r2, r2, #16
 8003c08:	fa13 f38e 	uxtah	r3, r3, lr
 8003c0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003c10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c1a:	45c1      	cmp	r9, r8
 8003c1c:	f840 3b04 	str.w	r3, [r0], #4
 8003c20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003c24:	d2e8      	bcs.n	8003bf8 <quorem+0xb0>
 8003c26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c2e:	b922      	cbnz	r2, 8003c3a <quorem+0xf2>
 8003c30:	3b04      	subs	r3, #4
 8003c32:	429d      	cmp	r5, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	d30a      	bcc.n	8003c4e <quorem+0x106>
 8003c38:	613c      	str	r4, [r7, #16]
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	b003      	add	sp, #12
 8003c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	3b04      	subs	r3, #4
 8003c46:	2a00      	cmp	r2, #0
 8003c48:	d1cc      	bne.n	8003be4 <quorem+0x9c>
 8003c4a:	3c01      	subs	r4, #1
 8003c4c:	e7c7      	b.n	8003bde <quorem+0x96>
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	3b04      	subs	r3, #4
 8003c52:	2a00      	cmp	r2, #0
 8003c54:	d1f0      	bne.n	8003c38 <quorem+0xf0>
 8003c56:	3c01      	subs	r4, #1
 8003c58:	e7eb      	b.n	8003c32 <quorem+0xea>
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	e7ee      	b.n	8003c3c <quorem+0xf4>
	...

08003c60 <_dtoa_r>:
 8003c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c64:	ed2d 8b02 	vpush	{d8}
 8003c68:	ec57 6b10 	vmov	r6, r7, d0
 8003c6c:	b095      	sub	sp, #84	; 0x54
 8003c6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003c70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003c74:	9105      	str	r1, [sp, #20]
 8003c76:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003c7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c80:	b975      	cbnz	r5, 8003ca0 <_dtoa_r+0x40>
 8003c82:	2010      	movs	r0, #16
 8003c84:	f000 fddc 	bl	8004840 <malloc>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6260      	str	r0, [r4, #36]	; 0x24
 8003c8c:	b920      	cbnz	r0, 8003c98 <_dtoa_r+0x38>
 8003c8e:	4bb2      	ldr	r3, [pc, #712]	; (8003f58 <_dtoa_r+0x2f8>)
 8003c90:	21ea      	movs	r1, #234	; 0xea
 8003c92:	48b2      	ldr	r0, [pc, #712]	; (8003f5c <_dtoa_r+0x2fc>)
 8003c94:	f001 fa24 	bl	80050e0 <__assert_func>
 8003c98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003c9c:	6005      	str	r5, [r0, #0]
 8003c9e:	60c5      	str	r5, [r0, #12]
 8003ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ca2:	6819      	ldr	r1, [r3, #0]
 8003ca4:	b151      	cbz	r1, 8003cbc <_dtoa_r+0x5c>
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	604a      	str	r2, [r1, #4]
 8003caa:	2301      	movs	r3, #1
 8003cac:	4093      	lsls	r3, r2
 8003cae:	608b      	str	r3, [r1, #8]
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f000 fe0d 	bl	80048d0 <_Bfree>
 8003cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	1e3b      	subs	r3, r7, #0
 8003cbe:	bfb9      	ittee	lt
 8003cc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003cc4:	9303      	strlt	r3, [sp, #12]
 8003cc6:	2300      	movge	r3, #0
 8003cc8:	f8c8 3000 	strge.w	r3, [r8]
 8003ccc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003cd0:	4ba3      	ldr	r3, [pc, #652]	; (8003f60 <_dtoa_r+0x300>)
 8003cd2:	bfbc      	itt	lt
 8003cd4:	2201      	movlt	r2, #1
 8003cd6:	f8c8 2000 	strlt.w	r2, [r8]
 8003cda:	ea33 0309 	bics.w	r3, r3, r9
 8003cde:	d11b      	bne.n	8003d18 <_dtoa_r+0xb8>
 8003ce0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003ce2:	f242 730f 	movw	r3, #9999	; 0x270f
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003cec:	4333      	orrs	r3, r6
 8003cee:	f000 857a 	beq.w	80047e6 <_dtoa_r+0xb86>
 8003cf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003cf4:	b963      	cbnz	r3, 8003d10 <_dtoa_r+0xb0>
 8003cf6:	4b9b      	ldr	r3, [pc, #620]	; (8003f64 <_dtoa_r+0x304>)
 8003cf8:	e024      	b.n	8003d44 <_dtoa_r+0xe4>
 8003cfa:	4b9b      	ldr	r3, [pc, #620]	; (8003f68 <_dtoa_r+0x308>)
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	3308      	adds	r3, #8
 8003d00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	9800      	ldr	r0, [sp, #0]
 8003d06:	b015      	add	sp, #84	; 0x54
 8003d08:	ecbd 8b02 	vpop	{d8}
 8003d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d10:	4b94      	ldr	r3, [pc, #592]	; (8003f64 <_dtoa_r+0x304>)
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	3303      	adds	r3, #3
 8003d16:	e7f3      	b.n	8003d00 <_dtoa_r+0xa0>
 8003d18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	ec51 0b17 	vmov	r0, r1, d7
 8003d22:	2300      	movs	r3, #0
 8003d24:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003d28:	f7fc fede 	bl	8000ae8 <__aeabi_dcmpeq>
 8003d2c:	4680      	mov	r8, r0
 8003d2e:	b158      	cbz	r0, 8003d48 <_dtoa_r+0xe8>
 8003d30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d32:	2301      	movs	r3, #1
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8551 	beq.w	80047e0 <_dtoa_r+0xb80>
 8003d3e:	488b      	ldr	r0, [pc, #556]	; (8003f6c <_dtoa_r+0x30c>)
 8003d40:	6018      	str	r0, [r3, #0]
 8003d42:	1e43      	subs	r3, r0, #1
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	e7dd      	b.n	8003d04 <_dtoa_r+0xa4>
 8003d48:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003d4c:	aa12      	add	r2, sp, #72	; 0x48
 8003d4e:	a913      	add	r1, sp, #76	; 0x4c
 8003d50:	4620      	mov	r0, r4
 8003d52:	f001 f89f 	bl	8004e94 <__d2b>
 8003d56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003d5a:	4683      	mov	fp, r0
 8003d5c:	2d00      	cmp	r5, #0
 8003d5e:	d07c      	beq.n	8003e5a <_dtoa_r+0x1fa>
 8003d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d62:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003d66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d6a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003d6e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003d72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003d76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003d7a:	4b7d      	ldr	r3, [pc, #500]	; (8003f70 <_dtoa_r+0x310>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	4630      	mov	r0, r6
 8003d80:	4639      	mov	r1, r7
 8003d82:	f7fc fa91 	bl	80002a8 <__aeabi_dsub>
 8003d86:	a36e      	add	r3, pc, #440	; (adr r3, 8003f40 <_dtoa_r+0x2e0>)
 8003d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8c:	f7fc fc44 	bl	8000618 <__aeabi_dmul>
 8003d90:	a36d      	add	r3, pc, #436	; (adr r3, 8003f48 <_dtoa_r+0x2e8>)
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f7fc fa89 	bl	80002ac <__adddf3>
 8003d9a:	4606      	mov	r6, r0
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	460f      	mov	r7, r1
 8003da0:	f7fc fbd0 	bl	8000544 <__aeabi_i2d>
 8003da4:	a36a      	add	r3, pc, #424	; (adr r3, 8003f50 <_dtoa_r+0x2f0>)
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f7fc fc35 	bl	8000618 <__aeabi_dmul>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4630      	mov	r0, r6
 8003db4:	4639      	mov	r1, r7
 8003db6:	f7fc fa79 	bl	80002ac <__adddf3>
 8003dba:	4606      	mov	r6, r0
 8003dbc:	460f      	mov	r7, r1
 8003dbe:	f7fc fedb 	bl	8000b78 <__aeabi_d2iz>
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	4682      	mov	sl, r0
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	4630      	mov	r0, r6
 8003dca:	4639      	mov	r1, r7
 8003dcc:	f7fc fe96 	bl	8000afc <__aeabi_dcmplt>
 8003dd0:	b148      	cbz	r0, 8003de6 <_dtoa_r+0x186>
 8003dd2:	4650      	mov	r0, sl
 8003dd4:	f7fc fbb6 	bl	8000544 <__aeabi_i2d>
 8003dd8:	4632      	mov	r2, r6
 8003dda:	463b      	mov	r3, r7
 8003ddc:	f7fc fe84 	bl	8000ae8 <__aeabi_dcmpeq>
 8003de0:	b908      	cbnz	r0, 8003de6 <_dtoa_r+0x186>
 8003de2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003de6:	f1ba 0f16 	cmp.w	sl, #22
 8003dea:	d854      	bhi.n	8003e96 <_dtoa_r+0x236>
 8003dec:	4b61      	ldr	r3, [pc, #388]	; (8003f74 <_dtoa_r+0x314>)
 8003dee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003dfa:	f7fc fe7f 	bl	8000afc <__aeabi_dcmplt>
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	d04b      	beq.n	8003e9a <_dtoa_r+0x23a>
 8003e02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e06:	2300      	movs	r3, #0
 8003e08:	930e      	str	r3, [sp, #56]	; 0x38
 8003e0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e0c:	1b5d      	subs	r5, r3, r5
 8003e0e:	1e6b      	subs	r3, r5, #1
 8003e10:	9304      	str	r3, [sp, #16]
 8003e12:	bf43      	ittte	mi
 8003e14:	2300      	movmi	r3, #0
 8003e16:	f1c5 0801 	rsbmi	r8, r5, #1
 8003e1a:	9304      	strmi	r3, [sp, #16]
 8003e1c:	f04f 0800 	movpl.w	r8, #0
 8003e20:	f1ba 0f00 	cmp.w	sl, #0
 8003e24:	db3b      	blt.n	8003e9e <_dtoa_r+0x23e>
 8003e26:	9b04      	ldr	r3, [sp, #16]
 8003e28:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003e2c:	4453      	add	r3, sl
 8003e2e:	9304      	str	r3, [sp, #16]
 8003e30:	2300      	movs	r3, #0
 8003e32:	9306      	str	r3, [sp, #24]
 8003e34:	9b05      	ldr	r3, [sp, #20]
 8003e36:	2b09      	cmp	r3, #9
 8003e38:	d869      	bhi.n	8003f0e <_dtoa_r+0x2ae>
 8003e3a:	2b05      	cmp	r3, #5
 8003e3c:	bfc4      	itt	gt
 8003e3e:	3b04      	subgt	r3, #4
 8003e40:	9305      	strgt	r3, [sp, #20]
 8003e42:	9b05      	ldr	r3, [sp, #20]
 8003e44:	f1a3 0302 	sub.w	r3, r3, #2
 8003e48:	bfcc      	ite	gt
 8003e4a:	2500      	movgt	r5, #0
 8003e4c:	2501      	movle	r5, #1
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d869      	bhi.n	8003f26 <_dtoa_r+0x2c6>
 8003e52:	e8df f003 	tbb	[pc, r3]
 8003e56:	4e2c      	.short	0x4e2c
 8003e58:	5a4c      	.short	0x5a4c
 8003e5a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003e5e:	441d      	add	r5, r3
 8003e60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	bfc1      	itttt	gt
 8003e68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003e6c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003e70:	fa09 f303 	lslgt.w	r3, r9, r3
 8003e74:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003e78:	bfda      	itte	le
 8003e7a:	f1c3 0320 	rsble	r3, r3, #32
 8003e7e:	fa06 f003 	lslle.w	r0, r6, r3
 8003e82:	4318      	orrgt	r0, r3
 8003e84:	f7fc fb4e 	bl	8000524 <__aeabi_ui2d>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003e90:	3d01      	subs	r5, #1
 8003e92:	9310      	str	r3, [sp, #64]	; 0x40
 8003e94:	e771      	b.n	8003d7a <_dtoa_r+0x11a>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e7b6      	b.n	8003e08 <_dtoa_r+0x1a8>
 8003e9a:	900e      	str	r0, [sp, #56]	; 0x38
 8003e9c:	e7b5      	b.n	8003e0a <_dtoa_r+0x1aa>
 8003e9e:	f1ca 0300 	rsb	r3, sl, #0
 8003ea2:	9306      	str	r3, [sp, #24]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	eba8 080a 	sub.w	r8, r8, sl
 8003eaa:	930d      	str	r3, [sp, #52]	; 0x34
 8003eac:	e7c2      	b.n	8003e34 <_dtoa_r+0x1d4>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9308      	str	r3, [sp, #32]
 8003eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	dc39      	bgt.n	8003f2c <_dtoa_r+0x2cc>
 8003eb8:	f04f 0901 	mov.w	r9, #1
 8003ebc:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ec0:	464b      	mov	r3, r9
 8003ec2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003ec6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003ec8:	2200      	movs	r2, #0
 8003eca:	6042      	str	r2, [r0, #4]
 8003ecc:	2204      	movs	r2, #4
 8003ece:	f102 0614 	add.w	r6, r2, #20
 8003ed2:	429e      	cmp	r6, r3
 8003ed4:	6841      	ldr	r1, [r0, #4]
 8003ed6:	d92f      	bls.n	8003f38 <_dtoa_r+0x2d8>
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f000 fcb9 	bl	8004850 <_Balloc>
 8003ede:	9000      	str	r0, [sp, #0]
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	d14b      	bne.n	8003f7c <_dtoa_r+0x31c>
 8003ee4:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <_dtoa_r+0x318>)
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003eec:	e6d1      	b.n	8003c92 <_dtoa_r+0x32>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e7de      	b.n	8003eb0 <_dtoa_r+0x250>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	9308      	str	r3, [sp, #32]
 8003ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ef8:	eb0a 0903 	add.w	r9, sl, r3
 8003efc:	f109 0301 	add.w	r3, r9, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	bfb8      	it	lt
 8003f06:	2301      	movlt	r3, #1
 8003f08:	e7dd      	b.n	8003ec6 <_dtoa_r+0x266>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e7f2      	b.n	8003ef4 <_dtoa_r+0x294>
 8003f0e:	2501      	movs	r5, #1
 8003f10:	2300      	movs	r3, #0
 8003f12:	9305      	str	r3, [sp, #20]
 8003f14:	9508      	str	r5, [sp, #32]
 8003f16:	f04f 39ff 	mov.w	r9, #4294967295
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f20:	2312      	movs	r3, #18
 8003f22:	9209      	str	r2, [sp, #36]	; 0x24
 8003f24:	e7cf      	b.n	8003ec6 <_dtoa_r+0x266>
 8003f26:	2301      	movs	r3, #1
 8003f28:	9308      	str	r3, [sp, #32]
 8003f2a:	e7f4      	b.n	8003f16 <_dtoa_r+0x2b6>
 8003f2c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003f30:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f34:	464b      	mov	r3, r9
 8003f36:	e7c6      	b.n	8003ec6 <_dtoa_r+0x266>
 8003f38:	3101      	adds	r1, #1
 8003f3a:	6041      	str	r1, [r0, #4]
 8003f3c:	0052      	lsls	r2, r2, #1
 8003f3e:	e7c6      	b.n	8003ece <_dtoa_r+0x26e>
 8003f40:	636f4361 	.word	0x636f4361
 8003f44:	3fd287a7 	.word	0x3fd287a7
 8003f48:	8b60c8b3 	.word	0x8b60c8b3
 8003f4c:	3fc68a28 	.word	0x3fc68a28
 8003f50:	509f79fb 	.word	0x509f79fb
 8003f54:	3fd34413 	.word	0x3fd34413
 8003f58:	08005c85 	.word	0x08005c85
 8003f5c:	08005c9c 	.word	0x08005c9c
 8003f60:	7ff00000 	.word	0x7ff00000
 8003f64:	08005c81 	.word	0x08005c81
 8003f68:	08005c78 	.word	0x08005c78
 8003f6c:	08005c55 	.word	0x08005c55
 8003f70:	3ff80000 	.word	0x3ff80000
 8003f74:	08005d98 	.word	0x08005d98
 8003f78:	08005cfb 	.word	0x08005cfb
 8003f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f7e:	9a00      	ldr	r2, [sp, #0]
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	9b01      	ldr	r3, [sp, #4]
 8003f84:	2b0e      	cmp	r3, #14
 8003f86:	f200 80ad 	bhi.w	80040e4 <_dtoa_r+0x484>
 8003f8a:	2d00      	cmp	r5, #0
 8003f8c:	f000 80aa 	beq.w	80040e4 <_dtoa_r+0x484>
 8003f90:	f1ba 0f00 	cmp.w	sl, #0
 8003f94:	dd36      	ble.n	8004004 <_dtoa_r+0x3a4>
 8003f96:	4ac3      	ldr	r2, [pc, #780]	; (80042a4 <_dtoa_r+0x644>)
 8003f98:	f00a 030f 	and.w	r3, sl, #15
 8003f9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003fa0:	ed93 7b00 	vldr	d7, [r3]
 8003fa4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003fa8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8003fac:	eeb0 8a47 	vmov.f32	s16, s14
 8003fb0:	eef0 8a67 	vmov.f32	s17, s15
 8003fb4:	d016      	beq.n	8003fe4 <_dtoa_r+0x384>
 8003fb6:	4bbc      	ldr	r3, [pc, #752]	; (80042a8 <_dtoa_r+0x648>)
 8003fb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003fbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fc0:	f7fc fc54 	bl	800086c <__aeabi_ddiv>
 8003fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fc8:	f007 070f 	and.w	r7, r7, #15
 8003fcc:	2503      	movs	r5, #3
 8003fce:	4eb6      	ldr	r6, [pc, #728]	; (80042a8 <_dtoa_r+0x648>)
 8003fd0:	b957      	cbnz	r7, 8003fe8 <_dtoa_r+0x388>
 8003fd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fd6:	ec53 2b18 	vmov	r2, r3, d8
 8003fda:	f7fc fc47 	bl	800086c <__aeabi_ddiv>
 8003fde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fe2:	e029      	b.n	8004038 <_dtoa_r+0x3d8>
 8003fe4:	2502      	movs	r5, #2
 8003fe6:	e7f2      	b.n	8003fce <_dtoa_r+0x36e>
 8003fe8:	07f9      	lsls	r1, r7, #31
 8003fea:	d508      	bpl.n	8003ffe <_dtoa_r+0x39e>
 8003fec:	ec51 0b18 	vmov	r0, r1, d8
 8003ff0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003ff4:	f7fc fb10 	bl	8000618 <__aeabi_dmul>
 8003ff8:	ec41 0b18 	vmov	d8, r0, r1
 8003ffc:	3501      	adds	r5, #1
 8003ffe:	107f      	asrs	r7, r7, #1
 8004000:	3608      	adds	r6, #8
 8004002:	e7e5      	b.n	8003fd0 <_dtoa_r+0x370>
 8004004:	f000 80a6 	beq.w	8004154 <_dtoa_r+0x4f4>
 8004008:	f1ca 0600 	rsb	r6, sl, #0
 800400c:	4ba5      	ldr	r3, [pc, #660]	; (80042a4 <_dtoa_r+0x644>)
 800400e:	4fa6      	ldr	r7, [pc, #664]	; (80042a8 <_dtoa_r+0x648>)
 8004010:	f006 020f 	and.w	r2, r6, #15
 8004014:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004020:	f7fc fafa 	bl	8000618 <__aeabi_dmul>
 8004024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004028:	1136      	asrs	r6, r6, #4
 800402a:	2300      	movs	r3, #0
 800402c:	2502      	movs	r5, #2
 800402e:	2e00      	cmp	r6, #0
 8004030:	f040 8085 	bne.w	800413e <_dtoa_r+0x4de>
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1d2      	bne.n	8003fde <_dtoa_r+0x37e>
 8004038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 808c 	beq.w	8004158 <_dtoa_r+0x4f8>
 8004040:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004044:	4b99      	ldr	r3, [pc, #612]	; (80042ac <_dtoa_r+0x64c>)
 8004046:	2200      	movs	r2, #0
 8004048:	4630      	mov	r0, r6
 800404a:	4639      	mov	r1, r7
 800404c:	f7fc fd56 	bl	8000afc <__aeabi_dcmplt>
 8004050:	2800      	cmp	r0, #0
 8004052:	f000 8081 	beq.w	8004158 <_dtoa_r+0x4f8>
 8004056:	9b01      	ldr	r3, [sp, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d07d      	beq.n	8004158 <_dtoa_r+0x4f8>
 800405c:	f1b9 0f00 	cmp.w	r9, #0
 8004060:	dd3c      	ble.n	80040dc <_dtoa_r+0x47c>
 8004062:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004066:	9307      	str	r3, [sp, #28]
 8004068:	2200      	movs	r2, #0
 800406a:	4b91      	ldr	r3, [pc, #580]	; (80042b0 <_dtoa_r+0x650>)
 800406c:	4630      	mov	r0, r6
 800406e:	4639      	mov	r1, r7
 8004070:	f7fc fad2 	bl	8000618 <__aeabi_dmul>
 8004074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004078:	3501      	adds	r5, #1
 800407a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800407e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004082:	4628      	mov	r0, r5
 8004084:	f7fc fa5e 	bl	8000544 <__aeabi_i2d>
 8004088:	4632      	mov	r2, r6
 800408a:	463b      	mov	r3, r7
 800408c:	f7fc fac4 	bl	8000618 <__aeabi_dmul>
 8004090:	4b88      	ldr	r3, [pc, #544]	; (80042b4 <_dtoa_r+0x654>)
 8004092:	2200      	movs	r2, #0
 8004094:	f7fc f90a 	bl	80002ac <__adddf3>
 8004098:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800409c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040a0:	9303      	str	r3, [sp, #12]
 80040a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d15c      	bne.n	8004162 <_dtoa_r+0x502>
 80040a8:	4b83      	ldr	r3, [pc, #524]	; (80042b8 <_dtoa_r+0x658>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	4630      	mov	r0, r6
 80040ae:	4639      	mov	r1, r7
 80040b0:	f7fc f8fa 	bl	80002a8 <__aeabi_dsub>
 80040b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040b8:	4606      	mov	r6, r0
 80040ba:	460f      	mov	r7, r1
 80040bc:	f7fc fd3c 	bl	8000b38 <__aeabi_dcmpgt>
 80040c0:	2800      	cmp	r0, #0
 80040c2:	f040 8296 	bne.w	80045f2 <_dtoa_r+0x992>
 80040c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80040ca:	4630      	mov	r0, r6
 80040cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040d0:	4639      	mov	r1, r7
 80040d2:	f7fc fd13 	bl	8000afc <__aeabi_dcmplt>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	f040 8288 	bne.w	80045ec <_dtoa_r+0x98c>
 80040dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80040e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f2c0 8158 	blt.w	800439c <_dtoa_r+0x73c>
 80040ec:	f1ba 0f0e 	cmp.w	sl, #14
 80040f0:	f300 8154 	bgt.w	800439c <_dtoa_r+0x73c>
 80040f4:	4b6b      	ldr	r3, [pc, #428]	; (80042a4 <_dtoa_r+0x644>)
 80040f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80040fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80040fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004100:	2b00      	cmp	r3, #0
 8004102:	f280 80e3 	bge.w	80042cc <_dtoa_r+0x66c>
 8004106:	9b01      	ldr	r3, [sp, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	f300 80df 	bgt.w	80042cc <_dtoa_r+0x66c>
 800410e:	f040 826d 	bne.w	80045ec <_dtoa_r+0x98c>
 8004112:	4b69      	ldr	r3, [pc, #420]	; (80042b8 <_dtoa_r+0x658>)
 8004114:	2200      	movs	r2, #0
 8004116:	4640      	mov	r0, r8
 8004118:	4649      	mov	r1, r9
 800411a:	f7fc fa7d 	bl	8000618 <__aeabi_dmul>
 800411e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004122:	f7fc fcff 	bl	8000b24 <__aeabi_dcmpge>
 8004126:	9e01      	ldr	r6, [sp, #4]
 8004128:	4637      	mov	r7, r6
 800412a:	2800      	cmp	r0, #0
 800412c:	f040 8243 	bne.w	80045b6 <_dtoa_r+0x956>
 8004130:	9d00      	ldr	r5, [sp, #0]
 8004132:	2331      	movs	r3, #49	; 0x31
 8004134:	f805 3b01 	strb.w	r3, [r5], #1
 8004138:	f10a 0a01 	add.w	sl, sl, #1
 800413c:	e23f      	b.n	80045be <_dtoa_r+0x95e>
 800413e:	07f2      	lsls	r2, r6, #31
 8004140:	d505      	bpl.n	800414e <_dtoa_r+0x4ee>
 8004142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004146:	f7fc fa67 	bl	8000618 <__aeabi_dmul>
 800414a:	3501      	adds	r5, #1
 800414c:	2301      	movs	r3, #1
 800414e:	1076      	asrs	r6, r6, #1
 8004150:	3708      	adds	r7, #8
 8004152:	e76c      	b.n	800402e <_dtoa_r+0x3ce>
 8004154:	2502      	movs	r5, #2
 8004156:	e76f      	b.n	8004038 <_dtoa_r+0x3d8>
 8004158:	9b01      	ldr	r3, [sp, #4]
 800415a:	f8cd a01c 	str.w	sl, [sp, #28]
 800415e:	930c      	str	r3, [sp, #48]	; 0x30
 8004160:	e78d      	b.n	800407e <_dtoa_r+0x41e>
 8004162:	9900      	ldr	r1, [sp, #0]
 8004164:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004166:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004168:	4b4e      	ldr	r3, [pc, #312]	; (80042a4 <_dtoa_r+0x644>)
 800416a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800416e:	4401      	add	r1, r0
 8004170:	9102      	str	r1, [sp, #8]
 8004172:	9908      	ldr	r1, [sp, #32]
 8004174:	eeb0 8a47 	vmov.f32	s16, s14
 8004178:	eef0 8a67 	vmov.f32	s17, s15
 800417c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004180:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004184:	2900      	cmp	r1, #0
 8004186:	d045      	beq.n	8004214 <_dtoa_r+0x5b4>
 8004188:	494c      	ldr	r1, [pc, #304]	; (80042bc <_dtoa_r+0x65c>)
 800418a:	2000      	movs	r0, #0
 800418c:	f7fc fb6e 	bl	800086c <__aeabi_ddiv>
 8004190:	ec53 2b18 	vmov	r2, r3, d8
 8004194:	f7fc f888 	bl	80002a8 <__aeabi_dsub>
 8004198:	9d00      	ldr	r5, [sp, #0]
 800419a:	ec41 0b18 	vmov	d8, r0, r1
 800419e:	4639      	mov	r1, r7
 80041a0:	4630      	mov	r0, r6
 80041a2:	f7fc fce9 	bl	8000b78 <__aeabi_d2iz>
 80041a6:	900c      	str	r0, [sp, #48]	; 0x30
 80041a8:	f7fc f9cc 	bl	8000544 <__aeabi_i2d>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4630      	mov	r0, r6
 80041b2:	4639      	mov	r1, r7
 80041b4:	f7fc f878 	bl	80002a8 <__aeabi_dsub>
 80041b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041ba:	3330      	adds	r3, #48	; 0x30
 80041bc:	f805 3b01 	strb.w	r3, [r5], #1
 80041c0:	ec53 2b18 	vmov	r2, r3, d8
 80041c4:	4606      	mov	r6, r0
 80041c6:	460f      	mov	r7, r1
 80041c8:	f7fc fc98 	bl	8000afc <__aeabi_dcmplt>
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d165      	bne.n	800429c <_dtoa_r+0x63c>
 80041d0:	4632      	mov	r2, r6
 80041d2:	463b      	mov	r3, r7
 80041d4:	4935      	ldr	r1, [pc, #212]	; (80042ac <_dtoa_r+0x64c>)
 80041d6:	2000      	movs	r0, #0
 80041d8:	f7fc f866 	bl	80002a8 <__aeabi_dsub>
 80041dc:	ec53 2b18 	vmov	r2, r3, d8
 80041e0:	f7fc fc8c 	bl	8000afc <__aeabi_dcmplt>
 80041e4:	2800      	cmp	r0, #0
 80041e6:	f040 80b9 	bne.w	800435c <_dtoa_r+0x6fc>
 80041ea:	9b02      	ldr	r3, [sp, #8]
 80041ec:	429d      	cmp	r5, r3
 80041ee:	f43f af75 	beq.w	80040dc <_dtoa_r+0x47c>
 80041f2:	4b2f      	ldr	r3, [pc, #188]	; (80042b0 <_dtoa_r+0x650>)
 80041f4:	ec51 0b18 	vmov	r0, r1, d8
 80041f8:	2200      	movs	r2, #0
 80041fa:	f7fc fa0d 	bl	8000618 <__aeabi_dmul>
 80041fe:	4b2c      	ldr	r3, [pc, #176]	; (80042b0 <_dtoa_r+0x650>)
 8004200:	ec41 0b18 	vmov	d8, r0, r1
 8004204:	2200      	movs	r2, #0
 8004206:	4630      	mov	r0, r6
 8004208:	4639      	mov	r1, r7
 800420a:	f7fc fa05 	bl	8000618 <__aeabi_dmul>
 800420e:	4606      	mov	r6, r0
 8004210:	460f      	mov	r7, r1
 8004212:	e7c4      	b.n	800419e <_dtoa_r+0x53e>
 8004214:	ec51 0b17 	vmov	r0, r1, d7
 8004218:	f7fc f9fe 	bl	8000618 <__aeabi_dmul>
 800421c:	9b02      	ldr	r3, [sp, #8]
 800421e:	9d00      	ldr	r5, [sp, #0]
 8004220:	930c      	str	r3, [sp, #48]	; 0x30
 8004222:	ec41 0b18 	vmov	d8, r0, r1
 8004226:	4639      	mov	r1, r7
 8004228:	4630      	mov	r0, r6
 800422a:	f7fc fca5 	bl	8000b78 <__aeabi_d2iz>
 800422e:	9011      	str	r0, [sp, #68]	; 0x44
 8004230:	f7fc f988 	bl	8000544 <__aeabi_i2d>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4630      	mov	r0, r6
 800423a:	4639      	mov	r1, r7
 800423c:	f7fc f834 	bl	80002a8 <__aeabi_dsub>
 8004240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004242:	3330      	adds	r3, #48	; 0x30
 8004244:	f805 3b01 	strb.w	r3, [r5], #1
 8004248:	9b02      	ldr	r3, [sp, #8]
 800424a:	429d      	cmp	r5, r3
 800424c:	4606      	mov	r6, r0
 800424e:	460f      	mov	r7, r1
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	d134      	bne.n	80042c0 <_dtoa_r+0x660>
 8004256:	4b19      	ldr	r3, [pc, #100]	; (80042bc <_dtoa_r+0x65c>)
 8004258:	ec51 0b18 	vmov	r0, r1, d8
 800425c:	f7fc f826 	bl	80002ac <__adddf3>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4630      	mov	r0, r6
 8004266:	4639      	mov	r1, r7
 8004268:	f7fc fc66 	bl	8000b38 <__aeabi_dcmpgt>
 800426c:	2800      	cmp	r0, #0
 800426e:	d175      	bne.n	800435c <_dtoa_r+0x6fc>
 8004270:	ec53 2b18 	vmov	r2, r3, d8
 8004274:	4911      	ldr	r1, [pc, #68]	; (80042bc <_dtoa_r+0x65c>)
 8004276:	2000      	movs	r0, #0
 8004278:	f7fc f816 	bl	80002a8 <__aeabi_dsub>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4630      	mov	r0, r6
 8004282:	4639      	mov	r1, r7
 8004284:	f7fc fc3a 	bl	8000afc <__aeabi_dcmplt>
 8004288:	2800      	cmp	r0, #0
 800428a:	f43f af27 	beq.w	80040dc <_dtoa_r+0x47c>
 800428e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004290:	1e6b      	subs	r3, r5, #1
 8004292:	930c      	str	r3, [sp, #48]	; 0x30
 8004294:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004298:	2b30      	cmp	r3, #48	; 0x30
 800429a:	d0f8      	beq.n	800428e <_dtoa_r+0x62e>
 800429c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80042a0:	e04a      	b.n	8004338 <_dtoa_r+0x6d8>
 80042a2:	bf00      	nop
 80042a4:	08005d98 	.word	0x08005d98
 80042a8:	08005d70 	.word	0x08005d70
 80042ac:	3ff00000 	.word	0x3ff00000
 80042b0:	40240000 	.word	0x40240000
 80042b4:	401c0000 	.word	0x401c0000
 80042b8:	40140000 	.word	0x40140000
 80042bc:	3fe00000 	.word	0x3fe00000
 80042c0:	4baf      	ldr	r3, [pc, #700]	; (8004580 <_dtoa_r+0x920>)
 80042c2:	f7fc f9a9 	bl	8000618 <__aeabi_dmul>
 80042c6:	4606      	mov	r6, r0
 80042c8:	460f      	mov	r7, r1
 80042ca:	e7ac      	b.n	8004226 <_dtoa_r+0x5c6>
 80042cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80042d0:	9d00      	ldr	r5, [sp, #0]
 80042d2:	4642      	mov	r2, r8
 80042d4:	464b      	mov	r3, r9
 80042d6:	4630      	mov	r0, r6
 80042d8:	4639      	mov	r1, r7
 80042da:	f7fc fac7 	bl	800086c <__aeabi_ddiv>
 80042de:	f7fc fc4b 	bl	8000b78 <__aeabi_d2iz>
 80042e2:	9002      	str	r0, [sp, #8]
 80042e4:	f7fc f92e 	bl	8000544 <__aeabi_i2d>
 80042e8:	4642      	mov	r2, r8
 80042ea:	464b      	mov	r3, r9
 80042ec:	f7fc f994 	bl	8000618 <__aeabi_dmul>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4630      	mov	r0, r6
 80042f6:	4639      	mov	r1, r7
 80042f8:	f7fb ffd6 	bl	80002a8 <__aeabi_dsub>
 80042fc:	9e02      	ldr	r6, [sp, #8]
 80042fe:	9f01      	ldr	r7, [sp, #4]
 8004300:	3630      	adds	r6, #48	; 0x30
 8004302:	f805 6b01 	strb.w	r6, [r5], #1
 8004306:	9e00      	ldr	r6, [sp, #0]
 8004308:	1bae      	subs	r6, r5, r6
 800430a:	42b7      	cmp	r7, r6
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	d137      	bne.n	8004382 <_dtoa_r+0x722>
 8004312:	f7fb ffcb 	bl	80002ac <__adddf3>
 8004316:	4642      	mov	r2, r8
 8004318:	464b      	mov	r3, r9
 800431a:	4606      	mov	r6, r0
 800431c:	460f      	mov	r7, r1
 800431e:	f7fc fc0b 	bl	8000b38 <__aeabi_dcmpgt>
 8004322:	b9c8      	cbnz	r0, 8004358 <_dtoa_r+0x6f8>
 8004324:	4642      	mov	r2, r8
 8004326:	464b      	mov	r3, r9
 8004328:	4630      	mov	r0, r6
 800432a:	4639      	mov	r1, r7
 800432c:	f7fc fbdc 	bl	8000ae8 <__aeabi_dcmpeq>
 8004330:	b110      	cbz	r0, 8004338 <_dtoa_r+0x6d8>
 8004332:	9b02      	ldr	r3, [sp, #8]
 8004334:	07d9      	lsls	r1, r3, #31
 8004336:	d40f      	bmi.n	8004358 <_dtoa_r+0x6f8>
 8004338:	4620      	mov	r0, r4
 800433a:	4659      	mov	r1, fp
 800433c:	f000 fac8 	bl	80048d0 <_Bfree>
 8004340:	2300      	movs	r3, #0
 8004342:	702b      	strb	r3, [r5, #0]
 8004344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004346:	f10a 0001 	add.w	r0, sl, #1
 800434a:	6018      	str	r0, [r3, #0]
 800434c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800434e:	2b00      	cmp	r3, #0
 8004350:	f43f acd8 	beq.w	8003d04 <_dtoa_r+0xa4>
 8004354:	601d      	str	r5, [r3, #0]
 8004356:	e4d5      	b.n	8003d04 <_dtoa_r+0xa4>
 8004358:	f8cd a01c 	str.w	sl, [sp, #28]
 800435c:	462b      	mov	r3, r5
 800435e:	461d      	mov	r5, r3
 8004360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004364:	2a39      	cmp	r2, #57	; 0x39
 8004366:	d108      	bne.n	800437a <_dtoa_r+0x71a>
 8004368:	9a00      	ldr	r2, [sp, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d1f7      	bne.n	800435e <_dtoa_r+0x6fe>
 800436e:	9a07      	ldr	r2, [sp, #28]
 8004370:	9900      	ldr	r1, [sp, #0]
 8004372:	3201      	adds	r2, #1
 8004374:	9207      	str	r2, [sp, #28]
 8004376:	2230      	movs	r2, #48	; 0x30
 8004378:	700a      	strb	r2, [r1, #0]
 800437a:	781a      	ldrb	r2, [r3, #0]
 800437c:	3201      	adds	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	e78c      	b.n	800429c <_dtoa_r+0x63c>
 8004382:	4b7f      	ldr	r3, [pc, #508]	; (8004580 <_dtoa_r+0x920>)
 8004384:	2200      	movs	r2, #0
 8004386:	f7fc f947 	bl	8000618 <__aeabi_dmul>
 800438a:	2200      	movs	r2, #0
 800438c:	2300      	movs	r3, #0
 800438e:	4606      	mov	r6, r0
 8004390:	460f      	mov	r7, r1
 8004392:	f7fc fba9 	bl	8000ae8 <__aeabi_dcmpeq>
 8004396:	2800      	cmp	r0, #0
 8004398:	d09b      	beq.n	80042d2 <_dtoa_r+0x672>
 800439a:	e7cd      	b.n	8004338 <_dtoa_r+0x6d8>
 800439c:	9a08      	ldr	r2, [sp, #32]
 800439e:	2a00      	cmp	r2, #0
 80043a0:	f000 80c4 	beq.w	800452c <_dtoa_r+0x8cc>
 80043a4:	9a05      	ldr	r2, [sp, #20]
 80043a6:	2a01      	cmp	r2, #1
 80043a8:	f300 80a8 	bgt.w	80044fc <_dtoa_r+0x89c>
 80043ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80043ae:	2a00      	cmp	r2, #0
 80043b0:	f000 80a0 	beq.w	80044f4 <_dtoa_r+0x894>
 80043b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80043b8:	9e06      	ldr	r6, [sp, #24]
 80043ba:	4645      	mov	r5, r8
 80043bc:	9a04      	ldr	r2, [sp, #16]
 80043be:	2101      	movs	r1, #1
 80043c0:	441a      	add	r2, r3
 80043c2:	4620      	mov	r0, r4
 80043c4:	4498      	add	r8, r3
 80043c6:	9204      	str	r2, [sp, #16]
 80043c8:	f000 fb3e 	bl	8004a48 <__i2b>
 80043cc:	4607      	mov	r7, r0
 80043ce:	2d00      	cmp	r5, #0
 80043d0:	dd0b      	ble.n	80043ea <_dtoa_r+0x78a>
 80043d2:	9b04      	ldr	r3, [sp, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	dd08      	ble.n	80043ea <_dtoa_r+0x78a>
 80043d8:	42ab      	cmp	r3, r5
 80043da:	9a04      	ldr	r2, [sp, #16]
 80043dc:	bfa8      	it	ge
 80043de:	462b      	movge	r3, r5
 80043e0:	eba8 0803 	sub.w	r8, r8, r3
 80043e4:	1aed      	subs	r5, r5, r3
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	9304      	str	r3, [sp, #16]
 80043ea:	9b06      	ldr	r3, [sp, #24]
 80043ec:	b1fb      	cbz	r3, 800442e <_dtoa_r+0x7ce>
 80043ee:	9b08      	ldr	r3, [sp, #32]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 809f 	beq.w	8004534 <_dtoa_r+0x8d4>
 80043f6:	2e00      	cmp	r6, #0
 80043f8:	dd11      	ble.n	800441e <_dtoa_r+0x7be>
 80043fa:	4639      	mov	r1, r7
 80043fc:	4632      	mov	r2, r6
 80043fe:	4620      	mov	r0, r4
 8004400:	f000 fbde 	bl	8004bc0 <__pow5mult>
 8004404:	465a      	mov	r2, fp
 8004406:	4601      	mov	r1, r0
 8004408:	4607      	mov	r7, r0
 800440a:	4620      	mov	r0, r4
 800440c:	f000 fb32 	bl	8004a74 <__multiply>
 8004410:	4659      	mov	r1, fp
 8004412:	9007      	str	r0, [sp, #28]
 8004414:	4620      	mov	r0, r4
 8004416:	f000 fa5b 	bl	80048d0 <_Bfree>
 800441a:	9b07      	ldr	r3, [sp, #28]
 800441c:	469b      	mov	fp, r3
 800441e:	9b06      	ldr	r3, [sp, #24]
 8004420:	1b9a      	subs	r2, r3, r6
 8004422:	d004      	beq.n	800442e <_dtoa_r+0x7ce>
 8004424:	4659      	mov	r1, fp
 8004426:	4620      	mov	r0, r4
 8004428:	f000 fbca 	bl	8004bc0 <__pow5mult>
 800442c:	4683      	mov	fp, r0
 800442e:	2101      	movs	r1, #1
 8004430:	4620      	mov	r0, r4
 8004432:	f000 fb09 	bl	8004a48 <__i2b>
 8004436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004438:	2b00      	cmp	r3, #0
 800443a:	4606      	mov	r6, r0
 800443c:	dd7c      	ble.n	8004538 <_dtoa_r+0x8d8>
 800443e:	461a      	mov	r2, r3
 8004440:	4601      	mov	r1, r0
 8004442:	4620      	mov	r0, r4
 8004444:	f000 fbbc 	bl	8004bc0 <__pow5mult>
 8004448:	9b05      	ldr	r3, [sp, #20]
 800444a:	2b01      	cmp	r3, #1
 800444c:	4606      	mov	r6, r0
 800444e:	dd76      	ble.n	800453e <_dtoa_r+0x8de>
 8004450:	2300      	movs	r3, #0
 8004452:	9306      	str	r3, [sp, #24]
 8004454:	6933      	ldr	r3, [r6, #16]
 8004456:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800445a:	6918      	ldr	r0, [r3, #16]
 800445c:	f000 faa4 	bl	80049a8 <__hi0bits>
 8004460:	f1c0 0020 	rsb	r0, r0, #32
 8004464:	9b04      	ldr	r3, [sp, #16]
 8004466:	4418      	add	r0, r3
 8004468:	f010 001f 	ands.w	r0, r0, #31
 800446c:	f000 8086 	beq.w	800457c <_dtoa_r+0x91c>
 8004470:	f1c0 0320 	rsb	r3, r0, #32
 8004474:	2b04      	cmp	r3, #4
 8004476:	dd7f      	ble.n	8004578 <_dtoa_r+0x918>
 8004478:	f1c0 001c 	rsb	r0, r0, #28
 800447c:	9b04      	ldr	r3, [sp, #16]
 800447e:	4403      	add	r3, r0
 8004480:	4480      	add	r8, r0
 8004482:	4405      	add	r5, r0
 8004484:	9304      	str	r3, [sp, #16]
 8004486:	f1b8 0f00 	cmp.w	r8, #0
 800448a:	dd05      	ble.n	8004498 <_dtoa_r+0x838>
 800448c:	4659      	mov	r1, fp
 800448e:	4642      	mov	r2, r8
 8004490:	4620      	mov	r0, r4
 8004492:	f000 fbef 	bl	8004c74 <__lshift>
 8004496:	4683      	mov	fp, r0
 8004498:	9b04      	ldr	r3, [sp, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	dd05      	ble.n	80044aa <_dtoa_r+0x84a>
 800449e:	4631      	mov	r1, r6
 80044a0:	461a      	mov	r2, r3
 80044a2:	4620      	mov	r0, r4
 80044a4:	f000 fbe6 	bl	8004c74 <__lshift>
 80044a8:	4606      	mov	r6, r0
 80044aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d069      	beq.n	8004584 <_dtoa_r+0x924>
 80044b0:	4631      	mov	r1, r6
 80044b2:	4658      	mov	r0, fp
 80044b4:	f000 fc4a 	bl	8004d4c <__mcmp>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	da63      	bge.n	8004584 <_dtoa_r+0x924>
 80044bc:	2300      	movs	r3, #0
 80044be:	4659      	mov	r1, fp
 80044c0:	220a      	movs	r2, #10
 80044c2:	4620      	mov	r0, r4
 80044c4:	f000 fa26 	bl	8004914 <__multadd>
 80044c8:	9b08      	ldr	r3, [sp, #32]
 80044ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044ce:	4683      	mov	fp, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 818f 	beq.w	80047f4 <_dtoa_r+0xb94>
 80044d6:	4639      	mov	r1, r7
 80044d8:	2300      	movs	r3, #0
 80044da:	220a      	movs	r2, #10
 80044dc:	4620      	mov	r0, r4
 80044de:	f000 fa19 	bl	8004914 <__multadd>
 80044e2:	f1b9 0f00 	cmp.w	r9, #0
 80044e6:	4607      	mov	r7, r0
 80044e8:	f300 808e 	bgt.w	8004608 <_dtoa_r+0x9a8>
 80044ec:	9b05      	ldr	r3, [sp, #20]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	dc50      	bgt.n	8004594 <_dtoa_r+0x934>
 80044f2:	e089      	b.n	8004608 <_dtoa_r+0x9a8>
 80044f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80044f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80044fa:	e75d      	b.n	80043b8 <_dtoa_r+0x758>
 80044fc:	9b01      	ldr	r3, [sp, #4]
 80044fe:	1e5e      	subs	r6, r3, #1
 8004500:	9b06      	ldr	r3, [sp, #24]
 8004502:	42b3      	cmp	r3, r6
 8004504:	bfbf      	itttt	lt
 8004506:	9b06      	ldrlt	r3, [sp, #24]
 8004508:	9606      	strlt	r6, [sp, #24]
 800450a:	1af2      	sublt	r2, r6, r3
 800450c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800450e:	bfb6      	itet	lt
 8004510:	189b      	addlt	r3, r3, r2
 8004512:	1b9e      	subge	r6, r3, r6
 8004514:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004516:	9b01      	ldr	r3, [sp, #4]
 8004518:	bfb8      	it	lt
 800451a:	2600      	movlt	r6, #0
 800451c:	2b00      	cmp	r3, #0
 800451e:	bfb5      	itete	lt
 8004520:	eba8 0503 	sublt.w	r5, r8, r3
 8004524:	9b01      	ldrge	r3, [sp, #4]
 8004526:	2300      	movlt	r3, #0
 8004528:	4645      	movge	r5, r8
 800452a:	e747      	b.n	80043bc <_dtoa_r+0x75c>
 800452c:	9e06      	ldr	r6, [sp, #24]
 800452e:	9f08      	ldr	r7, [sp, #32]
 8004530:	4645      	mov	r5, r8
 8004532:	e74c      	b.n	80043ce <_dtoa_r+0x76e>
 8004534:	9a06      	ldr	r2, [sp, #24]
 8004536:	e775      	b.n	8004424 <_dtoa_r+0x7c4>
 8004538:	9b05      	ldr	r3, [sp, #20]
 800453a:	2b01      	cmp	r3, #1
 800453c:	dc18      	bgt.n	8004570 <_dtoa_r+0x910>
 800453e:	9b02      	ldr	r3, [sp, #8]
 8004540:	b9b3      	cbnz	r3, 8004570 <_dtoa_r+0x910>
 8004542:	9b03      	ldr	r3, [sp, #12]
 8004544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004548:	b9a3      	cbnz	r3, 8004574 <_dtoa_r+0x914>
 800454a:	9b03      	ldr	r3, [sp, #12]
 800454c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004550:	0d1b      	lsrs	r3, r3, #20
 8004552:	051b      	lsls	r3, r3, #20
 8004554:	b12b      	cbz	r3, 8004562 <_dtoa_r+0x902>
 8004556:	9b04      	ldr	r3, [sp, #16]
 8004558:	3301      	adds	r3, #1
 800455a:	9304      	str	r3, [sp, #16]
 800455c:	f108 0801 	add.w	r8, r8, #1
 8004560:	2301      	movs	r3, #1
 8004562:	9306      	str	r3, [sp, #24]
 8004564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004566:	2b00      	cmp	r3, #0
 8004568:	f47f af74 	bne.w	8004454 <_dtoa_r+0x7f4>
 800456c:	2001      	movs	r0, #1
 800456e:	e779      	b.n	8004464 <_dtoa_r+0x804>
 8004570:	2300      	movs	r3, #0
 8004572:	e7f6      	b.n	8004562 <_dtoa_r+0x902>
 8004574:	9b02      	ldr	r3, [sp, #8]
 8004576:	e7f4      	b.n	8004562 <_dtoa_r+0x902>
 8004578:	d085      	beq.n	8004486 <_dtoa_r+0x826>
 800457a:	4618      	mov	r0, r3
 800457c:	301c      	adds	r0, #28
 800457e:	e77d      	b.n	800447c <_dtoa_r+0x81c>
 8004580:	40240000 	.word	0x40240000
 8004584:	9b01      	ldr	r3, [sp, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	dc38      	bgt.n	80045fc <_dtoa_r+0x99c>
 800458a:	9b05      	ldr	r3, [sp, #20]
 800458c:	2b02      	cmp	r3, #2
 800458e:	dd35      	ble.n	80045fc <_dtoa_r+0x99c>
 8004590:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004594:	f1b9 0f00 	cmp.w	r9, #0
 8004598:	d10d      	bne.n	80045b6 <_dtoa_r+0x956>
 800459a:	4631      	mov	r1, r6
 800459c:	464b      	mov	r3, r9
 800459e:	2205      	movs	r2, #5
 80045a0:	4620      	mov	r0, r4
 80045a2:	f000 f9b7 	bl	8004914 <__multadd>
 80045a6:	4601      	mov	r1, r0
 80045a8:	4606      	mov	r6, r0
 80045aa:	4658      	mov	r0, fp
 80045ac:	f000 fbce 	bl	8004d4c <__mcmp>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	f73f adbd 	bgt.w	8004130 <_dtoa_r+0x4d0>
 80045b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b8:	9d00      	ldr	r5, [sp, #0]
 80045ba:	ea6f 0a03 	mvn.w	sl, r3
 80045be:	f04f 0800 	mov.w	r8, #0
 80045c2:	4631      	mov	r1, r6
 80045c4:	4620      	mov	r0, r4
 80045c6:	f000 f983 	bl	80048d0 <_Bfree>
 80045ca:	2f00      	cmp	r7, #0
 80045cc:	f43f aeb4 	beq.w	8004338 <_dtoa_r+0x6d8>
 80045d0:	f1b8 0f00 	cmp.w	r8, #0
 80045d4:	d005      	beq.n	80045e2 <_dtoa_r+0x982>
 80045d6:	45b8      	cmp	r8, r7
 80045d8:	d003      	beq.n	80045e2 <_dtoa_r+0x982>
 80045da:	4641      	mov	r1, r8
 80045dc:	4620      	mov	r0, r4
 80045de:	f000 f977 	bl	80048d0 <_Bfree>
 80045e2:	4639      	mov	r1, r7
 80045e4:	4620      	mov	r0, r4
 80045e6:	f000 f973 	bl	80048d0 <_Bfree>
 80045ea:	e6a5      	b.n	8004338 <_dtoa_r+0x6d8>
 80045ec:	2600      	movs	r6, #0
 80045ee:	4637      	mov	r7, r6
 80045f0:	e7e1      	b.n	80045b6 <_dtoa_r+0x956>
 80045f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80045f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80045f8:	4637      	mov	r7, r6
 80045fa:	e599      	b.n	8004130 <_dtoa_r+0x4d0>
 80045fc:	9b08      	ldr	r3, [sp, #32]
 80045fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 80fd 	beq.w	8004802 <_dtoa_r+0xba2>
 8004608:	2d00      	cmp	r5, #0
 800460a:	dd05      	ble.n	8004618 <_dtoa_r+0x9b8>
 800460c:	4639      	mov	r1, r7
 800460e:	462a      	mov	r2, r5
 8004610:	4620      	mov	r0, r4
 8004612:	f000 fb2f 	bl	8004c74 <__lshift>
 8004616:	4607      	mov	r7, r0
 8004618:	9b06      	ldr	r3, [sp, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d05c      	beq.n	80046d8 <_dtoa_r+0xa78>
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4620      	mov	r0, r4
 8004622:	f000 f915 	bl	8004850 <_Balloc>
 8004626:	4605      	mov	r5, r0
 8004628:	b928      	cbnz	r0, 8004636 <_dtoa_r+0x9d6>
 800462a:	4b80      	ldr	r3, [pc, #512]	; (800482c <_dtoa_r+0xbcc>)
 800462c:	4602      	mov	r2, r0
 800462e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004632:	f7ff bb2e 	b.w	8003c92 <_dtoa_r+0x32>
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	3202      	adds	r2, #2
 800463a:	0092      	lsls	r2, r2, #2
 800463c:	f107 010c 	add.w	r1, r7, #12
 8004640:	300c      	adds	r0, #12
 8004642:	f7fe fe01 	bl	8003248 <memcpy>
 8004646:	2201      	movs	r2, #1
 8004648:	4629      	mov	r1, r5
 800464a:	4620      	mov	r0, r4
 800464c:	f000 fb12 	bl	8004c74 <__lshift>
 8004650:	9b00      	ldr	r3, [sp, #0]
 8004652:	3301      	adds	r3, #1
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	9b00      	ldr	r3, [sp, #0]
 8004658:	444b      	add	r3, r9
 800465a:	9307      	str	r3, [sp, #28]
 800465c:	9b02      	ldr	r3, [sp, #8]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	46b8      	mov	r8, r7
 8004664:	9306      	str	r3, [sp, #24]
 8004666:	4607      	mov	r7, r0
 8004668:	9b01      	ldr	r3, [sp, #4]
 800466a:	4631      	mov	r1, r6
 800466c:	3b01      	subs	r3, #1
 800466e:	4658      	mov	r0, fp
 8004670:	9302      	str	r3, [sp, #8]
 8004672:	f7ff fa69 	bl	8003b48 <quorem>
 8004676:	4603      	mov	r3, r0
 8004678:	3330      	adds	r3, #48	; 0x30
 800467a:	9004      	str	r0, [sp, #16]
 800467c:	4641      	mov	r1, r8
 800467e:	4658      	mov	r0, fp
 8004680:	9308      	str	r3, [sp, #32]
 8004682:	f000 fb63 	bl	8004d4c <__mcmp>
 8004686:	463a      	mov	r2, r7
 8004688:	4681      	mov	r9, r0
 800468a:	4631      	mov	r1, r6
 800468c:	4620      	mov	r0, r4
 800468e:	f000 fb79 	bl	8004d84 <__mdiff>
 8004692:	68c2      	ldr	r2, [r0, #12]
 8004694:	9b08      	ldr	r3, [sp, #32]
 8004696:	4605      	mov	r5, r0
 8004698:	bb02      	cbnz	r2, 80046dc <_dtoa_r+0xa7c>
 800469a:	4601      	mov	r1, r0
 800469c:	4658      	mov	r0, fp
 800469e:	f000 fb55 	bl	8004d4c <__mcmp>
 80046a2:	9b08      	ldr	r3, [sp, #32]
 80046a4:	4602      	mov	r2, r0
 80046a6:	4629      	mov	r1, r5
 80046a8:	4620      	mov	r0, r4
 80046aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80046ae:	f000 f90f 	bl	80048d0 <_Bfree>
 80046b2:	9b05      	ldr	r3, [sp, #20]
 80046b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046b6:	9d01      	ldr	r5, [sp, #4]
 80046b8:	ea43 0102 	orr.w	r1, r3, r2
 80046bc:	9b06      	ldr	r3, [sp, #24]
 80046be:	430b      	orrs	r3, r1
 80046c0:	9b08      	ldr	r3, [sp, #32]
 80046c2:	d10d      	bne.n	80046e0 <_dtoa_r+0xa80>
 80046c4:	2b39      	cmp	r3, #57	; 0x39
 80046c6:	d029      	beq.n	800471c <_dtoa_r+0xabc>
 80046c8:	f1b9 0f00 	cmp.w	r9, #0
 80046cc:	dd01      	ble.n	80046d2 <_dtoa_r+0xa72>
 80046ce:	9b04      	ldr	r3, [sp, #16]
 80046d0:	3331      	adds	r3, #49	; 0x31
 80046d2:	9a02      	ldr	r2, [sp, #8]
 80046d4:	7013      	strb	r3, [r2, #0]
 80046d6:	e774      	b.n	80045c2 <_dtoa_r+0x962>
 80046d8:	4638      	mov	r0, r7
 80046da:	e7b9      	b.n	8004650 <_dtoa_r+0x9f0>
 80046dc:	2201      	movs	r2, #1
 80046de:	e7e2      	b.n	80046a6 <_dtoa_r+0xa46>
 80046e0:	f1b9 0f00 	cmp.w	r9, #0
 80046e4:	db06      	blt.n	80046f4 <_dtoa_r+0xa94>
 80046e6:	9905      	ldr	r1, [sp, #20]
 80046e8:	ea41 0909 	orr.w	r9, r1, r9
 80046ec:	9906      	ldr	r1, [sp, #24]
 80046ee:	ea59 0101 	orrs.w	r1, r9, r1
 80046f2:	d120      	bne.n	8004736 <_dtoa_r+0xad6>
 80046f4:	2a00      	cmp	r2, #0
 80046f6:	ddec      	ble.n	80046d2 <_dtoa_r+0xa72>
 80046f8:	4659      	mov	r1, fp
 80046fa:	2201      	movs	r2, #1
 80046fc:	4620      	mov	r0, r4
 80046fe:	9301      	str	r3, [sp, #4]
 8004700:	f000 fab8 	bl	8004c74 <__lshift>
 8004704:	4631      	mov	r1, r6
 8004706:	4683      	mov	fp, r0
 8004708:	f000 fb20 	bl	8004d4c <__mcmp>
 800470c:	2800      	cmp	r0, #0
 800470e:	9b01      	ldr	r3, [sp, #4]
 8004710:	dc02      	bgt.n	8004718 <_dtoa_r+0xab8>
 8004712:	d1de      	bne.n	80046d2 <_dtoa_r+0xa72>
 8004714:	07da      	lsls	r2, r3, #31
 8004716:	d5dc      	bpl.n	80046d2 <_dtoa_r+0xa72>
 8004718:	2b39      	cmp	r3, #57	; 0x39
 800471a:	d1d8      	bne.n	80046ce <_dtoa_r+0xa6e>
 800471c:	9a02      	ldr	r2, [sp, #8]
 800471e:	2339      	movs	r3, #57	; 0x39
 8004720:	7013      	strb	r3, [r2, #0]
 8004722:	462b      	mov	r3, r5
 8004724:	461d      	mov	r5, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800472c:	2a39      	cmp	r2, #57	; 0x39
 800472e:	d050      	beq.n	80047d2 <_dtoa_r+0xb72>
 8004730:	3201      	adds	r2, #1
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e745      	b.n	80045c2 <_dtoa_r+0x962>
 8004736:	2a00      	cmp	r2, #0
 8004738:	dd03      	ble.n	8004742 <_dtoa_r+0xae2>
 800473a:	2b39      	cmp	r3, #57	; 0x39
 800473c:	d0ee      	beq.n	800471c <_dtoa_r+0xabc>
 800473e:	3301      	adds	r3, #1
 8004740:	e7c7      	b.n	80046d2 <_dtoa_r+0xa72>
 8004742:	9a01      	ldr	r2, [sp, #4]
 8004744:	9907      	ldr	r1, [sp, #28]
 8004746:	f802 3c01 	strb.w	r3, [r2, #-1]
 800474a:	428a      	cmp	r2, r1
 800474c:	d02a      	beq.n	80047a4 <_dtoa_r+0xb44>
 800474e:	4659      	mov	r1, fp
 8004750:	2300      	movs	r3, #0
 8004752:	220a      	movs	r2, #10
 8004754:	4620      	mov	r0, r4
 8004756:	f000 f8dd 	bl	8004914 <__multadd>
 800475a:	45b8      	cmp	r8, r7
 800475c:	4683      	mov	fp, r0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	f04f 020a 	mov.w	r2, #10
 8004766:	4641      	mov	r1, r8
 8004768:	4620      	mov	r0, r4
 800476a:	d107      	bne.n	800477c <_dtoa_r+0xb1c>
 800476c:	f000 f8d2 	bl	8004914 <__multadd>
 8004770:	4680      	mov	r8, r0
 8004772:	4607      	mov	r7, r0
 8004774:	9b01      	ldr	r3, [sp, #4]
 8004776:	3301      	adds	r3, #1
 8004778:	9301      	str	r3, [sp, #4]
 800477a:	e775      	b.n	8004668 <_dtoa_r+0xa08>
 800477c:	f000 f8ca 	bl	8004914 <__multadd>
 8004780:	4639      	mov	r1, r7
 8004782:	4680      	mov	r8, r0
 8004784:	2300      	movs	r3, #0
 8004786:	220a      	movs	r2, #10
 8004788:	4620      	mov	r0, r4
 800478a:	f000 f8c3 	bl	8004914 <__multadd>
 800478e:	4607      	mov	r7, r0
 8004790:	e7f0      	b.n	8004774 <_dtoa_r+0xb14>
 8004792:	f1b9 0f00 	cmp.w	r9, #0
 8004796:	9a00      	ldr	r2, [sp, #0]
 8004798:	bfcc      	ite	gt
 800479a:	464d      	movgt	r5, r9
 800479c:	2501      	movle	r5, #1
 800479e:	4415      	add	r5, r2
 80047a0:	f04f 0800 	mov.w	r8, #0
 80047a4:	4659      	mov	r1, fp
 80047a6:	2201      	movs	r2, #1
 80047a8:	4620      	mov	r0, r4
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	f000 fa62 	bl	8004c74 <__lshift>
 80047b0:	4631      	mov	r1, r6
 80047b2:	4683      	mov	fp, r0
 80047b4:	f000 faca 	bl	8004d4c <__mcmp>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	dcb2      	bgt.n	8004722 <_dtoa_r+0xac2>
 80047bc:	d102      	bne.n	80047c4 <_dtoa_r+0xb64>
 80047be:	9b01      	ldr	r3, [sp, #4]
 80047c0:	07db      	lsls	r3, r3, #31
 80047c2:	d4ae      	bmi.n	8004722 <_dtoa_r+0xac2>
 80047c4:	462b      	mov	r3, r5
 80047c6:	461d      	mov	r5, r3
 80047c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047cc:	2a30      	cmp	r2, #48	; 0x30
 80047ce:	d0fa      	beq.n	80047c6 <_dtoa_r+0xb66>
 80047d0:	e6f7      	b.n	80045c2 <_dtoa_r+0x962>
 80047d2:	9a00      	ldr	r2, [sp, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d1a5      	bne.n	8004724 <_dtoa_r+0xac4>
 80047d8:	f10a 0a01 	add.w	sl, sl, #1
 80047dc:	2331      	movs	r3, #49	; 0x31
 80047de:	e779      	b.n	80046d4 <_dtoa_r+0xa74>
 80047e0:	4b13      	ldr	r3, [pc, #76]	; (8004830 <_dtoa_r+0xbd0>)
 80047e2:	f7ff baaf 	b.w	8003d44 <_dtoa_r+0xe4>
 80047e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f47f aa86 	bne.w	8003cfa <_dtoa_r+0x9a>
 80047ee:	4b11      	ldr	r3, [pc, #68]	; (8004834 <_dtoa_r+0xbd4>)
 80047f0:	f7ff baa8 	b.w	8003d44 <_dtoa_r+0xe4>
 80047f4:	f1b9 0f00 	cmp.w	r9, #0
 80047f8:	dc03      	bgt.n	8004802 <_dtoa_r+0xba2>
 80047fa:	9b05      	ldr	r3, [sp, #20]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	f73f aec9 	bgt.w	8004594 <_dtoa_r+0x934>
 8004802:	9d00      	ldr	r5, [sp, #0]
 8004804:	4631      	mov	r1, r6
 8004806:	4658      	mov	r0, fp
 8004808:	f7ff f99e 	bl	8003b48 <quorem>
 800480c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004810:	f805 3b01 	strb.w	r3, [r5], #1
 8004814:	9a00      	ldr	r2, [sp, #0]
 8004816:	1aaa      	subs	r2, r5, r2
 8004818:	4591      	cmp	r9, r2
 800481a:	ddba      	ble.n	8004792 <_dtoa_r+0xb32>
 800481c:	4659      	mov	r1, fp
 800481e:	2300      	movs	r3, #0
 8004820:	220a      	movs	r2, #10
 8004822:	4620      	mov	r0, r4
 8004824:	f000 f876 	bl	8004914 <__multadd>
 8004828:	4683      	mov	fp, r0
 800482a:	e7eb      	b.n	8004804 <_dtoa_r+0xba4>
 800482c:	08005cfb 	.word	0x08005cfb
 8004830:	08005c54 	.word	0x08005c54
 8004834:	08005c78 	.word	0x08005c78

08004838 <_localeconv_r>:
 8004838:	4800      	ldr	r0, [pc, #0]	; (800483c <_localeconv_r+0x4>)
 800483a:	4770      	bx	lr
 800483c:	20000164 	.word	0x20000164

08004840 <malloc>:
 8004840:	4b02      	ldr	r3, [pc, #8]	; (800484c <malloc+0xc>)
 8004842:	4601      	mov	r1, r0
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	f000 bbe1 	b.w	800500c <_malloc_r>
 800484a:	bf00      	nop
 800484c:	20000010 	.word	0x20000010

08004850 <_Balloc>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004854:	4604      	mov	r4, r0
 8004856:	460d      	mov	r5, r1
 8004858:	b976      	cbnz	r6, 8004878 <_Balloc+0x28>
 800485a:	2010      	movs	r0, #16
 800485c:	f7ff fff0 	bl	8004840 <malloc>
 8004860:	4602      	mov	r2, r0
 8004862:	6260      	str	r0, [r4, #36]	; 0x24
 8004864:	b920      	cbnz	r0, 8004870 <_Balloc+0x20>
 8004866:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <_Balloc+0x78>)
 8004868:	4818      	ldr	r0, [pc, #96]	; (80048cc <_Balloc+0x7c>)
 800486a:	2166      	movs	r1, #102	; 0x66
 800486c:	f000 fc38 	bl	80050e0 <__assert_func>
 8004870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004874:	6006      	str	r6, [r0, #0]
 8004876:	60c6      	str	r6, [r0, #12]
 8004878:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800487a:	68f3      	ldr	r3, [r6, #12]
 800487c:	b183      	cbz	r3, 80048a0 <_Balloc+0x50>
 800487e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004886:	b9b8      	cbnz	r0, 80048b8 <_Balloc+0x68>
 8004888:	2101      	movs	r1, #1
 800488a:	fa01 f605 	lsl.w	r6, r1, r5
 800488e:	1d72      	adds	r2, r6, #5
 8004890:	0092      	lsls	r2, r2, #2
 8004892:	4620      	mov	r0, r4
 8004894:	f000 fb5a 	bl	8004f4c <_calloc_r>
 8004898:	b160      	cbz	r0, 80048b4 <_Balloc+0x64>
 800489a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800489e:	e00e      	b.n	80048be <_Balloc+0x6e>
 80048a0:	2221      	movs	r2, #33	; 0x21
 80048a2:	2104      	movs	r1, #4
 80048a4:	4620      	mov	r0, r4
 80048a6:	f000 fb51 	bl	8004f4c <_calloc_r>
 80048aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048ac:	60f0      	str	r0, [r6, #12]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e4      	bne.n	800487e <_Balloc+0x2e>
 80048b4:	2000      	movs	r0, #0
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	6802      	ldr	r2, [r0, #0]
 80048ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80048be:	2300      	movs	r3, #0
 80048c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80048c4:	e7f7      	b.n	80048b6 <_Balloc+0x66>
 80048c6:	bf00      	nop
 80048c8:	08005c85 	.word	0x08005c85
 80048cc:	08005d0c 	.word	0x08005d0c

080048d0 <_Bfree>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80048d4:	4605      	mov	r5, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	b976      	cbnz	r6, 80048f8 <_Bfree+0x28>
 80048da:	2010      	movs	r0, #16
 80048dc:	f7ff ffb0 	bl	8004840 <malloc>
 80048e0:	4602      	mov	r2, r0
 80048e2:	6268      	str	r0, [r5, #36]	; 0x24
 80048e4:	b920      	cbnz	r0, 80048f0 <_Bfree+0x20>
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <_Bfree+0x3c>)
 80048e8:	4809      	ldr	r0, [pc, #36]	; (8004910 <_Bfree+0x40>)
 80048ea:	218a      	movs	r1, #138	; 0x8a
 80048ec:	f000 fbf8 	bl	80050e0 <__assert_func>
 80048f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80048f4:	6006      	str	r6, [r0, #0]
 80048f6:	60c6      	str	r6, [r0, #12]
 80048f8:	b13c      	cbz	r4, 800490a <_Bfree+0x3a>
 80048fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80048fc:	6862      	ldr	r2, [r4, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004904:	6021      	str	r1, [r4, #0]
 8004906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	08005c85 	.word	0x08005c85
 8004910:	08005d0c 	.word	0x08005d0c

08004914 <__multadd>:
 8004914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004918:	690e      	ldr	r6, [r1, #16]
 800491a:	4607      	mov	r7, r0
 800491c:	4698      	mov	r8, r3
 800491e:	460c      	mov	r4, r1
 8004920:	f101 0014 	add.w	r0, r1, #20
 8004924:	2300      	movs	r3, #0
 8004926:	6805      	ldr	r5, [r0, #0]
 8004928:	b2a9      	uxth	r1, r5
 800492a:	fb02 8101 	mla	r1, r2, r1, r8
 800492e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004932:	0c2d      	lsrs	r5, r5, #16
 8004934:	fb02 c505 	mla	r5, r2, r5, ip
 8004938:	b289      	uxth	r1, r1
 800493a:	3301      	adds	r3, #1
 800493c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004940:	429e      	cmp	r6, r3
 8004942:	f840 1b04 	str.w	r1, [r0], #4
 8004946:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800494a:	dcec      	bgt.n	8004926 <__multadd+0x12>
 800494c:	f1b8 0f00 	cmp.w	r8, #0
 8004950:	d022      	beq.n	8004998 <__multadd+0x84>
 8004952:	68a3      	ldr	r3, [r4, #8]
 8004954:	42b3      	cmp	r3, r6
 8004956:	dc19      	bgt.n	800498c <__multadd+0x78>
 8004958:	6861      	ldr	r1, [r4, #4]
 800495a:	4638      	mov	r0, r7
 800495c:	3101      	adds	r1, #1
 800495e:	f7ff ff77 	bl	8004850 <_Balloc>
 8004962:	4605      	mov	r5, r0
 8004964:	b928      	cbnz	r0, 8004972 <__multadd+0x5e>
 8004966:	4602      	mov	r2, r0
 8004968:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <__multadd+0x8c>)
 800496a:	480e      	ldr	r0, [pc, #56]	; (80049a4 <__multadd+0x90>)
 800496c:	21b5      	movs	r1, #181	; 0xb5
 800496e:	f000 fbb7 	bl	80050e0 <__assert_func>
 8004972:	6922      	ldr	r2, [r4, #16]
 8004974:	3202      	adds	r2, #2
 8004976:	f104 010c 	add.w	r1, r4, #12
 800497a:	0092      	lsls	r2, r2, #2
 800497c:	300c      	adds	r0, #12
 800497e:	f7fe fc63 	bl	8003248 <memcpy>
 8004982:	4621      	mov	r1, r4
 8004984:	4638      	mov	r0, r7
 8004986:	f7ff ffa3 	bl	80048d0 <_Bfree>
 800498a:	462c      	mov	r4, r5
 800498c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004990:	3601      	adds	r6, #1
 8004992:	f8c3 8014 	str.w	r8, [r3, #20]
 8004996:	6126      	str	r6, [r4, #16]
 8004998:	4620      	mov	r0, r4
 800499a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800499e:	bf00      	nop
 80049a0:	08005cfb 	.word	0x08005cfb
 80049a4:	08005d0c 	.word	0x08005d0c

080049a8 <__hi0bits>:
 80049a8:	0c03      	lsrs	r3, r0, #16
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	b9d3      	cbnz	r3, 80049e4 <__hi0bits+0x3c>
 80049ae:	0400      	lsls	r0, r0, #16
 80049b0:	2310      	movs	r3, #16
 80049b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80049b6:	bf04      	itt	eq
 80049b8:	0200      	lsleq	r0, r0, #8
 80049ba:	3308      	addeq	r3, #8
 80049bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80049c0:	bf04      	itt	eq
 80049c2:	0100      	lsleq	r0, r0, #4
 80049c4:	3304      	addeq	r3, #4
 80049c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80049ca:	bf04      	itt	eq
 80049cc:	0080      	lsleq	r0, r0, #2
 80049ce:	3302      	addeq	r3, #2
 80049d0:	2800      	cmp	r0, #0
 80049d2:	db05      	blt.n	80049e0 <__hi0bits+0x38>
 80049d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80049d8:	f103 0301 	add.w	r3, r3, #1
 80049dc:	bf08      	it	eq
 80049de:	2320      	moveq	r3, #32
 80049e0:	4618      	mov	r0, r3
 80049e2:	4770      	bx	lr
 80049e4:	2300      	movs	r3, #0
 80049e6:	e7e4      	b.n	80049b2 <__hi0bits+0xa>

080049e8 <__lo0bits>:
 80049e8:	6803      	ldr	r3, [r0, #0]
 80049ea:	f013 0207 	ands.w	r2, r3, #7
 80049ee:	4601      	mov	r1, r0
 80049f0:	d00b      	beq.n	8004a0a <__lo0bits+0x22>
 80049f2:	07da      	lsls	r2, r3, #31
 80049f4:	d424      	bmi.n	8004a40 <__lo0bits+0x58>
 80049f6:	0798      	lsls	r0, r3, #30
 80049f8:	bf49      	itett	mi
 80049fa:	085b      	lsrmi	r3, r3, #1
 80049fc:	089b      	lsrpl	r3, r3, #2
 80049fe:	2001      	movmi	r0, #1
 8004a00:	600b      	strmi	r3, [r1, #0]
 8004a02:	bf5c      	itt	pl
 8004a04:	600b      	strpl	r3, [r1, #0]
 8004a06:	2002      	movpl	r0, #2
 8004a08:	4770      	bx	lr
 8004a0a:	b298      	uxth	r0, r3
 8004a0c:	b9b0      	cbnz	r0, 8004a3c <__lo0bits+0x54>
 8004a0e:	0c1b      	lsrs	r3, r3, #16
 8004a10:	2010      	movs	r0, #16
 8004a12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004a16:	bf04      	itt	eq
 8004a18:	0a1b      	lsreq	r3, r3, #8
 8004a1a:	3008      	addeq	r0, #8
 8004a1c:	071a      	lsls	r2, r3, #28
 8004a1e:	bf04      	itt	eq
 8004a20:	091b      	lsreq	r3, r3, #4
 8004a22:	3004      	addeq	r0, #4
 8004a24:	079a      	lsls	r2, r3, #30
 8004a26:	bf04      	itt	eq
 8004a28:	089b      	lsreq	r3, r3, #2
 8004a2a:	3002      	addeq	r0, #2
 8004a2c:	07da      	lsls	r2, r3, #31
 8004a2e:	d403      	bmi.n	8004a38 <__lo0bits+0x50>
 8004a30:	085b      	lsrs	r3, r3, #1
 8004a32:	f100 0001 	add.w	r0, r0, #1
 8004a36:	d005      	beq.n	8004a44 <__lo0bits+0x5c>
 8004a38:	600b      	str	r3, [r1, #0]
 8004a3a:	4770      	bx	lr
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	e7e8      	b.n	8004a12 <__lo0bits+0x2a>
 8004a40:	2000      	movs	r0, #0
 8004a42:	4770      	bx	lr
 8004a44:	2020      	movs	r0, #32
 8004a46:	4770      	bx	lr

08004a48 <__i2b>:
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	f7ff feff 	bl	8004850 <_Balloc>
 8004a52:	4602      	mov	r2, r0
 8004a54:	b928      	cbnz	r0, 8004a62 <__i2b+0x1a>
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <__i2b+0x24>)
 8004a58:	4805      	ldr	r0, [pc, #20]	; (8004a70 <__i2b+0x28>)
 8004a5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004a5e:	f000 fb3f 	bl	80050e0 <__assert_func>
 8004a62:	2301      	movs	r3, #1
 8004a64:	6144      	str	r4, [r0, #20]
 8004a66:	6103      	str	r3, [r0, #16]
 8004a68:	bd10      	pop	{r4, pc}
 8004a6a:	bf00      	nop
 8004a6c:	08005cfb 	.word	0x08005cfb
 8004a70:	08005d0c 	.word	0x08005d0c

08004a74 <__multiply>:
 8004a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a78:	4614      	mov	r4, r2
 8004a7a:	690a      	ldr	r2, [r1, #16]
 8004a7c:	6923      	ldr	r3, [r4, #16]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	bfb8      	it	lt
 8004a82:	460b      	movlt	r3, r1
 8004a84:	460d      	mov	r5, r1
 8004a86:	bfbc      	itt	lt
 8004a88:	4625      	movlt	r5, r4
 8004a8a:	461c      	movlt	r4, r3
 8004a8c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004a90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004a94:	68ab      	ldr	r3, [r5, #8]
 8004a96:	6869      	ldr	r1, [r5, #4]
 8004a98:	eb0a 0709 	add.w	r7, sl, r9
 8004a9c:	42bb      	cmp	r3, r7
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	bfb8      	it	lt
 8004aa2:	3101      	addlt	r1, #1
 8004aa4:	f7ff fed4 	bl	8004850 <_Balloc>
 8004aa8:	b930      	cbnz	r0, 8004ab8 <__multiply+0x44>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	4b42      	ldr	r3, [pc, #264]	; (8004bb8 <__multiply+0x144>)
 8004aae:	4843      	ldr	r0, [pc, #268]	; (8004bbc <__multiply+0x148>)
 8004ab0:	f240 115d 	movw	r1, #349	; 0x15d
 8004ab4:	f000 fb14 	bl	80050e0 <__assert_func>
 8004ab8:	f100 0614 	add.w	r6, r0, #20
 8004abc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004ac0:	4633      	mov	r3, r6
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	4543      	cmp	r3, r8
 8004ac6:	d31e      	bcc.n	8004b06 <__multiply+0x92>
 8004ac8:	f105 0c14 	add.w	ip, r5, #20
 8004acc:	f104 0314 	add.w	r3, r4, #20
 8004ad0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004ad4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004ad8:	9202      	str	r2, [sp, #8]
 8004ada:	ebac 0205 	sub.w	r2, ip, r5
 8004ade:	3a15      	subs	r2, #21
 8004ae0:	f022 0203 	bic.w	r2, r2, #3
 8004ae4:	3204      	adds	r2, #4
 8004ae6:	f105 0115 	add.w	r1, r5, #21
 8004aea:	458c      	cmp	ip, r1
 8004aec:	bf38      	it	cc
 8004aee:	2204      	movcc	r2, #4
 8004af0:	9201      	str	r2, [sp, #4]
 8004af2:	9a02      	ldr	r2, [sp, #8]
 8004af4:	9303      	str	r3, [sp, #12]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d808      	bhi.n	8004b0c <__multiply+0x98>
 8004afa:	2f00      	cmp	r7, #0
 8004afc:	dc55      	bgt.n	8004baa <__multiply+0x136>
 8004afe:	6107      	str	r7, [r0, #16]
 8004b00:	b005      	add	sp, #20
 8004b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b06:	f843 2b04 	str.w	r2, [r3], #4
 8004b0a:	e7db      	b.n	8004ac4 <__multiply+0x50>
 8004b0c:	f8b3 a000 	ldrh.w	sl, [r3]
 8004b10:	f1ba 0f00 	cmp.w	sl, #0
 8004b14:	d020      	beq.n	8004b58 <__multiply+0xe4>
 8004b16:	f105 0e14 	add.w	lr, r5, #20
 8004b1a:	46b1      	mov	r9, r6
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004b22:	f8d9 b000 	ldr.w	fp, [r9]
 8004b26:	b2a1      	uxth	r1, r4
 8004b28:	fa1f fb8b 	uxth.w	fp, fp
 8004b2c:	fb0a b101 	mla	r1, sl, r1, fp
 8004b30:	4411      	add	r1, r2
 8004b32:	f8d9 2000 	ldr.w	r2, [r9]
 8004b36:	0c24      	lsrs	r4, r4, #16
 8004b38:	0c12      	lsrs	r2, r2, #16
 8004b3a:	fb0a 2404 	mla	r4, sl, r4, r2
 8004b3e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004b42:	b289      	uxth	r1, r1
 8004b44:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004b48:	45f4      	cmp	ip, lr
 8004b4a:	f849 1b04 	str.w	r1, [r9], #4
 8004b4e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004b52:	d8e4      	bhi.n	8004b1e <__multiply+0xaa>
 8004b54:	9901      	ldr	r1, [sp, #4]
 8004b56:	5072      	str	r2, [r6, r1]
 8004b58:	9a03      	ldr	r2, [sp, #12]
 8004b5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	f1b9 0f00 	cmp.w	r9, #0
 8004b64:	d01f      	beq.n	8004ba6 <__multiply+0x132>
 8004b66:	6834      	ldr	r4, [r6, #0]
 8004b68:	f105 0114 	add.w	r1, r5, #20
 8004b6c:	46b6      	mov	lr, r6
 8004b6e:	f04f 0a00 	mov.w	sl, #0
 8004b72:	880a      	ldrh	r2, [r1, #0]
 8004b74:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004b78:	fb09 b202 	mla	r2, r9, r2, fp
 8004b7c:	4492      	add	sl, r2
 8004b7e:	b2a4      	uxth	r4, r4
 8004b80:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004b84:	f84e 4b04 	str.w	r4, [lr], #4
 8004b88:	f851 4b04 	ldr.w	r4, [r1], #4
 8004b8c:	f8be 2000 	ldrh.w	r2, [lr]
 8004b90:	0c24      	lsrs	r4, r4, #16
 8004b92:	fb09 2404 	mla	r4, r9, r4, r2
 8004b96:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004b9a:	458c      	cmp	ip, r1
 8004b9c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004ba0:	d8e7      	bhi.n	8004b72 <__multiply+0xfe>
 8004ba2:	9a01      	ldr	r2, [sp, #4]
 8004ba4:	50b4      	str	r4, [r6, r2]
 8004ba6:	3604      	adds	r6, #4
 8004ba8:	e7a3      	b.n	8004af2 <__multiply+0x7e>
 8004baa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1a5      	bne.n	8004afe <__multiply+0x8a>
 8004bb2:	3f01      	subs	r7, #1
 8004bb4:	e7a1      	b.n	8004afa <__multiply+0x86>
 8004bb6:	bf00      	nop
 8004bb8:	08005cfb 	.word	0x08005cfb
 8004bbc:	08005d0c 	.word	0x08005d0c

08004bc0 <__pow5mult>:
 8004bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bc4:	4615      	mov	r5, r2
 8004bc6:	f012 0203 	ands.w	r2, r2, #3
 8004bca:	4606      	mov	r6, r0
 8004bcc:	460f      	mov	r7, r1
 8004bce:	d007      	beq.n	8004be0 <__pow5mult+0x20>
 8004bd0:	4c25      	ldr	r4, [pc, #148]	; (8004c68 <__pow5mult+0xa8>)
 8004bd2:	3a01      	subs	r2, #1
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004bda:	f7ff fe9b 	bl	8004914 <__multadd>
 8004bde:	4607      	mov	r7, r0
 8004be0:	10ad      	asrs	r5, r5, #2
 8004be2:	d03d      	beq.n	8004c60 <__pow5mult+0xa0>
 8004be4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004be6:	b97c      	cbnz	r4, 8004c08 <__pow5mult+0x48>
 8004be8:	2010      	movs	r0, #16
 8004bea:	f7ff fe29 	bl	8004840 <malloc>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	6270      	str	r0, [r6, #36]	; 0x24
 8004bf2:	b928      	cbnz	r0, 8004c00 <__pow5mult+0x40>
 8004bf4:	4b1d      	ldr	r3, [pc, #116]	; (8004c6c <__pow5mult+0xac>)
 8004bf6:	481e      	ldr	r0, [pc, #120]	; (8004c70 <__pow5mult+0xb0>)
 8004bf8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004bfc:	f000 fa70 	bl	80050e0 <__assert_func>
 8004c00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c04:	6004      	str	r4, [r0, #0]
 8004c06:	60c4      	str	r4, [r0, #12]
 8004c08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004c0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c10:	b94c      	cbnz	r4, 8004c26 <__pow5mult+0x66>
 8004c12:	f240 2171 	movw	r1, #625	; 0x271
 8004c16:	4630      	mov	r0, r6
 8004c18:	f7ff ff16 	bl	8004a48 <__i2b>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c22:	4604      	mov	r4, r0
 8004c24:	6003      	str	r3, [r0, #0]
 8004c26:	f04f 0900 	mov.w	r9, #0
 8004c2a:	07eb      	lsls	r3, r5, #31
 8004c2c:	d50a      	bpl.n	8004c44 <__pow5mult+0x84>
 8004c2e:	4639      	mov	r1, r7
 8004c30:	4622      	mov	r2, r4
 8004c32:	4630      	mov	r0, r6
 8004c34:	f7ff ff1e 	bl	8004a74 <__multiply>
 8004c38:	4639      	mov	r1, r7
 8004c3a:	4680      	mov	r8, r0
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f7ff fe47 	bl	80048d0 <_Bfree>
 8004c42:	4647      	mov	r7, r8
 8004c44:	106d      	asrs	r5, r5, #1
 8004c46:	d00b      	beq.n	8004c60 <__pow5mult+0xa0>
 8004c48:	6820      	ldr	r0, [r4, #0]
 8004c4a:	b938      	cbnz	r0, 8004c5c <__pow5mult+0x9c>
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	4621      	mov	r1, r4
 8004c50:	4630      	mov	r0, r6
 8004c52:	f7ff ff0f 	bl	8004a74 <__multiply>
 8004c56:	6020      	str	r0, [r4, #0]
 8004c58:	f8c0 9000 	str.w	r9, [r0]
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	e7e4      	b.n	8004c2a <__pow5mult+0x6a>
 8004c60:	4638      	mov	r0, r7
 8004c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c66:	bf00      	nop
 8004c68:	08005e60 	.word	0x08005e60
 8004c6c:	08005c85 	.word	0x08005c85
 8004c70:	08005d0c 	.word	0x08005d0c

08004c74 <__lshift>:
 8004c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c78:	460c      	mov	r4, r1
 8004c7a:	6849      	ldr	r1, [r1, #4]
 8004c7c:	6923      	ldr	r3, [r4, #16]
 8004c7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004c82:	68a3      	ldr	r3, [r4, #8]
 8004c84:	4607      	mov	r7, r0
 8004c86:	4691      	mov	r9, r2
 8004c88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c8c:	f108 0601 	add.w	r6, r8, #1
 8004c90:	42b3      	cmp	r3, r6
 8004c92:	db0b      	blt.n	8004cac <__lshift+0x38>
 8004c94:	4638      	mov	r0, r7
 8004c96:	f7ff fddb 	bl	8004850 <_Balloc>
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	b948      	cbnz	r0, 8004cb2 <__lshift+0x3e>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	4b28      	ldr	r3, [pc, #160]	; (8004d44 <__lshift+0xd0>)
 8004ca2:	4829      	ldr	r0, [pc, #164]	; (8004d48 <__lshift+0xd4>)
 8004ca4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004ca8:	f000 fa1a 	bl	80050e0 <__assert_func>
 8004cac:	3101      	adds	r1, #1
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	e7ee      	b.n	8004c90 <__lshift+0x1c>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f100 0114 	add.w	r1, r0, #20
 8004cb8:	f100 0210 	add.w	r2, r0, #16
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	4553      	cmp	r3, sl
 8004cc0:	db33      	blt.n	8004d2a <__lshift+0xb6>
 8004cc2:	6920      	ldr	r0, [r4, #16]
 8004cc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004cc8:	f104 0314 	add.w	r3, r4, #20
 8004ccc:	f019 091f 	ands.w	r9, r9, #31
 8004cd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004cd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004cd8:	d02b      	beq.n	8004d32 <__lshift+0xbe>
 8004cda:	f1c9 0e20 	rsb	lr, r9, #32
 8004cde:	468a      	mov	sl, r1
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	fa00 f009 	lsl.w	r0, r0, r9
 8004ce8:	4302      	orrs	r2, r0
 8004cea:	f84a 2b04 	str.w	r2, [sl], #4
 8004cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cf2:	459c      	cmp	ip, r3
 8004cf4:	fa22 f20e 	lsr.w	r2, r2, lr
 8004cf8:	d8f3      	bhi.n	8004ce2 <__lshift+0x6e>
 8004cfa:	ebac 0304 	sub.w	r3, ip, r4
 8004cfe:	3b15      	subs	r3, #21
 8004d00:	f023 0303 	bic.w	r3, r3, #3
 8004d04:	3304      	adds	r3, #4
 8004d06:	f104 0015 	add.w	r0, r4, #21
 8004d0a:	4584      	cmp	ip, r0
 8004d0c:	bf38      	it	cc
 8004d0e:	2304      	movcc	r3, #4
 8004d10:	50ca      	str	r2, [r1, r3]
 8004d12:	b10a      	cbz	r2, 8004d18 <__lshift+0xa4>
 8004d14:	f108 0602 	add.w	r6, r8, #2
 8004d18:	3e01      	subs	r6, #1
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	612e      	str	r6, [r5, #16]
 8004d1e:	4621      	mov	r1, r4
 8004d20:	f7ff fdd6 	bl	80048d0 <_Bfree>
 8004d24:	4628      	mov	r0, r5
 8004d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004d2e:	3301      	adds	r3, #1
 8004d30:	e7c5      	b.n	8004cbe <__lshift+0x4a>
 8004d32:	3904      	subs	r1, #4
 8004d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d38:	f841 2f04 	str.w	r2, [r1, #4]!
 8004d3c:	459c      	cmp	ip, r3
 8004d3e:	d8f9      	bhi.n	8004d34 <__lshift+0xc0>
 8004d40:	e7ea      	b.n	8004d18 <__lshift+0xa4>
 8004d42:	bf00      	nop
 8004d44:	08005cfb 	.word	0x08005cfb
 8004d48:	08005d0c 	.word	0x08005d0c

08004d4c <__mcmp>:
 8004d4c:	b530      	push	{r4, r5, lr}
 8004d4e:	6902      	ldr	r2, [r0, #16]
 8004d50:	690c      	ldr	r4, [r1, #16]
 8004d52:	1b12      	subs	r2, r2, r4
 8004d54:	d10e      	bne.n	8004d74 <__mcmp+0x28>
 8004d56:	f100 0314 	add.w	r3, r0, #20
 8004d5a:	3114      	adds	r1, #20
 8004d5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004d60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004d64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004d68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004d6c:	42a5      	cmp	r5, r4
 8004d6e:	d003      	beq.n	8004d78 <__mcmp+0x2c>
 8004d70:	d305      	bcc.n	8004d7e <__mcmp+0x32>
 8004d72:	2201      	movs	r2, #1
 8004d74:	4610      	mov	r0, r2
 8004d76:	bd30      	pop	{r4, r5, pc}
 8004d78:	4283      	cmp	r3, r0
 8004d7a:	d3f3      	bcc.n	8004d64 <__mcmp+0x18>
 8004d7c:	e7fa      	b.n	8004d74 <__mcmp+0x28>
 8004d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d82:	e7f7      	b.n	8004d74 <__mcmp+0x28>

08004d84 <__mdiff>:
 8004d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d88:	460c      	mov	r4, r1
 8004d8a:	4606      	mov	r6, r0
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	4620      	mov	r0, r4
 8004d90:	4617      	mov	r7, r2
 8004d92:	f7ff ffdb 	bl	8004d4c <__mcmp>
 8004d96:	1e05      	subs	r5, r0, #0
 8004d98:	d110      	bne.n	8004dbc <__mdiff+0x38>
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	f7ff fd57 	bl	8004850 <_Balloc>
 8004da2:	b930      	cbnz	r0, 8004db2 <__mdiff+0x2e>
 8004da4:	4b39      	ldr	r3, [pc, #228]	; (8004e8c <__mdiff+0x108>)
 8004da6:	4602      	mov	r2, r0
 8004da8:	f240 2132 	movw	r1, #562	; 0x232
 8004dac:	4838      	ldr	r0, [pc, #224]	; (8004e90 <__mdiff+0x10c>)
 8004dae:	f000 f997 	bl	80050e0 <__assert_func>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dbc:	bfa4      	itt	ge
 8004dbe:	463b      	movge	r3, r7
 8004dc0:	4627      	movge	r7, r4
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	bfa6      	itte	ge
 8004dc8:	461c      	movge	r4, r3
 8004dca:	2500      	movge	r5, #0
 8004dcc:	2501      	movlt	r5, #1
 8004dce:	f7ff fd3f 	bl	8004850 <_Balloc>
 8004dd2:	b920      	cbnz	r0, 8004dde <__mdiff+0x5a>
 8004dd4:	4b2d      	ldr	r3, [pc, #180]	; (8004e8c <__mdiff+0x108>)
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004ddc:	e7e6      	b.n	8004dac <__mdiff+0x28>
 8004dde:	693e      	ldr	r6, [r7, #16]
 8004de0:	60c5      	str	r5, [r0, #12]
 8004de2:	6925      	ldr	r5, [r4, #16]
 8004de4:	f107 0114 	add.w	r1, r7, #20
 8004de8:	f104 0914 	add.w	r9, r4, #20
 8004dec:	f100 0e14 	add.w	lr, r0, #20
 8004df0:	f107 0210 	add.w	r2, r7, #16
 8004df4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004df8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004dfc:	46f2      	mov	sl, lr
 8004dfe:	2700      	movs	r7, #0
 8004e00:	f859 3b04 	ldr.w	r3, [r9], #4
 8004e04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004e08:	fa1f f883 	uxth.w	r8, r3
 8004e0c:	fa17 f78b 	uxtah	r7, r7, fp
 8004e10:	0c1b      	lsrs	r3, r3, #16
 8004e12:	eba7 0808 	sub.w	r8, r7, r8
 8004e16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004e1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004e1e:	fa1f f888 	uxth.w	r8, r8
 8004e22:	141f      	asrs	r7, r3, #16
 8004e24:	454d      	cmp	r5, r9
 8004e26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004e2a:	f84a 3b04 	str.w	r3, [sl], #4
 8004e2e:	d8e7      	bhi.n	8004e00 <__mdiff+0x7c>
 8004e30:	1b2b      	subs	r3, r5, r4
 8004e32:	3b15      	subs	r3, #21
 8004e34:	f023 0303 	bic.w	r3, r3, #3
 8004e38:	3304      	adds	r3, #4
 8004e3a:	3415      	adds	r4, #21
 8004e3c:	42a5      	cmp	r5, r4
 8004e3e:	bf38      	it	cc
 8004e40:	2304      	movcc	r3, #4
 8004e42:	4419      	add	r1, r3
 8004e44:	4473      	add	r3, lr
 8004e46:	469e      	mov	lr, r3
 8004e48:	460d      	mov	r5, r1
 8004e4a:	4565      	cmp	r5, ip
 8004e4c:	d30e      	bcc.n	8004e6c <__mdiff+0xe8>
 8004e4e:	f10c 0203 	add.w	r2, ip, #3
 8004e52:	1a52      	subs	r2, r2, r1
 8004e54:	f022 0203 	bic.w	r2, r2, #3
 8004e58:	3903      	subs	r1, #3
 8004e5a:	458c      	cmp	ip, r1
 8004e5c:	bf38      	it	cc
 8004e5e:	2200      	movcc	r2, #0
 8004e60:	441a      	add	r2, r3
 8004e62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004e66:	b17b      	cbz	r3, 8004e88 <__mdiff+0x104>
 8004e68:	6106      	str	r6, [r0, #16]
 8004e6a:	e7a5      	b.n	8004db8 <__mdiff+0x34>
 8004e6c:	f855 8b04 	ldr.w	r8, [r5], #4
 8004e70:	fa17 f488 	uxtah	r4, r7, r8
 8004e74:	1422      	asrs	r2, r4, #16
 8004e76:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8004e7a:	b2a4      	uxth	r4, r4
 8004e7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004e80:	f84e 4b04 	str.w	r4, [lr], #4
 8004e84:	1417      	asrs	r7, r2, #16
 8004e86:	e7e0      	b.n	8004e4a <__mdiff+0xc6>
 8004e88:	3e01      	subs	r6, #1
 8004e8a:	e7ea      	b.n	8004e62 <__mdiff+0xde>
 8004e8c:	08005cfb 	.word	0x08005cfb
 8004e90:	08005d0c 	.word	0x08005d0c

08004e94 <__d2b>:
 8004e94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e98:	4689      	mov	r9, r1
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	ec57 6b10 	vmov	r6, r7, d0
 8004ea0:	4690      	mov	r8, r2
 8004ea2:	f7ff fcd5 	bl	8004850 <_Balloc>
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	b930      	cbnz	r0, 8004eb8 <__d2b+0x24>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	4b25      	ldr	r3, [pc, #148]	; (8004f44 <__d2b+0xb0>)
 8004eae:	4826      	ldr	r0, [pc, #152]	; (8004f48 <__d2b+0xb4>)
 8004eb0:	f240 310a 	movw	r1, #778	; 0x30a
 8004eb4:	f000 f914 	bl	80050e0 <__assert_func>
 8004eb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004ebc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004ec0:	bb35      	cbnz	r5, 8004f10 <__d2b+0x7c>
 8004ec2:	2e00      	cmp	r6, #0
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	d028      	beq.n	8004f1a <__d2b+0x86>
 8004ec8:	4668      	mov	r0, sp
 8004eca:	9600      	str	r6, [sp, #0]
 8004ecc:	f7ff fd8c 	bl	80049e8 <__lo0bits>
 8004ed0:	9900      	ldr	r1, [sp, #0]
 8004ed2:	b300      	cbz	r0, 8004f16 <__d2b+0x82>
 8004ed4:	9a01      	ldr	r2, [sp, #4]
 8004ed6:	f1c0 0320 	rsb	r3, r0, #32
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	40c2      	lsrs	r2, r0
 8004ee2:	6163      	str	r3, [r4, #20]
 8004ee4:	9201      	str	r2, [sp, #4]
 8004ee6:	9b01      	ldr	r3, [sp, #4]
 8004ee8:	61a3      	str	r3, [r4, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bf14      	ite	ne
 8004eee:	2202      	movne	r2, #2
 8004ef0:	2201      	moveq	r2, #1
 8004ef2:	6122      	str	r2, [r4, #16]
 8004ef4:	b1d5      	cbz	r5, 8004f2c <__d2b+0x98>
 8004ef6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004efa:	4405      	add	r5, r0
 8004efc:	f8c9 5000 	str.w	r5, [r9]
 8004f00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004f04:	f8c8 0000 	str.w	r0, [r8]
 8004f08:	4620      	mov	r0, r4
 8004f0a:	b003      	add	sp, #12
 8004f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f14:	e7d5      	b.n	8004ec2 <__d2b+0x2e>
 8004f16:	6161      	str	r1, [r4, #20]
 8004f18:	e7e5      	b.n	8004ee6 <__d2b+0x52>
 8004f1a:	a801      	add	r0, sp, #4
 8004f1c:	f7ff fd64 	bl	80049e8 <__lo0bits>
 8004f20:	9b01      	ldr	r3, [sp, #4]
 8004f22:	6163      	str	r3, [r4, #20]
 8004f24:	2201      	movs	r2, #1
 8004f26:	6122      	str	r2, [r4, #16]
 8004f28:	3020      	adds	r0, #32
 8004f2a:	e7e3      	b.n	8004ef4 <__d2b+0x60>
 8004f2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004f30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004f34:	f8c9 0000 	str.w	r0, [r9]
 8004f38:	6918      	ldr	r0, [r3, #16]
 8004f3a:	f7ff fd35 	bl	80049a8 <__hi0bits>
 8004f3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004f42:	e7df      	b.n	8004f04 <__d2b+0x70>
 8004f44:	08005cfb 	.word	0x08005cfb
 8004f48:	08005d0c 	.word	0x08005d0c

08004f4c <_calloc_r>:
 8004f4c:	b513      	push	{r0, r1, r4, lr}
 8004f4e:	434a      	muls	r2, r1
 8004f50:	4611      	mov	r1, r2
 8004f52:	9201      	str	r2, [sp, #4]
 8004f54:	f000 f85a 	bl	800500c <_malloc_r>
 8004f58:	4604      	mov	r4, r0
 8004f5a:	b118      	cbz	r0, 8004f64 <_calloc_r+0x18>
 8004f5c:	9a01      	ldr	r2, [sp, #4]
 8004f5e:	2100      	movs	r1, #0
 8004f60:	f7fe f980 	bl	8003264 <memset>
 8004f64:	4620      	mov	r0, r4
 8004f66:	b002      	add	sp, #8
 8004f68:	bd10      	pop	{r4, pc}
	...

08004f6c <_free_r>:
 8004f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f6e:	2900      	cmp	r1, #0
 8004f70:	d048      	beq.n	8005004 <_free_r+0x98>
 8004f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f76:	9001      	str	r0, [sp, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8004f7e:	bfb8      	it	lt
 8004f80:	18e4      	addlt	r4, r4, r3
 8004f82:	f000 f8ef 	bl	8005164 <__malloc_lock>
 8004f86:	4a20      	ldr	r2, [pc, #128]	; (8005008 <_free_r+0x9c>)
 8004f88:	9801      	ldr	r0, [sp, #4]
 8004f8a:	6813      	ldr	r3, [r2, #0]
 8004f8c:	4615      	mov	r5, r2
 8004f8e:	b933      	cbnz	r3, 8004f9e <_free_r+0x32>
 8004f90:	6063      	str	r3, [r4, #4]
 8004f92:	6014      	str	r4, [r2, #0]
 8004f94:	b003      	add	sp, #12
 8004f96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f9a:	f000 b8e9 	b.w	8005170 <__malloc_unlock>
 8004f9e:	42a3      	cmp	r3, r4
 8004fa0:	d90b      	bls.n	8004fba <_free_r+0x4e>
 8004fa2:	6821      	ldr	r1, [r4, #0]
 8004fa4:	1862      	adds	r2, r4, r1
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	bf04      	itt	eq
 8004faa:	681a      	ldreq	r2, [r3, #0]
 8004fac:	685b      	ldreq	r3, [r3, #4]
 8004fae:	6063      	str	r3, [r4, #4]
 8004fb0:	bf04      	itt	eq
 8004fb2:	1852      	addeq	r2, r2, r1
 8004fb4:	6022      	streq	r2, [r4, #0]
 8004fb6:	602c      	str	r4, [r5, #0]
 8004fb8:	e7ec      	b.n	8004f94 <_free_r+0x28>
 8004fba:	461a      	mov	r2, r3
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	b10b      	cbz	r3, 8004fc4 <_free_r+0x58>
 8004fc0:	42a3      	cmp	r3, r4
 8004fc2:	d9fa      	bls.n	8004fba <_free_r+0x4e>
 8004fc4:	6811      	ldr	r1, [r2, #0]
 8004fc6:	1855      	adds	r5, r2, r1
 8004fc8:	42a5      	cmp	r5, r4
 8004fca:	d10b      	bne.n	8004fe4 <_free_r+0x78>
 8004fcc:	6824      	ldr	r4, [r4, #0]
 8004fce:	4421      	add	r1, r4
 8004fd0:	1854      	adds	r4, r2, r1
 8004fd2:	42a3      	cmp	r3, r4
 8004fd4:	6011      	str	r1, [r2, #0]
 8004fd6:	d1dd      	bne.n	8004f94 <_free_r+0x28>
 8004fd8:	681c      	ldr	r4, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	6053      	str	r3, [r2, #4]
 8004fde:	4421      	add	r1, r4
 8004fe0:	6011      	str	r1, [r2, #0]
 8004fe2:	e7d7      	b.n	8004f94 <_free_r+0x28>
 8004fe4:	d902      	bls.n	8004fec <_free_r+0x80>
 8004fe6:	230c      	movs	r3, #12
 8004fe8:	6003      	str	r3, [r0, #0]
 8004fea:	e7d3      	b.n	8004f94 <_free_r+0x28>
 8004fec:	6825      	ldr	r5, [r4, #0]
 8004fee:	1961      	adds	r1, r4, r5
 8004ff0:	428b      	cmp	r3, r1
 8004ff2:	bf04      	itt	eq
 8004ff4:	6819      	ldreq	r1, [r3, #0]
 8004ff6:	685b      	ldreq	r3, [r3, #4]
 8004ff8:	6063      	str	r3, [r4, #4]
 8004ffa:	bf04      	itt	eq
 8004ffc:	1949      	addeq	r1, r1, r5
 8004ffe:	6021      	streq	r1, [r4, #0]
 8005000:	6054      	str	r4, [r2, #4]
 8005002:	e7c7      	b.n	8004f94 <_free_r+0x28>
 8005004:	b003      	add	sp, #12
 8005006:	bd30      	pop	{r4, r5, pc}
 8005008:	20012f5c 	.word	0x20012f5c

0800500c <_malloc_r>:
 800500c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500e:	1ccd      	adds	r5, r1, #3
 8005010:	f025 0503 	bic.w	r5, r5, #3
 8005014:	3508      	adds	r5, #8
 8005016:	2d0c      	cmp	r5, #12
 8005018:	bf38      	it	cc
 800501a:	250c      	movcc	r5, #12
 800501c:	2d00      	cmp	r5, #0
 800501e:	4606      	mov	r6, r0
 8005020:	db01      	blt.n	8005026 <_malloc_r+0x1a>
 8005022:	42a9      	cmp	r1, r5
 8005024:	d903      	bls.n	800502e <_malloc_r+0x22>
 8005026:	230c      	movs	r3, #12
 8005028:	6033      	str	r3, [r6, #0]
 800502a:	2000      	movs	r0, #0
 800502c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800502e:	f000 f899 	bl	8005164 <__malloc_lock>
 8005032:	4921      	ldr	r1, [pc, #132]	; (80050b8 <_malloc_r+0xac>)
 8005034:	680a      	ldr	r2, [r1, #0]
 8005036:	4614      	mov	r4, r2
 8005038:	b99c      	cbnz	r4, 8005062 <_malloc_r+0x56>
 800503a:	4f20      	ldr	r7, [pc, #128]	; (80050bc <_malloc_r+0xb0>)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	b923      	cbnz	r3, 800504a <_malloc_r+0x3e>
 8005040:	4621      	mov	r1, r4
 8005042:	4630      	mov	r0, r6
 8005044:	f000 f83c 	bl	80050c0 <_sbrk_r>
 8005048:	6038      	str	r0, [r7, #0]
 800504a:	4629      	mov	r1, r5
 800504c:	4630      	mov	r0, r6
 800504e:	f000 f837 	bl	80050c0 <_sbrk_r>
 8005052:	1c43      	adds	r3, r0, #1
 8005054:	d123      	bne.n	800509e <_malloc_r+0x92>
 8005056:	230c      	movs	r3, #12
 8005058:	6033      	str	r3, [r6, #0]
 800505a:	4630      	mov	r0, r6
 800505c:	f000 f888 	bl	8005170 <__malloc_unlock>
 8005060:	e7e3      	b.n	800502a <_malloc_r+0x1e>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	1b5b      	subs	r3, r3, r5
 8005066:	d417      	bmi.n	8005098 <_malloc_r+0x8c>
 8005068:	2b0b      	cmp	r3, #11
 800506a:	d903      	bls.n	8005074 <_malloc_r+0x68>
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	441c      	add	r4, r3
 8005070:	6025      	str	r5, [r4, #0]
 8005072:	e004      	b.n	800507e <_malloc_r+0x72>
 8005074:	6863      	ldr	r3, [r4, #4]
 8005076:	42a2      	cmp	r2, r4
 8005078:	bf0c      	ite	eq
 800507a:	600b      	streq	r3, [r1, #0]
 800507c:	6053      	strne	r3, [r2, #4]
 800507e:	4630      	mov	r0, r6
 8005080:	f000 f876 	bl	8005170 <__malloc_unlock>
 8005084:	f104 000b 	add.w	r0, r4, #11
 8005088:	1d23      	adds	r3, r4, #4
 800508a:	f020 0007 	bic.w	r0, r0, #7
 800508e:	1ac2      	subs	r2, r0, r3
 8005090:	d0cc      	beq.n	800502c <_malloc_r+0x20>
 8005092:	1a1b      	subs	r3, r3, r0
 8005094:	50a3      	str	r3, [r4, r2]
 8005096:	e7c9      	b.n	800502c <_malloc_r+0x20>
 8005098:	4622      	mov	r2, r4
 800509a:	6864      	ldr	r4, [r4, #4]
 800509c:	e7cc      	b.n	8005038 <_malloc_r+0x2c>
 800509e:	1cc4      	adds	r4, r0, #3
 80050a0:	f024 0403 	bic.w	r4, r4, #3
 80050a4:	42a0      	cmp	r0, r4
 80050a6:	d0e3      	beq.n	8005070 <_malloc_r+0x64>
 80050a8:	1a21      	subs	r1, r4, r0
 80050aa:	4630      	mov	r0, r6
 80050ac:	f000 f808 	bl	80050c0 <_sbrk_r>
 80050b0:	3001      	adds	r0, #1
 80050b2:	d1dd      	bne.n	8005070 <_malloc_r+0x64>
 80050b4:	e7cf      	b.n	8005056 <_malloc_r+0x4a>
 80050b6:	bf00      	nop
 80050b8:	20012f5c 	.word	0x20012f5c
 80050bc:	20012f60 	.word	0x20012f60

080050c0 <_sbrk_r>:
 80050c0:	b538      	push	{r3, r4, r5, lr}
 80050c2:	4d06      	ldr	r5, [pc, #24]	; (80050dc <_sbrk_r+0x1c>)
 80050c4:	2300      	movs	r3, #0
 80050c6:	4604      	mov	r4, r0
 80050c8:	4608      	mov	r0, r1
 80050ca:	602b      	str	r3, [r5, #0]
 80050cc:	f7fc fe10 	bl	8001cf0 <_sbrk>
 80050d0:	1c43      	adds	r3, r0, #1
 80050d2:	d102      	bne.n	80050da <_sbrk_r+0x1a>
 80050d4:	682b      	ldr	r3, [r5, #0]
 80050d6:	b103      	cbz	r3, 80050da <_sbrk_r+0x1a>
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	bd38      	pop	{r3, r4, r5, pc}
 80050dc:	20012fa4 	.word	0x20012fa4

080050e0 <__assert_func>:
 80050e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050e2:	4614      	mov	r4, r2
 80050e4:	461a      	mov	r2, r3
 80050e6:	4b09      	ldr	r3, [pc, #36]	; (800510c <__assert_func+0x2c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4605      	mov	r5, r0
 80050ec:	68d8      	ldr	r0, [r3, #12]
 80050ee:	b14c      	cbz	r4, 8005104 <__assert_func+0x24>
 80050f0:	4b07      	ldr	r3, [pc, #28]	; (8005110 <__assert_func+0x30>)
 80050f2:	9100      	str	r1, [sp, #0]
 80050f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80050f8:	4906      	ldr	r1, [pc, #24]	; (8005114 <__assert_func+0x34>)
 80050fa:	462b      	mov	r3, r5
 80050fc:	f000 f80e 	bl	800511c <fiprintf>
 8005100:	f000 fa64 	bl	80055cc <abort>
 8005104:	4b04      	ldr	r3, [pc, #16]	; (8005118 <__assert_func+0x38>)
 8005106:	461c      	mov	r4, r3
 8005108:	e7f3      	b.n	80050f2 <__assert_func+0x12>
 800510a:	bf00      	nop
 800510c:	20000010 	.word	0x20000010
 8005110:	08005e6c 	.word	0x08005e6c
 8005114:	08005e79 	.word	0x08005e79
 8005118:	08005ea7 	.word	0x08005ea7

0800511c <fiprintf>:
 800511c:	b40e      	push	{r1, r2, r3}
 800511e:	b503      	push	{r0, r1, lr}
 8005120:	4601      	mov	r1, r0
 8005122:	ab03      	add	r3, sp, #12
 8005124:	4805      	ldr	r0, [pc, #20]	; (800513c <fiprintf+0x20>)
 8005126:	f853 2b04 	ldr.w	r2, [r3], #4
 800512a:	6800      	ldr	r0, [r0, #0]
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	f000 f84f 	bl	80051d0 <_vfiprintf_r>
 8005132:	b002      	add	sp, #8
 8005134:	f85d eb04 	ldr.w	lr, [sp], #4
 8005138:	b003      	add	sp, #12
 800513a:	4770      	bx	lr
 800513c:	20000010 	.word	0x20000010

08005140 <__ascii_mbtowc>:
 8005140:	b082      	sub	sp, #8
 8005142:	b901      	cbnz	r1, 8005146 <__ascii_mbtowc+0x6>
 8005144:	a901      	add	r1, sp, #4
 8005146:	b142      	cbz	r2, 800515a <__ascii_mbtowc+0x1a>
 8005148:	b14b      	cbz	r3, 800515e <__ascii_mbtowc+0x1e>
 800514a:	7813      	ldrb	r3, [r2, #0]
 800514c:	600b      	str	r3, [r1, #0]
 800514e:	7812      	ldrb	r2, [r2, #0]
 8005150:	1e10      	subs	r0, r2, #0
 8005152:	bf18      	it	ne
 8005154:	2001      	movne	r0, #1
 8005156:	b002      	add	sp, #8
 8005158:	4770      	bx	lr
 800515a:	4610      	mov	r0, r2
 800515c:	e7fb      	b.n	8005156 <__ascii_mbtowc+0x16>
 800515e:	f06f 0001 	mvn.w	r0, #1
 8005162:	e7f8      	b.n	8005156 <__ascii_mbtowc+0x16>

08005164 <__malloc_lock>:
 8005164:	4801      	ldr	r0, [pc, #4]	; (800516c <__malloc_lock+0x8>)
 8005166:	f000 bbf1 	b.w	800594c <__retarget_lock_acquire_recursive>
 800516a:	bf00      	nop
 800516c:	20012fac 	.word	0x20012fac

08005170 <__malloc_unlock>:
 8005170:	4801      	ldr	r0, [pc, #4]	; (8005178 <__malloc_unlock+0x8>)
 8005172:	f000 bbec 	b.w	800594e <__retarget_lock_release_recursive>
 8005176:	bf00      	nop
 8005178:	20012fac 	.word	0x20012fac

0800517c <__sfputc_r>:
 800517c:	6893      	ldr	r3, [r2, #8]
 800517e:	3b01      	subs	r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	b410      	push	{r4}
 8005184:	6093      	str	r3, [r2, #8]
 8005186:	da08      	bge.n	800519a <__sfputc_r+0x1e>
 8005188:	6994      	ldr	r4, [r2, #24]
 800518a:	42a3      	cmp	r3, r4
 800518c:	db01      	blt.n	8005192 <__sfputc_r+0x16>
 800518e:	290a      	cmp	r1, #10
 8005190:	d103      	bne.n	800519a <__sfputc_r+0x1e>
 8005192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005196:	f000 b94b 	b.w	8005430 <__swbuf_r>
 800519a:	6813      	ldr	r3, [r2, #0]
 800519c:	1c58      	adds	r0, r3, #1
 800519e:	6010      	str	r0, [r2, #0]
 80051a0:	7019      	strb	r1, [r3, #0]
 80051a2:	4608      	mov	r0, r1
 80051a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <__sfputs_r>:
 80051aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ac:	4606      	mov	r6, r0
 80051ae:	460f      	mov	r7, r1
 80051b0:	4614      	mov	r4, r2
 80051b2:	18d5      	adds	r5, r2, r3
 80051b4:	42ac      	cmp	r4, r5
 80051b6:	d101      	bne.n	80051bc <__sfputs_r+0x12>
 80051b8:	2000      	movs	r0, #0
 80051ba:	e007      	b.n	80051cc <__sfputs_r+0x22>
 80051bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c0:	463a      	mov	r2, r7
 80051c2:	4630      	mov	r0, r6
 80051c4:	f7ff ffda 	bl	800517c <__sfputc_r>
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	d1f3      	bne.n	80051b4 <__sfputs_r+0xa>
 80051cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051d0 <_vfiprintf_r>:
 80051d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d4:	460d      	mov	r5, r1
 80051d6:	b09d      	sub	sp, #116	; 0x74
 80051d8:	4614      	mov	r4, r2
 80051da:	4698      	mov	r8, r3
 80051dc:	4606      	mov	r6, r0
 80051de:	b118      	cbz	r0, 80051e8 <_vfiprintf_r+0x18>
 80051e0:	6983      	ldr	r3, [r0, #24]
 80051e2:	b90b      	cbnz	r3, 80051e8 <_vfiprintf_r+0x18>
 80051e4:	f000 fb14 	bl	8005810 <__sinit>
 80051e8:	4b89      	ldr	r3, [pc, #548]	; (8005410 <_vfiprintf_r+0x240>)
 80051ea:	429d      	cmp	r5, r3
 80051ec:	d11b      	bne.n	8005226 <_vfiprintf_r+0x56>
 80051ee:	6875      	ldr	r5, [r6, #4]
 80051f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051f2:	07d9      	lsls	r1, r3, #31
 80051f4:	d405      	bmi.n	8005202 <_vfiprintf_r+0x32>
 80051f6:	89ab      	ldrh	r3, [r5, #12]
 80051f8:	059a      	lsls	r2, r3, #22
 80051fa:	d402      	bmi.n	8005202 <_vfiprintf_r+0x32>
 80051fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051fe:	f000 fba5 	bl	800594c <__retarget_lock_acquire_recursive>
 8005202:	89ab      	ldrh	r3, [r5, #12]
 8005204:	071b      	lsls	r3, r3, #28
 8005206:	d501      	bpl.n	800520c <_vfiprintf_r+0x3c>
 8005208:	692b      	ldr	r3, [r5, #16]
 800520a:	b9eb      	cbnz	r3, 8005248 <_vfiprintf_r+0x78>
 800520c:	4629      	mov	r1, r5
 800520e:	4630      	mov	r0, r6
 8005210:	f000 f96e 	bl	80054f0 <__swsetup_r>
 8005214:	b1c0      	cbz	r0, 8005248 <_vfiprintf_r+0x78>
 8005216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005218:	07dc      	lsls	r4, r3, #31
 800521a:	d50e      	bpl.n	800523a <_vfiprintf_r+0x6a>
 800521c:	f04f 30ff 	mov.w	r0, #4294967295
 8005220:	b01d      	add	sp, #116	; 0x74
 8005222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005226:	4b7b      	ldr	r3, [pc, #492]	; (8005414 <_vfiprintf_r+0x244>)
 8005228:	429d      	cmp	r5, r3
 800522a:	d101      	bne.n	8005230 <_vfiprintf_r+0x60>
 800522c:	68b5      	ldr	r5, [r6, #8]
 800522e:	e7df      	b.n	80051f0 <_vfiprintf_r+0x20>
 8005230:	4b79      	ldr	r3, [pc, #484]	; (8005418 <_vfiprintf_r+0x248>)
 8005232:	429d      	cmp	r5, r3
 8005234:	bf08      	it	eq
 8005236:	68f5      	ldreq	r5, [r6, #12]
 8005238:	e7da      	b.n	80051f0 <_vfiprintf_r+0x20>
 800523a:	89ab      	ldrh	r3, [r5, #12]
 800523c:	0598      	lsls	r0, r3, #22
 800523e:	d4ed      	bmi.n	800521c <_vfiprintf_r+0x4c>
 8005240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005242:	f000 fb84 	bl	800594e <__retarget_lock_release_recursive>
 8005246:	e7e9      	b.n	800521c <_vfiprintf_r+0x4c>
 8005248:	2300      	movs	r3, #0
 800524a:	9309      	str	r3, [sp, #36]	; 0x24
 800524c:	2320      	movs	r3, #32
 800524e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005252:	f8cd 800c 	str.w	r8, [sp, #12]
 8005256:	2330      	movs	r3, #48	; 0x30
 8005258:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800541c <_vfiprintf_r+0x24c>
 800525c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005260:	f04f 0901 	mov.w	r9, #1
 8005264:	4623      	mov	r3, r4
 8005266:	469a      	mov	sl, r3
 8005268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800526c:	b10a      	cbz	r2, 8005272 <_vfiprintf_r+0xa2>
 800526e:	2a25      	cmp	r2, #37	; 0x25
 8005270:	d1f9      	bne.n	8005266 <_vfiprintf_r+0x96>
 8005272:	ebba 0b04 	subs.w	fp, sl, r4
 8005276:	d00b      	beq.n	8005290 <_vfiprintf_r+0xc0>
 8005278:	465b      	mov	r3, fp
 800527a:	4622      	mov	r2, r4
 800527c:	4629      	mov	r1, r5
 800527e:	4630      	mov	r0, r6
 8005280:	f7ff ff93 	bl	80051aa <__sfputs_r>
 8005284:	3001      	adds	r0, #1
 8005286:	f000 80aa 	beq.w	80053de <_vfiprintf_r+0x20e>
 800528a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800528c:	445a      	add	r2, fp
 800528e:	9209      	str	r2, [sp, #36]	; 0x24
 8005290:	f89a 3000 	ldrb.w	r3, [sl]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80a2 	beq.w	80053de <_vfiprintf_r+0x20e>
 800529a:	2300      	movs	r3, #0
 800529c:	f04f 32ff 	mov.w	r2, #4294967295
 80052a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052a4:	f10a 0a01 	add.w	sl, sl, #1
 80052a8:	9304      	str	r3, [sp, #16]
 80052aa:	9307      	str	r3, [sp, #28]
 80052ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052b0:	931a      	str	r3, [sp, #104]	; 0x68
 80052b2:	4654      	mov	r4, sl
 80052b4:	2205      	movs	r2, #5
 80052b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ba:	4858      	ldr	r0, [pc, #352]	; (800541c <_vfiprintf_r+0x24c>)
 80052bc:	f7fa ffa0 	bl	8000200 <memchr>
 80052c0:	9a04      	ldr	r2, [sp, #16]
 80052c2:	b9d8      	cbnz	r0, 80052fc <_vfiprintf_r+0x12c>
 80052c4:	06d1      	lsls	r1, r2, #27
 80052c6:	bf44      	itt	mi
 80052c8:	2320      	movmi	r3, #32
 80052ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ce:	0713      	lsls	r3, r2, #28
 80052d0:	bf44      	itt	mi
 80052d2:	232b      	movmi	r3, #43	; 0x2b
 80052d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052d8:	f89a 3000 	ldrb.w	r3, [sl]
 80052dc:	2b2a      	cmp	r3, #42	; 0x2a
 80052de:	d015      	beq.n	800530c <_vfiprintf_r+0x13c>
 80052e0:	9a07      	ldr	r2, [sp, #28]
 80052e2:	4654      	mov	r4, sl
 80052e4:	2000      	movs	r0, #0
 80052e6:	f04f 0c0a 	mov.w	ip, #10
 80052ea:	4621      	mov	r1, r4
 80052ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052f0:	3b30      	subs	r3, #48	; 0x30
 80052f2:	2b09      	cmp	r3, #9
 80052f4:	d94e      	bls.n	8005394 <_vfiprintf_r+0x1c4>
 80052f6:	b1b0      	cbz	r0, 8005326 <_vfiprintf_r+0x156>
 80052f8:	9207      	str	r2, [sp, #28]
 80052fa:	e014      	b.n	8005326 <_vfiprintf_r+0x156>
 80052fc:	eba0 0308 	sub.w	r3, r0, r8
 8005300:	fa09 f303 	lsl.w	r3, r9, r3
 8005304:	4313      	orrs	r3, r2
 8005306:	9304      	str	r3, [sp, #16]
 8005308:	46a2      	mov	sl, r4
 800530a:	e7d2      	b.n	80052b2 <_vfiprintf_r+0xe2>
 800530c:	9b03      	ldr	r3, [sp, #12]
 800530e:	1d19      	adds	r1, r3, #4
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	9103      	str	r1, [sp, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	bfbb      	ittet	lt
 8005318:	425b      	neglt	r3, r3
 800531a:	f042 0202 	orrlt.w	r2, r2, #2
 800531e:	9307      	strge	r3, [sp, #28]
 8005320:	9307      	strlt	r3, [sp, #28]
 8005322:	bfb8      	it	lt
 8005324:	9204      	strlt	r2, [sp, #16]
 8005326:	7823      	ldrb	r3, [r4, #0]
 8005328:	2b2e      	cmp	r3, #46	; 0x2e
 800532a:	d10c      	bne.n	8005346 <_vfiprintf_r+0x176>
 800532c:	7863      	ldrb	r3, [r4, #1]
 800532e:	2b2a      	cmp	r3, #42	; 0x2a
 8005330:	d135      	bne.n	800539e <_vfiprintf_r+0x1ce>
 8005332:	9b03      	ldr	r3, [sp, #12]
 8005334:	1d1a      	adds	r2, r3, #4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	9203      	str	r2, [sp, #12]
 800533a:	2b00      	cmp	r3, #0
 800533c:	bfb8      	it	lt
 800533e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005342:	3402      	adds	r4, #2
 8005344:	9305      	str	r3, [sp, #20]
 8005346:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800542c <_vfiprintf_r+0x25c>
 800534a:	7821      	ldrb	r1, [r4, #0]
 800534c:	2203      	movs	r2, #3
 800534e:	4650      	mov	r0, sl
 8005350:	f7fa ff56 	bl	8000200 <memchr>
 8005354:	b140      	cbz	r0, 8005368 <_vfiprintf_r+0x198>
 8005356:	2340      	movs	r3, #64	; 0x40
 8005358:	eba0 000a 	sub.w	r0, r0, sl
 800535c:	fa03 f000 	lsl.w	r0, r3, r0
 8005360:	9b04      	ldr	r3, [sp, #16]
 8005362:	4303      	orrs	r3, r0
 8005364:	3401      	adds	r4, #1
 8005366:	9304      	str	r3, [sp, #16]
 8005368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800536c:	482c      	ldr	r0, [pc, #176]	; (8005420 <_vfiprintf_r+0x250>)
 800536e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005372:	2206      	movs	r2, #6
 8005374:	f7fa ff44 	bl	8000200 <memchr>
 8005378:	2800      	cmp	r0, #0
 800537a:	d03f      	beq.n	80053fc <_vfiprintf_r+0x22c>
 800537c:	4b29      	ldr	r3, [pc, #164]	; (8005424 <_vfiprintf_r+0x254>)
 800537e:	bb1b      	cbnz	r3, 80053c8 <_vfiprintf_r+0x1f8>
 8005380:	9b03      	ldr	r3, [sp, #12]
 8005382:	3307      	adds	r3, #7
 8005384:	f023 0307 	bic.w	r3, r3, #7
 8005388:	3308      	adds	r3, #8
 800538a:	9303      	str	r3, [sp, #12]
 800538c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800538e:	443b      	add	r3, r7
 8005390:	9309      	str	r3, [sp, #36]	; 0x24
 8005392:	e767      	b.n	8005264 <_vfiprintf_r+0x94>
 8005394:	fb0c 3202 	mla	r2, ip, r2, r3
 8005398:	460c      	mov	r4, r1
 800539a:	2001      	movs	r0, #1
 800539c:	e7a5      	b.n	80052ea <_vfiprintf_r+0x11a>
 800539e:	2300      	movs	r3, #0
 80053a0:	3401      	adds	r4, #1
 80053a2:	9305      	str	r3, [sp, #20]
 80053a4:	4619      	mov	r1, r3
 80053a6:	f04f 0c0a 	mov.w	ip, #10
 80053aa:	4620      	mov	r0, r4
 80053ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b0:	3a30      	subs	r2, #48	; 0x30
 80053b2:	2a09      	cmp	r2, #9
 80053b4:	d903      	bls.n	80053be <_vfiprintf_r+0x1ee>
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0c5      	beq.n	8005346 <_vfiprintf_r+0x176>
 80053ba:	9105      	str	r1, [sp, #20]
 80053bc:	e7c3      	b.n	8005346 <_vfiprintf_r+0x176>
 80053be:	fb0c 2101 	mla	r1, ip, r1, r2
 80053c2:	4604      	mov	r4, r0
 80053c4:	2301      	movs	r3, #1
 80053c6:	e7f0      	b.n	80053aa <_vfiprintf_r+0x1da>
 80053c8:	ab03      	add	r3, sp, #12
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	462a      	mov	r2, r5
 80053ce:	4b16      	ldr	r3, [pc, #88]	; (8005428 <_vfiprintf_r+0x258>)
 80053d0:	a904      	add	r1, sp, #16
 80053d2:	4630      	mov	r0, r6
 80053d4:	f7fd ffee 	bl	80033b4 <_printf_float>
 80053d8:	4607      	mov	r7, r0
 80053da:	1c78      	adds	r0, r7, #1
 80053dc:	d1d6      	bne.n	800538c <_vfiprintf_r+0x1bc>
 80053de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053e0:	07d9      	lsls	r1, r3, #31
 80053e2:	d405      	bmi.n	80053f0 <_vfiprintf_r+0x220>
 80053e4:	89ab      	ldrh	r3, [r5, #12]
 80053e6:	059a      	lsls	r2, r3, #22
 80053e8:	d402      	bmi.n	80053f0 <_vfiprintf_r+0x220>
 80053ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053ec:	f000 faaf 	bl	800594e <__retarget_lock_release_recursive>
 80053f0:	89ab      	ldrh	r3, [r5, #12]
 80053f2:	065b      	lsls	r3, r3, #25
 80053f4:	f53f af12 	bmi.w	800521c <_vfiprintf_r+0x4c>
 80053f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053fa:	e711      	b.n	8005220 <_vfiprintf_r+0x50>
 80053fc:	ab03      	add	r3, sp, #12
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	462a      	mov	r2, r5
 8005402:	4b09      	ldr	r3, [pc, #36]	; (8005428 <_vfiprintf_r+0x258>)
 8005404:	a904      	add	r1, sp, #16
 8005406:	4630      	mov	r0, r6
 8005408:	f7fe fa78 	bl	80038fc <_printf_i>
 800540c:	e7e4      	b.n	80053d8 <_vfiprintf_r+0x208>
 800540e:	bf00      	nop
 8005410:	08005fe4 	.word	0x08005fe4
 8005414:	08006004 	.word	0x08006004
 8005418:	08005fc4 	.word	0x08005fc4
 800541c:	08005eb2 	.word	0x08005eb2
 8005420:	08005ebc 	.word	0x08005ebc
 8005424:	080033b5 	.word	0x080033b5
 8005428:	080051ab 	.word	0x080051ab
 800542c:	08005eb8 	.word	0x08005eb8

08005430 <__swbuf_r>:
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	460e      	mov	r6, r1
 8005434:	4614      	mov	r4, r2
 8005436:	4605      	mov	r5, r0
 8005438:	b118      	cbz	r0, 8005442 <__swbuf_r+0x12>
 800543a:	6983      	ldr	r3, [r0, #24]
 800543c:	b90b      	cbnz	r3, 8005442 <__swbuf_r+0x12>
 800543e:	f000 f9e7 	bl	8005810 <__sinit>
 8005442:	4b21      	ldr	r3, [pc, #132]	; (80054c8 <__swbuf_r+0x98>)
 8005444:	429c      	cmp	r4, r3
 8005446:	d12b      	bne.n	80054a0 <__swbuf_r+0x70>
 8005448:	686c      	ldr	r4, [r5, #4]
 800544a:	69a3      	ldr	r3, [r4, #24]
 800544c:	60a3      	str	r3, [r4, #8]
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	071a      	lsls	r2, r3, #28
 8005452:	d52f      	bpl.n	80054b4 <__swbuf_r+0x84>
 8005454:	6923      	ldr	r3, [r4, #16]
 8005456:	b36b      	cbz	r3, 80054b4 <__swbuf_r+0x84>
 8005458:	6923      	ldr	r3, [r4, #16]
 800545a:	6820      	ldr	r0, [r4, #0]
 800545c:	1ac0      	subs	r0, r0, r3
 800545e:	6963      	ldr	r3, [r4, #20]
 8005460:	b2f6      	uxtb	r6, r6
 8005462:	4283      	cmp	r3, r0
 8005464:	4637      	mov	r7, r6
 8005466:	dc04      	bgt.n	8005472 <__swbuf_r+0x42>
 8005468:	4621      	mov	r1, r4
 800546a:	4628      	mov	r0, r5
 800546c:	f000 f93c 	bl	80056e8 <_fflush_r>
 8005470:	bb30      	cbnz	r0, 80054c0 <__swbuf_r+0x90>
 8005472:	68a3      	ldr	r3, [r4, #8]
 8005474:	3b01      	subs	r3, #1
 8005476:	60a3      	str	r3, [r4, #8]
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	6022      	str	r2, [r4, #0]
 800547e:	701e      	strb	r6, [r3, #0]
 8005480:	6963      	ldr	r3, [r4, #20]
 8005482:	3001      	adds	r0, #1
 8005484:	4283      	cmp	r3, r0
 8005486:	d004      	beq.n	8005492 <__swbuf_r+0x62>
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	07db      	lsls	r3, r3, #31
 800548c:	d506      	bpl.n	800549c <__swbuf_r+0x6c>
 800548e:	2e0a      	cmp	r6, #10
 8005490:	d104      	bne.n	800549c <__swbuf_r+0x6c>
 8005492:	4621      	mov	r1, r4
 8005494:	4628      	mov	r0, r5
 8005496:	f000 f927 	bl	80056e8 <_fflush_r>
 800549a:	b988      	cbnz	r0, 80054c0 <__swbuf_r+0x90>
 800549c:	4638      	mov	r0, r7
 800549e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <__swbuf_r+0x9c>)
 80054a2:	429c      	cmp	r4, r3
 80054a4:	d101      	bne.n	80054aa <__swbuf_r+0x7a>
 80054a6:	68ac      	ldr	r4, [r5, #8]
 80054a8:	e7cf      	b.n	800544a <__swbuf_r+0x1a>
 80054aa:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <__swbuf_r+0xa0>)
 80054ac:	429c      	cmp	r4, r3
 80054ae:	bf08      	it	eq
 80054b0:	68ec      	ldreq	r4, [r5, #12]
 80054b2:	e7ca      	b.n	800544a <__swbuf_r+0x1a>
 80054b4:	4621      	mov	r1, r4
 80054b6:	4628      	mov	r0, r5
 80054b8:	f000 f81a 	bl	80054f0 <__swsetup_r>
 80054bc:	2800      	cmp	r0, #0
 80054be:	d0cb      	beq.n	8005458 <__swbuf_r+0x28>
 80054c0:	f04f 37ff 	mov.w	r7, #4294967295
 80054c4:	e7ea      	b.n	800549c <__swbuf_r+0x6c>
 80054c6:	bf00      	nop
 80054c8:	08005fe4 	.word	0x08005fe4
 80054cc:	08006004 	.word	0x08006004
 80054d0:	08005fc4 	.word	0x08005fc4

080054d4 <__ascii_wctomb>:
 80054d4:	b149      	cbz	r1, 80054ea <__ascii_wctomb+0x16>
 80054d6:	2aff      	cmp	r2, #255	; 0xff
 80054d8:	bf85      	ittet	hi
 80054da:	238a      	movhi	r3, #138	; 0x8a
 80054dc:	6003      	strhi	r3, [r0, #0]
 80054de:	700a      	strbls	r2, [r1, #0]
 80054e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80054e4:	bf98      	it	ls
 80054e6:	2001      	movls	r0, #1
 80054e8:	4770      	bx	lr
 80054ea:	4608      	mov	r0, r1
 80054ec:	4770      	bx	lr
	...

080054f0 <__swsetup_r>:
 80054f0:	4b32      	ldr	r3, [pc, #200]	; (80055bc <__swsetup_r+0xcc>)
 80054f2:	b570      	push	{r4, r5, r6, lr}
 80054f4:	681d      	ldr	r5, [r3, #0]
 80054f6:	4606      	mov	r6, r0
 80054f8:	460c      	mov	r4, r1
 80054fa:	b125      	cbz	r5, 8005506 <__swsetup_r+0x16>
 80054fc:	69ab      	ldr	r3, [r5, #24]
 80054fe:	b913      	cbnz	r3, 8005506 <__swsetup_r+0x16>
 8005500:	4628      	mov	r0, r5
 8005502:	f000 f985 	bl	8005810 <__sinit>
 8005506:	4b2e      	ldr	r3, [pc, #184]	; (80055c0 <__swsetup_r+0xd0>)
 8005508:	429c      	cmp	r4, r3
 800550a:	d10f      	bne.n	800552c <__swsetup_r+0x3c>
 800550c:	686c      	ldr	r4, [r5, #4]
 800550e:	89a3      	ldrh	r3, [r4, #12]
 8005510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005514:	0719      	lsls	r1, r3, #28
 8005516:	d42c      	bmi.n	8005572 <__swsetup_r+0x82>
 8005518:	06dd      	lsls	r5, r3, #27
 800551a:	d411      	bmi.n	8005540 <__swsetup_r+0x50>
 800551c:	2309      	movs	r3, #9
 800551e:	6033      	str	r3, [r6, #0]
 8005520:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005524:	81a3      	strh	r3, [r4, #12]
 8005526:	f04f 30ff 	mov.w	r0, #4294967295
 800552a:	e03e      	b.n	80055aa <__swsetup_r+0xba>
 800552c:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <__swsetup_r+0xd4>)
 800552e:	429c      	cmp	r4, r3
 8005530:	d101      	bne.n	8005536 <__swsetup_r+0x46>
 8005532:	68ac      	ldr	r4, [r5, #8]
 8005534:	e7eb      	b.n	800550e <__swsetup_r+0x1e>
 8005536:	4b24      	ldr	r3, [pc, #144]	; (80055c8 <__swsetup_r+0xd8>)
 8005538:	429c      	cmp	r4, r3
 800553a:	bf08      	it	eq
 800553c:	68ec      	ldreq	r4, [r5, #12]
 800553e:	e7e6      	b.n	800550e <__swsetup_r+0x1e>
 8005540:	0758      	lsls	r0, r3, #29
 8005542:	d512      	bpl.n	800556a <__swsetup_r+0x7a>
 8005544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005546:	b141      	cbz	r1, 800555a <__swsetup_r+0x6a>
 8005548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800554c:	4299      	cmp	r1, r3
 800554e:	d002      	beq.n	8005556 <__swsetup_r+0x66>
 8005550:	4630      	mov	r0, r6
 8005552:	f7ff fd0b 	bl	8004f6c <_free_r>
 8005556:	2300      	movs	r3, #0
 8005558:	6363      	str	r3, [r4, #52]	; 0x34
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005560:	81a3      	strh	r3, [r4, #12]
 8005562:	2300      	movs	r3, #0
 8005564:	6063      	str	r3, [r4, #4]
 8005566:	6923      	ldr	r3, [r4, #16]
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	89a3      	ldrh	r3, [r4, #12]
 800556c:	f043 0308 	orr.w	r3, r3, #8
 8005570:	81a3      	strh	r3, [r4, #12]
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	b94b      	cbnz	r3, 800558a <__swsetup_r+0x9a>
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800557c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005580:	d003      	beq.n	800558a <__swsetup_r+0x9a>
 8005582:	4621      	mov	r1, r4
 8005584:	4630      	mov	r0, r6
 8005586:	f000 fa07 	bl	8005998 <__smakebuf_r>
 800558a:	89a0      	ldrh	r0, [r4, #12]
 800558c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005590:	f010 0301 	ands.w	r3, r0, #1
 8005594:	d00a      	beq.n	80055ac <__swsetup_r+0xbc>
 8005596:	2300      	movs	r3, #0
 8005598:	60a3      	str	r3, [r4, #8]
 800559a:	6963      	ldr	r3, [r4, #20]
 800559c:	425b      	negs	r3, r3
 800559e:	61a3      	str	r3, [r4, #24]
 80055a0:	6923      	ldr	r3, [r4, #16]
 80055a2:	b943      	cbnz	r3, 80055b6 <__swsetup_r+0xc6>
 80055a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055a8:	d1ba      	bne.n	8005520 <__swsetup_r+0x30>
 80055aa:	bd70      	pop	{r4, r5, r6, pc}
 80055ac:	0781      	lsls	r1, r0, #30
 80055ae:	bf58      	it	pl
 80055b0:	6963      	ldrpl	r3, [r4, #20]
 80055b2:	60a3      	str	r3, [r4, #8]
 80055b4:	e7f4      	b.n	80055a0 <__swsetup_r+0xb0>
 80055b6:	2000      	movs	r0, #0
 80055b8:	e7f7      	b.n	80055aa <__swsetup_r+0xba>
 80055ba:	bf00      	nop
 80055bc:	20000010 	.word	0x20000010
 80055c0:	08005fe4 	.word	0x08005fe4
 80055c4:	08006004 	.word	0x08006004
 80055c8:	08005fc4 	.word	0x08005fc4

080055cc <abort>:
 80055cc:	b508      	push	{r3, lr}
 80055ce:	2006      	movs	r0, #6
 80055d0:	f000 fa4a 	bl	8005a68 <raise>
 80055d4:	2001      	movs	r0, #1
 80055d6:	f7fc fb13 	bl	8001c00 <_exit>
	...

080055dc <__sflush_r>:
 80055dc:	898a      	ldrh	r2, [r1, #12]
 80055de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e2:	4605      	mov	r5, r0
 80055e4:	0710      	lsls	r0, r2, #28
 80055e6:	460c      	mov	r4, r1
 80055e8:	d458      	bmi.n	800569c <__sflush_r+0xc0>
 80055ea:	684b      	ldr	r3, [r1, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	dc05      	bgt.n	80055fc <__sflush_r+0x20>
 80055f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	dc02      	bgt.n	80055fc <__sflush_r+0x20>
 80055f6:	2000      	movs	r0, #0
 80055f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055fe:	2e00      	cmp	r6, #0
 8005600:	d0f9      	beq.n	80055f6 <__sflush_r+0x1a>
 8005602:	2300      	movs	r3, #0
 8005604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005608:	682f      	ldr	r7, [r5, #0]
 800560a:	602b      	str	r3, [r5, #0]
 800560c:	d032      	beq.n	8005674 <__sflush_r+0x98>
 800560e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	075a      	lsls	r2, r3, #29
 8005614:	d505      	bpl.n	8005622 <__sflush_r+0x46>
 8005616:	6863      	ldr	r3, [r4, #4]
 8005618:	1ac0      	subs	r0, r0, r3
 800561a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800561c:	b10b      	cbz	r3, 8005622 <__sflush_r+0x46>
 800561e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005620:	1ac0      	subs	r0, r0, r3
 8005622:	2300      	movs	r3, #0
 8005624:	4602      	mov	r2, r0
 8005626:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005628:	6a21      	ldr	r1, [r4, #32]
 800562a:	4628      	mov	r0, r5
 800562c:	47b0      	blx	r6
 800562e:	1c43      	adds	r3, r0, #1
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	d106      	bne.n	8005642 <__sflush_r+0x66>
 8005634:	6829      	ldr	r1, [r5, #0]
 8005636:	291d      	cmp	r1, #29
 8005638:	d82c      	bhi.n	8005694 <__sflush_r+0xb8>
 800563a:	4a2a      	ldr	r2, [pc, #168]	; (80056e4 <__sflush_r+0x108>)
 800563c:	40ca      	lsrs	r2, r1
 800563e:	07d6      	lsls	r6, r2, #31
 8005640:	d528      	bpl.n	8005694 <__sflush_r+0xb8>
 8005642:	2200      	movs	r2, #0
 8005644:	6062      	str	r2, [r4, #4]
 8005646:	04d9      	lsls	r1, r3, #19
 8005648:	6922      	ldr	r2, [r4, #16]
 800564a:	6022      	str	r2, [r4, #0]
 800564c:	d504      	bpl.n	8005658 <__sflush_r+0x7c>
 800564e:	1c42      	adds	r2, r0, #1
 8005650:	d101      	bne.n	8005656 <__sflush_r+0x7a>
 8005652:	682b      	ldr	r3, [r5, #0]
 8005654:	b903      	cbnz	r3, 8005658 <__sflush_r+0x7c>
 8005656:	6560      	str	r0, [r4, #84]	; 0x54
 8005658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800565a:	602f      	str	r7, [r5, #0]
 800565c:	2900      	cmp	r1, #0
 800565e:	d0ca      	beq.n	80055f6 <__sflush_r+0x1a>
 8005660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005664:	4299      	cmp	r1, r3
 8005666:	d002      	beq.n	800566e <__sflush_r+0x92>
 8005668:	4628      	mov	r0, r5
 800566a:	f7ff fc7f 	bl	8004f6c <_free_r>
 800566e:	2000      	movs	r0, #0
 8005670:	6360      	str	r0, [r4, #52]	; 0x34
 8005672:	e7c1      	b.n	80055f8 <__sflush_r+0x1c>
 8005674:	6a21      	ldr	r1, [r4, #32]
 8005676:	2301      	movs	r3, #1
 8005678:	4628      	mov	r0, r5
 800567a:	47b0      	blx	r6
 800567c:	1c41      	adds	r1, r0, #1
 800567e:	d1c7      	bne.n	8005610 <__sflush_r+0x34>
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0c4      	beq.n	8005610 <__sflush_r+0x34>
 8005686:	2b1d      	cmp	r3, #29
 8005688:	d001      	beq.n	800568e <__sflush_r+0xb2>
 800568a:	2b16      	cmp	r3, #22
 800568c:	d101      	bne.n	8005692 <__sflush_r+0xb6>
 800568e:	602f      	str	r7, [r5, #0]
 8005690:	e7b1      	b.n	80055f6 <__sflush_r+0x1a>
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	e7ad      	b.n	80055f8 <__sflush_r+0x1c>
 800569c:	690f      	ldr	r7, [r1, #16]
 800569e:	2f00      	cmp	r7, #0
 80056a0:	d0a9      	beq.n	80055f6 <__sflush_r+0x1a>
 80056a2:	0793      	lsls	r3, r2, #30
 80056a4:	680e      	ldr	r6, [r1, #0]
 80056a6:	bf08      	it	eq
 80056a8:	694b      	ldreq	r3, [r1, #20]
 80056aa:	600f      	str	r7, [r1, #0]
 80056ac:	bf18      	it	ne
 80056ae:	2300      	movne	r3, #0
 80056b0:	eba6 0807 	sub.w	r8, r6, r7
 80056b4:	608b      	str	r3, [r1, #8]
 80056b6:	f1b8 0f00 	cmp.w	r8, #0
 80056ba:	dd9c      	ble.n	80055f6 <__sflush_r+0x1a>
 80056bc:	6a21      	ldr	r1, [r4, #32]
 80056be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056c0:	4643      	mov	r3, r8
 80056c2:	463a      	mov	r2, r7
 80056c4:	4628      	mov	r0, r5
 80056c6:	47b0      	blx	r6
 80056c8:	2800      	cmp	r0, #0
 80056ca:	dc06      	bgt.n	80056da <__sflush_r+0xfe>
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d2:	81a3      	strh	r3, [r4, #12]
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295
 80056d8:	e78e      	b.n	80055f8 <__sflush_r+0x1c>
 80056da:	4407      	add	r7, r0
 80056dc:	eba8 0800 	sub.w	r8, r8, r0
 80056e0:	e7e9      	b.n	80056b6 <__sflush_r+0xda>
 80056e2:	bf00      	nop
 80056e4:	20400001 	.word	0x20400001

080056e8 <_fflush_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	690b      	ldr	r3, [r1, #16]
 80056ec:	4605      	mov	r5, r0
 80056ee:	460c      	mov	r4, r1
 80056f0:	b913      	cbnz	r3, 80056f8 <_fflush_r+0x10>
 80056f2:	2500      	movs	r5, #0
 80056f4:	4628      	mov	r0, r5
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	b118      	cbz	r0, 8005702 <_fflush_r+0x1a>
 80056fa:	6983      	ldr	r3, [r0, #24]
 80056fc:	b90b      	cbnz	r3, 8005702 <_fflush_r+0x1a>
 80056fe:	f000 f887 	bl	8005810 <__sinit>
 8005702:	4b14      	ldr	r3, [pc, #80]	; (8005754 <_fflush_r+0x6c>)
 8005704:	429c      	cmp	r4, r3
 8005706:	d11b      	bne.n	8005740 <_fflush_r+0x58>
 8005708:	686c      	ldr	r4, [r5, #4]
 800570a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0ef      	beq.n	80056f2 <_fflush_r+0xa>
 8005712:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005714:	07d0      	lsls	r0, r2, #31
 8005716:	d404      	bmi.n	8005722 <_fflush_r+0x3a>
 8005718:	0599      	lsls	r1, r3, #22
 800571a:	d402      	bmi.n	8005722 <_fflush_r+0x3a>
 800571c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800571e:	f000 f915 	bl	800594c <__retarget_lock_acquire_recursive>
 8005722:	4628      	mov	r0, r5
 8005724:	4621      	mov	r1, r4
 8005726:	f7ff ff59 	bl	80055dc <__sflush_r>
 800572a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800572c:	07da      	lsls	r2, r3, #31
 800572e:	4605      	mov	r5, r0
 8005730:	d4e0      	bmi.n	80056f4 <_fflush_r+0xc>
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	059b      	lsls	r3, r3, #22
 8005736:	d4dd      	bmi.n	80056f4 <_fflush_r+0xc>
 8005738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800573a:	f000 f908 	bl	800594e <__retarget_lock_release_recursive>
 800573e:	e7d9      	b.n	80056f4 <_fflush_r+0xc>
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <_fflush_r+0x70>)
 8005742:	429c      	cmp	r4, r3
 8005744:	d101      	bne.n	800574a <_fflush_r+0x62>
 8005746:	68ac      	ldr	r4, [r5, #8]
 8005748:	e7df      	b.n	800570a <_fflush_r+0x22>
 800574a:	4b04      	ldr	r3, [pc, #16]	; (800575c <_fflush_r+0x74>)
 800574c:	429c      	cmp	r4, r3
 800574e:	bf08      	it	eq
 8005750:	68ec      	ldreq	r4, [r5, #12]
 8005752:	e7da      	b.n	800570a <_fflush_r+0x22>
 8005754:	08005fe4 	.word	0x08005fe4
 8005758:	08006004 	.word	0x08006004
 800575c:	08005fc4 	.word	0x08005fc4

08005760 <std>:
 8005760:	2300      	movs	r3, #0
 8005762:	b510      	push	{r4, lr}
 8005764:	4604      	mov	r4, r0
 8005766:	e9c0 3300 	strd	r3, r3, [r0]
 800576a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800576e:	6083      	str	r3, [r0, #8]
 8005770:	8181      	strh	r1, [r0, #12]
 8005772:	6643      	str	r3, [r0, #100]	; 0x64
 8005774:	81c2      	strh	r2, [r0, #14]
 8005776:	6183      	str	r3, [r0, #24]
 8005778:	4619      	mov	r1, r3
 800577a:	2208      	movs	r2, #8
 800577c:	305c      	adds	r0, #92	; 0x5c
 800577e:	f7fd fd71 	bl	8003264 <memset>
 8005782:	4b05      	ldr	r3, [pc, #20]	; (8005798 <std+0x38>)
 8005784:	6263      	str	r3, [r4, #36]	; 0x24
 8005786:	4b05      	ldr	r3, [pc, #20]	; (800579c <std+0x3c>)
 8005788:	62a3      	str	r3, [r4, #40]	; 0x28
 800578a:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <std+0x40>)
 800578c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800578e:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <std+0x44>)
 8005790:	6224      	str	r4, [r4, #32]
 8005792:	6323      	str	r3, [r4, #48]	; 0x30
 8005794:	bd10      	pop	{r4, pc}
 8005796:	bf00      	nop
 8005798:	08005aa1 	.word	0x08005aa1
 800579c:	08005ac3 	.word	0x08005ac3
 80057a0:	08005afb 	.word	0x08005afb
 80057a4:	08005b1f 	.word	0x08005b1f

080057a8 <_cleanup_r>:
 80057a8:	4901      	ldr	r1, [pc, #4]	; (80057b0 <_cleanup_r+0x8>)
 80057aa:	f000 b8af 	b.w	800590c <_fwalk_reent>
 80057ae:	bf00      	nop
 80057b0:	080056e9 	.word	0x080056e9

080057b4 <__sfmoreglue>:
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	1e4a      	subs	r2, r1, #1
 80057b8:	2568      	movs	r5, #104	; 0x68
 80057ba:	4355      	muls	r5, r2
 80057bc:	460e      	mov	r6, r1
 80057be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80057c2:	f7ff fc23 	bl	800500c <_malloc_r>
 80057c6:	4604      	mov	r4, r0
 80057c8:	b140      	cbz	r0, 80057dc <__sfmoreglue+0x28>
 80057ca:	2100      	movs	r1, #0
 80057cc:	e9c0 1600 	strd	r1, r6, [r0]
 80057d0:	300c      	adds	r0, #12
 80057d2:	60a0      	str	r0, [r4, #8]
 80057d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057d8:	f7fd fd44 	bl	8003264 <memset>
 80057dc:	4620      	mov	r0, r4
 80057de:	bd70      	pop	{r4, r5, r6, pc}

080057e0 <__sfp_lock_acquire>:
 80057e0:	4801      	ldr	r0, [pc, #4]	; (80057e8 <__sfp_lock_acquire+0x8>)
 80057e2:	f000 b8b3 	b.w	800594c <__retarget_lock_acquire_recursive>
 80057e6:	bf00      	nop
 80057e8:	20012fb0 	.word	0x20012fb0

080057ec <__sfp_lock_release>:
 80057ec:	4801      	ldr	r0, [pc, #4]	; (80057f4 <__sfp_lock_release+0x8>)
 80057ee:	f000 b8ae 	b.w	800594e <__retarget_lock_release_recursive>
 80057f2:	bf00      	nop
 80057f4:	20012fb0 	.word	0x20012fb0

080057f8 <__sinit_lock_acquire>:
 80057f8:	4801      	ldr	r0, [pc, #4]	; (8005800 <__sinit_lock_acquire+0x8>)
 80057fa:	f000 b8a7 	b.w	800594c <__retarget_lock_acquire_recursive>
 80057fe:	bf00      	nop
 8005800:	20012fab 	.word	0x20012fab

08005804 <__sinit_lock_release>:
 8005804:	4801      	ldr	r0, [pc, #4]	; (800580c <__sinit_lock_release+0x8>)
 8005806:	f000 b8a2 	b.w	800594e <__retarget_lock_release_recursive>
 800580a:	bf00      	nop
 800580c:	20012fab 	.word	0x20012fab

08005810 <__sinit>:
 8005810:	b510      	push	{r4, lr}
 8005812:	4604      	mov	r4, r0
 8005814:	f7ff fff0 	bl	80057f8 <__sinit_lock_acquire>
 8005818:	69a3      	ldr	r3, [r4, #24]
 800581a:	b11b      	cbz	r3, 8005824 <__sinit+0x14>
 800581c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005820:	f7ff bff0 	b.w	8005804 <__sinit_lock_release>
 8005824:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005828:	6523      	str	r3, [r4, #80]	; 0x50
 800582a:	4b13      	ldr	r3, [pc, #76]	; (8005878 <__sinit+0x68>)
 800582c:	4a13      	ldr	r2, [pc, #76]	; (800587c <__sinit+0x6c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	62a2      	str	r2, [r4, #40]	; 0x28
 8005832:	42a3      	cmp	r3, r4
 8005834:	bf04      	itt	eq
 8005836:	2301      	moveq	r3, #1
 8005838:	61a3      	streq	r3, [r4, #24]
 800583a:	4620      	mov	r0, r4
 800583c:	f000 f820 	bl	8005880 <__sfp>
 8005840:	6060      	str	r0, [r4, #4]
 8005842:	4620      	mov	r0, r4
 8005844:	f000 f81c 	bl	8005880 <__sfp>
 8005848:	60a0      	str	r0, [r4, #8]
 800584a:	4620      	mov	r0, r4
 800584c:	f000 f818 	bl	8005880 <__sfp>
 8005850:	2200      	movs	r2, #0
 8005852:	60e0      	str	r0, [r4, #12]
 8005854:	2104      	movs	r1, #4
 8005856:	6860      	ldr	r0, [r4, #4]
 8005858:	f7ff ff82 	bl	8005760 <std>
 800585c:	68a0      	ldr	r0, [r4, #8]
 800585e:	2201      	movs	r2, #1
 8005860:	2109      	movs	r1, #9
 8005862:	f7ff ff7d 	bl	8005760 <std>
 8005866:	68e0      	ldr	r0, [r4, #12]
 8005868:	2202      	movs	r2, #2
 800586a:	2112      	movs	r1, #18
 800586c:	f7ff ff78 	bl	8005760 <std>
 8005870:	2301      	movs	r3, #1
 8005872:	61a3      	str	r3, [r4, #24]
 8005874:	e7d2      	b.n	800581c <__sinit+0xc>
 8005876:	bf00      	nop
 8005878:	08005c40 	.word	0x08005c40
 800587c:	080057a9 	.word	0x080057a9

08005880 <__sfp>:
 8005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005882:	4607      	mov	r7, r0
 8005884:	f7ff ffac 	bl	80057e0 <__sfp_lock_acquire>
 8005888:	4b1e      	ldr	r3, [pc, #120]	; (8005904 <__sfp+0x84>)
 800588a:	681e      	ldr	r6, [r3, #0]
 800588c:	69b3      	ldr	r3, [r6, #24]
 800588e:	b913      	cbnz	r3, 8005896 <__sfp+0x16>
 8005890:	4630      	mov	r0, r6
 8005892:	f7ff ffbd 	bl	8005810 <__sinit>
 8005896:	3648      	adds	r6, #72	; 0x48
 8005898:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800589c:	3b01      	subs	r3, #1
 800589e:	d503      	bpl.n	80058a8 <__sfp+0x28>
 80058a0:	6833      	ldr	r3, [r6, #0]
 80058a2:	b30b      	cbz	r3, 80058e8 <__sfp+0x68>
 80058a4:	6836      	ldr	r6, [r6, #0]
 80058a6:	e7f7      	b.n	8005898 <__sfp+0x18>
 80058a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058ac:	b9d5      	cbnz	r5, 80058e4 <__sfp+0x64>
 80058ae:	4b16      	ldr	r3, [pc, #88]	; (8005908 <__sfp+0x88>)
 80058b0:	60e3      	str	r3, [r4, #12]
 80058b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058b6:	6665      	str	r5, [r4, #100]	; 0x64
 80058b8:	f000 f847 	bl	800594a <__retarget_lock_init_recursive>
 80058bc:	f7ff ff96 	bl	80057ec <__sfp_lock_release>
 80058c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80058c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80058c8:	6025      	str	r5, [r4, #0]
 80058ca:	61a5      	str	r5, [r4, #24]
 80058cc:	2208      	movs	r2, #8
 80058ce:	4629      	mov	r1, r5
 80058d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80058d4:	f7fd fcc6 	bl	8003264 <memset>
 80058d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80058dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80058e0:	4620      	mov	r0, r4
 80058e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058e4:	3468      	adds	r4, #104	; 0x68
 80058e6:	e7d9      	b.n	800589c <__sfp+0x1c>
 80058e8:	2104      	movs	r1, #4
 80058ea:	4638      	mov	r0, r7
 80058ec:	f7ff ff62 	bl	80057b4 <__sfmoreglue>
 80058f0:	4604      	mov	r4, r0
 80058f2:	6030      	str	r0, [r6, #0]
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d1d5      	bne.n	80058a4 <__sfp+0x24>
 80058f8:	f7ff ff78 	bl	80057ec <__sfp_lock_release>
 80058fc:	230c      	movs	r3, #12
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	e7ee      	b.n	80058e0 <__sfp+0x60>
 8005902:	bf00      	nop
 8005904:	08005c40 	.word	0x08005c40
 8005908:	ffff0001 	.word	0xffff0001

0800590c <_fwalk_reent>:
 800590c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005910:	4606      	mov	r6, r0
 8005912:	4688      	mov	r8, r1
 8005914:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005918:	2700      	movs	r7, #0
 800591a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800591e:	f1b9 0901 	subs.w	r9, r9, #1
 8005922:	d505      	bpl.n	8005930 <_fwalk_reent+0x24>
 8005924:	6824      	ldr	r4, [r4, #0]
 8005926:	2c00      	cmp	r4, #0
 8005928:	d1f7      	bne.n	800591a <_fwalk_reent+0xe>
 800592a:	4638      	mov	r0, r7
 800592c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005930:	89ab      	ldrh	r3, [r5, #12]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d907      	bls.n	8005946 <_fwalk_reent+0x3a>
 8005936:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800593a:	3301      	adds	r3, #1
 800593c:	d003      	beq.n	8005946 <_fwalk_reent+0x3a>
 800593e:	4629      	mov	r1, r5
 8005940:	4630      	mov	r0, r6
 8005942:	47c0      	blx	r8
 8005944:	4307      	orrs	r7, r0
 8005946:	3568      	adds	r5, #104	; 0x68
 8005948:	e7e9      	b.n	800591e <_fwalk_reent+0x12>

0800594a <__retarget_lock_init_recursive>:
 800594a:	4770      	bx	lr

0800594c <__retarget_lock_acquire_recursive>:
 800594c:	4770      	bx	lr

0800594e <__retarget_lock_release_recursive>:
 800594e:	4770      	bx	lr

08005950 <__swhatbuf_r>:
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	460e      	mov	r6, r1
 8005954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005958:	2900      	cmp	r1, #0
 800595a:	b096      	sub	sp, #88	; 0x58
 800595c:	4614      	mov	r4, r2
 800595e:	461d      	mov	r5, r3
 8005960:	da07      	bge.n	8005972 <__swhatbuf_r+0x22>
 8005962:	2300      	movs	r3, #0
 8005964:	602b      	str	r3, [r5, #0]
 8005966:	89b3      	ldrh	r3, [r6, #12]
 8005968:	061a      	lsls	r2, r3, #24
 800596a:	d410      	bmi.n	800598e <__swhatbuf_r+0x3e>
 800596c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005970:	e00e      	b.n	8005990 <__swhatbuf_r+0x40>
 8005972:	466a      	mov	r2, sp
 8005974:	f000 f8fa 	bl	8005b6c <_fstat_r>
 8005978:	2800      	cmp	r0, #0
 800597a:	dbf2      	blt.n	8005962 <__swhatbuf_r+0x12>
 800597c:	9a01      	ldr	r2, [sp, #4]
 800597e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005982:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005986:	425a      	negs	r2, r3
 8005988:	415a      	adcs	r2, r3
 800598a:	602a      	str	r2, [r5, #0]
 800598c:	e7ee      	b.n	800596c <__swhatbuf_r+0x1c>
 800598e:	2340      	movs	r3, #64	; 0x40
 8005990:	2000      	movs	r0, #0
 8005992:	6023      	str	r3, [r4, #0]
 8005994:	b016      	add	sp, #88	; 0x58
 8005996:	bd70      	pop	{r4, r5, r6, pc}

08005998 <__smakebuf_r>:
 8005998:	898b      	ldrh	r3, [r1, #12]
 800599a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800599c:	079d      	lsls	r5, r3, #30
 800599e:	4606      	mov	r6, r0
 80059a0:	460c      	mov	r4, r1
 80059a2:	d507      	bpl.n	80059b4 <__smakebuf_r+0x1c>
 80059a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	6123      	str	r3, [r4, #16]
 80059ac:	2301      	movs	r3, #1
 80059ae:	6163      	str	r3, [r4, #20]
 80059b0:	b002      	add	sp, #8
 80059b2:	bd70      	pop	{r4, r5, r6, pc}
 80059b4:	ab01      	add	r3, sp, #4
 80059b6:	466a      	mov	r2, sp
 80059b8:	f7ff ffca 	bl	8005950 <__swhatbuf_r>
 80059bc:	9900      	ldr	r1, [sp, #0]
 80059be:	4605      	mov	r5, r0
 80059c0:	4630      	mov	r0, r6
 80059c2:	f7ff fb23 	bl	800500c <_malloc_r>
 80059c6:	b948      	cbnz	r0, 80059dc <__smakebuf_r+0x44>
 80059c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059cc:	059a      	lsls	r2, r3, #22
 80059ce:	d4ef      	bmi.n	80059b0 <__smakebuf_r+0x18>
 80059d0:	f023 0303 	bic.w	r3, r3, #3
 80059d4:	f043 0302 	orr.w	r3, r3, #2
 80059d8:	81a3      	strh	r3, [r4, #12]
 80059da:	e7e3      	b.n	80059a4 <__smakebuf_r+0xc>
 80059dc:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <__smakebuf_r+0x7c>)
 80059de:	62b3      	str	r3, [r6, #40]	; 0x28
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	6020      	str	r0, [r4, #0]
 80059e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e8:	81a3      	strh	r3, [r4, #12]
 80059ea:	9b00      	ldr	r3, [sp, #0]
 80059ec:	6163      	str	r3, [r4, #20]
 80059ee:	9b01      	ldr	r3, [sp, #4]
 80059f0:	6120      	str	r0, [r4, #16]
 80059f2:	b15b      	cbz	r3, 8005a0c <__smakebuf_r+0x74>
 80059f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059f8:	4630      	mov	r0, r6
 80059fa:	f000 f8c9 	bl	8005b90 <_isatty_r>
 80059fe:	b128      	cbz	r0, 8005a0c <__smakebuf_r+0x74>
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	f043 0301 	orr.w	r3, r3, #1
 8005a0a:	81a3      	strh	r3, [r4, #12]
 8005a0c:	89a0      	ldrh	r0, [r4, #12]
 8005a0e:	4305      	orrs	r5, r0
 8005a10:	81a5      	strh	r5, [r4, #12]
 8005a12:	e7cd      	b.n	80059b0 <__smakebuf_r+0x18>
 8005a14:	080057a9 	.word	0x080057a9

08005a18 <_raise_r>:
 8005a18:	291f      	cmp	r1, #31
 8005a1a:	b538      	push	{r3, r4, r5, lr}
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	460d      	mov	r5, r1
 8005a20:	d904      	bls.n	8005a2c <_raise_r+0x14>
 8005a22:	2316      	movs	r3, #22
 8005a24:	6003      	str	r3, [r0, #0]
 8005a26:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005a2e:	b112      	cbz	r2, 8005a36 <_raise_r+0x1e>
 8005a30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a34:	b94b      	cbnz	r3, 8005a4a <_raise_r+0x32>
 8005a36:	4620      	mov	r0, r4
 8005a38:	f000 f830 	bl	8005a9c <_getpid_r>
 8005a3c:	462a      	mov	r2, r5
 8005a3e:	4601      	mov	r1, r0
 8005a40:	4620      	mov	r0, r4
 8005a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a46:	f000 b817 	b.w	8005a78 <_kill_r>
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d00a      	beq.n	8005a64 <_raise_r+0x4c>
 8005a4e:	1c59      	adds	r1, r3, #1
 8005a50:	d103      	bne.n	8005a5a <_raise_r+0x42>
 8005a52:	2316      	movs	r3, #22
 8005a54:	6003      	str	r3, [r0, #0]
 8005a56:	2001      	movs	r0, #1
 8005a58:	e7e7      	b.n	8005a2a <_raise_r+0x12>
 8005a5a:	2400      	movs	r4, #0
 8005a5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005a60:	4628      	mov	r0, r5
 8005a62:	4798      	blx	r3
 8005a64:	2000      	movs	r0, #0
 8005a66:	e7e0      	b.n	8005a2a <_raise_r+0x12>

08005a68 <raise>:
 8005a68:	4b02      	ldr	r3, [pc, #8]	; (8005a74 <raise+0xc>)
 8005a6a:	4601      	mov	r1, r0
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	f7ff bfd3 	b.w	8005a18 <_raise_r>
 8005a72:	bf00      	nop
 8005a74:	20000010 	.word	0x20000010

08005a78 <_kill_r>:
 8005a78:	b538      	push	{r3, r4, r5, lr}
 8005a7a:	4d07      	ldr	r5, [pc, #28]	; (8005a98 <_kill_r+0x20>)
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	4604      	mov	r4, r0
 8005a80:	4608      	mov	r0, r1
 8005a82:	4611      	mov	r1, r2
 8005a84:	602b      	str	r3, [r5, #0]
 8005a86:	f7fc f8ab 	bl	8001be0 <_kill>
 8005a8a:	1c43      	adds	r3, r0, #1
 8005a8c:	d102      	bne.n	8005a94 <_kill_r+0x1c>
 8005a8e:	682b      	ldr	r3, [r5, #0]
 8005a90:	b103      	cbz	r3, 8005a94 <_kill_r+0x1c>
 8005a92:	6023      	str	r3, [r4, #0]
 8005a94:	bd38      	pop	{r3, r4, r5, pc}
 8005a96:	bf00      	nop
 8005a98:	20012fa4 	.word	0x20012fa4

08005a9c <_getpid_r>:
 8005a9c:	f7fc b898 	b.w	8001bd0 <_getpid>

08005aa0 <__sread>:
 8005aa0:	b510      	push	{r4, lr}
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa8:	f000 f894 	bl	8005bd4 <_read_r>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	bfab      	itete	ge
 8005ab0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8005ab4:	181b      	addge	r3, r3, r0
 8005ab6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005aba:	bfac      	ite	ge
 8005abc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005abe:	81a3      	strhlt	r3, [r4, #12]
 8005ac0:	bd10      	pop	{r4, pc}

08005ac2 <__swrite>:
 8005ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac6:	461f      	mov	r7, r3
 8005ac8:	898b      	ldrh	r3, [r1, #12]
 8005aca:	05db      	lsls	r3, r3, #23
 8005acc:	4605      	mov	r5, r0
 8005ace:	460c      	mov	r4, r1
 8005ad0:	4616      	mov	r6, r2
 8005ad2:	d505      	bpl.n	8005ae0 <__swrite+0x1e>
 8005ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad8:	2302      	movs	r3, #2
 8005ada:	2200      	movs	r2, #0
 8005adc:	f000 f868 	bl	8005bb0 <_lseek_r>
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aea:	81a3      	strh	r3, [r4, #12]
 8005aec:	4632      	mov	r2, r6
 8005aee:	463b      	mov	r3, r7
 8005af0:	4628      	mov	r0, r5
 8005af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005af6:	f000 b817 	b.w	8005b28 <_write_r>

08005afa <__sseek>:
 8005afa:	b510      	push	{r4, lr}
 8005afc:	460c      	mov	r4, r1
 8005afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b02:	f000 f855 	bl	8005bb0 <_lseek_r>
 8005b06:	1c43      	adds	r3, r0, #1
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	bf15      	itete	ne
 8005b0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b16:	81a3      	strheq	r3, [r4, #12]
 8005b18:	bf18      	it	ne
 8005b1a:	81a3      	strhne	r3, [r4, #12]
 8005b1c:	bd10      	pop	{r4, pc}

08005b1e <__sclose>:
 8005b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b22:	f000 b813 	b.w	8005b4c <_close_r>
	...

08005b28 <_write_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4d07      	ldr	r5, [pc, #28]	; (8005b48 <_write_r+0x20>)
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	4608      	mov	r0, r1
 8005b30:	4611      	mov	r1, r2
 8005b32:	2200      	movs	r2, #0
 8005b34:	602a      	str	r2, [r5, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	f7fc f889 	bl	8001c4e <_write>
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	d102      	bne.n	8005b46 <_write_r+0x1e>
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	b103      	cbz	r3, 8005b46 <_write_r+0x1e>
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	bd38      	pop	{r3, r4, r5, pc}
 8005b48:	20012fa4 	.word	0x20012fa4

08005b4c <_close_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4d06      	ldr	r5, [pc, #24]	; (8005b68 <_close_r+0x1c>)
 8005b50:	2300      	movs	r3, #0
 8005b52:	4604      	mov	r4, r0
 8005b54:	4608      	mov	r0, r1
 8005b56:	602b      	str	r3, [r5, #0]
 8005b58:	f7fc f895 	bl	8001c86 <_close>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d102      	bne.n	8005b66 <_close_r+0x1a>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	b103      	cbz	r3, 8005b66 <_close_r+0x1a>
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
 8005b68:	20012fa4 	.word	0x20012fa4

08005b6c <_fstat_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	4d07      	ldr	r5, [pc, #28]	; (8005b8c <_fstat_r+0x20>)
 8005b70:	2300      	movs	r3, #0
 8005b72:	4604      	mov	r4, r0
 8005b74:	4608      	mov	r0, r1
 8005b76:	4611      	mov	r1, r2
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	f7fc f890 	bl	8001c9e <_fstat>
 8005b7e:	1c43      	adds	r3, r0, #1
 8005b80:	d102      	bne.n	8005b88 <_fstat_r+0x1c>
 8005b82:	682b      	ldr	r3, [r5, #0]
 8005b84:	b103      	cbz	r3, 8005b88 <_fstat_r+0x1c>
 8005b86:	6023      	str	r3, [r4, #0]
 8005b88:	bd38      	pop	{r3, r4, r5, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20012fa4 	.word	0x20012fa4

08005b90 <_isatty_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4d06      	ldr	r5, [pc, #24]	; (8005bac <_isatty_r+0x1c>)
 8005b94:	2300      	movs	r3, #0
 8005b96:	4604      	mov	r4, r0
 8005b98:	4608      	mov	r0, r1
 8005b9a:	602b      	str	r3, [r5, #0]
 8005b9c:	f7fc f88f 	bl	8001cbe <_isatty>
 8005ba0:	1c43      	adds	r3, r0, #1
 8005ba2:	d102      	bne.n	8005baa <_isatty_r+0x1a>
 8005ba4:	682b      	ldr	r3, [r5, #0]
 8005ba6:	b103      	cbz	r3, 8005baa <_isatty_r+0x1a>
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	bd38      	pop	{r3, r4, r5, pc}
 8005bac:	20012fa4 	.word	0x20012fa4

08005bb0 <_lseek_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4d07      	ldr	r5, [pc, #28]	; (8005bd0 <_lseek_r+0x20>)
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	4608      	mov	r0, r1
 8005bb8:	4611      	mov	r1, r2
 8005bba:	2200      	movs	r2, #0
 8005bbc:	602a      	str	r2, [r5, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f7fc f888 	bl	8001cd4 <_lseek>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d102      	bne.n	8005bce <_lseek_r+0x1e>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	b103      	cbz	r3, 8005bce <_lseek_r+0x1e>
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	20012fa4 	.word	0x20012fa4

08005bd4 <_read_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4d07      	ldr	r5, [pc, #28]	; (8005bf4 <_read_r+0x20>)
 8005bd8:	4604      	mov	r4, r0
 8005bda:	4608      	mov	r0, r1
 8005bdc:	4611      	mov	r1, r2
 8005bde:	2200      	movs	r2, #0
 8005be0:	602a      	str	r2, [r5, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	f7fc f816 	bl	8001c14 <_read>
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d102      	bne.n	8005bf2 <_read_r+0x1e>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	b103      	cbz	r3, 8005bf2 <_read_r+0x1e>
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	20012fa4 	.word	0x20012fa4

08005bf8 <_init>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr

08005c04 <_fini>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr
